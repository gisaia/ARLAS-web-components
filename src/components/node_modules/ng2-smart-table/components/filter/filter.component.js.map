{"version":3,"file":"filter.component.js","sourceRoot":"","sources":["../../../../src/ng2-smart-table/components/filter/filter.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAA4B,MAAM,eAAe,CAAC;AAEjG,OAAO,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAC/D,OAAO,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAC;AAmCnD,IAAa,eAAe;IAhC5B;QAoCW,eAAU,GAAW,EAAE,CAAC;QAEvB,WAAM,GAAG,IAAI,YAAY,EAAO,CAAC;QAE3C,UAAK,GAAW,EAAE,CAAC;IAkCrB,CAAC;IA9BC,qCAAW,GAAX,UAAY,OAAsB;QAAlC,iBAqBC;QApBC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;YACpC,CAAC;YACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,UAAC,WAAW;gBAClE,IAAM,UAAU,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAC3C,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxE,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;oBAEhB,kFAAkF;oBAClF,sGAAsG;gBACxG,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7E,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAM,EAAE,CAAM;wBACxC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC9B,KAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC;wBACxB,CAAC;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,kCAAQ,GAAR,UAAS,KAAa;QACpB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;YACpB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;YACrB,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;SACxC,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAAC,AA1CD,IA0CC;AAxCU;IAAR,KAAK,EAAE;8BAAS,MAAM;+CAAC;AACf;IAAR,KAAK,EAAE;8BAAS,UAAU;+CAAC;AACnB;IAAR,KAAK,EAAE;;mDAAyB;AAEvB;IAAT,MAAM,EAAE;;+CAAkC;AANhC,eAAe;IAhC3B,SAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,SAAS,EAAE,CAAC,yBAAyB,CAAC;QACtC,QAAQ,EAAE,yoCA2BT;KACF,CAAC;GACW,eAAe,CA0C3B;SA1CY,eAAe","sourcesContent":["import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { DataSource } from '../../lib/data-source/data-source';\r\nimport { Column } from '../../lib/data-set/column';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n@Component({\r\n  selector: 'ng2-smart-table-filter',\r\n  styleUrls: ['./filter.component.scss'],\r\n  template: `\r\n    <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\r\n      <select-filter *ngSwitchCase=\"'list'\"\r\n                     [query]=\"query\"\r\n                     [ngClass]=\"inputClass\"\r\n                     [column]=\"column\"\r\n                     (filter)=\"onFilter($event)\">\r\n      </select-filter>\r\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\r\n                       [query]=\"query\"\r\n                       [ngClass]=\"inputClass\"\r\n                       [column]=\"column\"\r\n                       (filter)=\"onFilter($event)\">\r\n      </checkbox-filter>\r\n      <completer-filter *ngSwitchCase=\"'completer'\"\r\n                        [query]=\"query\"\r\n                        [ngClass]=\"inputClass\"\r\n                        [column]=\"column\"\r\n                        (filter)=\"onFilter($event)\">\r\n      </completer-filter>\r\n      <input-filter *ngSwitchDefault\r\n                    [query]=\"query\"\r\n                    [ngClass]=\"inputClass\"\r\n                    [column]=\"column\"\r\n                    (filter)=\"onFilter($event)\">\r\n      </input-filter>\r\n    </div>\r\n  `,\r\n})\r\nexport class FilterComponent implements OnChanges {\r\n\r\n  @Input() column: Column;\r\n  @Input() source: DataSource;\r\n  @Input() inputClass: string = '';\r\n\r\n  @Output() filter = new EventEmitter<any>();\r\n\r\n  query: string = '';\r\n\r\n  protected dataChangedSub: Subscription;\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.source) {\r\n      if (!changes.source.firstChange) {\r\n        this.dataChangedSub.unsubscribe();\r\n      }\r\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\r\n        const filterConf = this.source.getFilter();\r\n        if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\r\n          this.query = '';\r\n\r\n          // add a check for existing filters an set the query if one exists for this column\r\n          // this covers instances where the filter is set by user code while maintaining existing functionality\r\n        } else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\r\n          filterConf.filters.forEach((k: any, v: any) => {\r\n            if (k.field == this.column.id) {\r\n              this.query = k.search;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onFilter(query: string) {\r\n    this.source.addFilter({\r\n      field: this.column.id,\r\n      search: query,\r\n      filter: this.column.getFilterFunction(),\r\n    });\r\n  }\r\n}\r\n"]}