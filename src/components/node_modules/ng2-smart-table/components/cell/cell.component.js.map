{"version":3,"file":"cell.component.js","sourceRoot":"","sources":["../../../../src/ng2-smart-table/components/cell/cell.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAEvE,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,GAAG,EAAE,MAAM,wBAAwB,CAAC;AAY7C,IAAa,aAAa;IAV1B;QAkBW,eAAU,GAAW,EAAE,CAAC;QACxB,SAAI,GAAW,QAAQ,CAAC;QACxB,gBAAW,GAAY,KAAK,CAAC;QAE5B,WAAM,GAAG,IAAI,YAAY,EAAO,CAAC;IAS7C,CAAC;IAPC,gCAAQ,GAAR,UAAS,KAAU;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AArBD,IAqBC;AAnBU;IAAR,KAAK,EAAE;8BAAO,IAAI;2CAAC;AACX;IAAR,KAAK,EAAE;8BAAM,GAAG;0CAAC;AACT;IAAR,KAAK,EAAE;8BAAc,YAAY;kDAAM;AAC/B;IAAR,KAAK,EAAE;8BAAgB,YAAY;oDAAM;AACjC;IAAR,KAAK,EAAE;;4CAAgB;AACf;IAAR,KAAK,EAAE;8BAAO,IAAI;2CAAC;AACX;IAAR,KAAK,EAAE;;iDAAyB;AACxB;IAAR,KAAK,EAAE;;2CAAyB;AACxB;IAAR,KAAK,EAAE;;kDAA8B;AAE5B;IAAT,MAAM,EAAE;;6CAAkC;AAZhC,aAAa;IAVzB,SAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,QAAQ,EAAE,+SAMT;KACF,CAAC;GACW,aAAa,CAqBzB;SArBY,aAAa","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { Grid } from '../../lib/grid';\r\nimport { Cell } from '../../lib/data-set/cell';\r\nimport { Row } from '../../lib/data-set/row';\r\n\r\n@Component({\r\n  selector: 'ng2-smart-table-cell',\r\n  template: `\r\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\r\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\r\n                          [inputClass]=\"inputClass\"\r\n                          (edited)=\"onEdited($event)\">\r\n    </table-cell-edit-mode>\r\n  `,\r\n})\r\nexport class CellComponent {\r\n\r\n  @Input() grid: Grid;\r\n  @Input() row: Row;\r\n  @Input() editConfirm: EventEmitter<any>;\r\n  @Input() createConfirm: EventEmitter<any>;\r\n  @Input() isNew: boolean;\r\n  @Input() cell: Cell;\r\n  @Input() inputClass: string = '';\r\n  @Input() mode: string = 'inline';\r\n  @Input() isInEditing: boolean = false;\r\n\r\n  @Output() edited = new EventEmitter<any>();\r\n\r\n  onEdited(event: any) {\r\n    if (this.isNew) {\r\n      this.grid.create(this.grid.getNewRow(), this.createConfirm);\r\n    } else {\r\n      this.grid.save(this.row, this.editConfirm);\r\n    }\r\n  }\r\n}\r\n"]}