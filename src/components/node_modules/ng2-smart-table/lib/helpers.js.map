{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/ng2-smart-table/lib/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { cloneDeep } from 'lodash';\r\n\r\n/**\r\n * Extending object that entered in first argument.\r\n *\r\n * Returns extended object or false if have no target object or incorrect type.\r\n *\r\n * If you wish to clone source object (without modify it), just use empty new\r\n * object as first argument, like this:\r\n *   deepExtend({}, yourObj_1, [yourObj_N]);\r\n */\r\nexport const deepExtend = function(...objects: Array<any>): any {\r\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  if (arguments.length < 2) {\r\n    return arguments[0];\r\n  }\r\n\r\n  const target = arguments[0];\r\n\r\n  // convert arguments to array and cut off target object\r\n  const args = Array.prototype.slice.call(arguments, 1);\r\n\r\n  let val, src;\r\n\r\n  args.forEach((obj: any) => {\r\n    // skip argument if it is array or isn't object\r\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\r\n      return;\r\n    }\r\n\r\n    Object.keys(obj).forEach(function (key) {\r\n      src = target[key]; // source value\r\n      val = obj[key]; // new value\r\n\r\n      // recursion prevention\r\n      if (val === target) {\r\n        return;\r\n\r\n        /**\r\n         * if new value isn't object then just overwrite by new value\r\n         * instead of extending.\r\n         */\r\n      } else if (typeof val !== 'object' || val === null) {\r\n        target[key] = val;\r\n        return;\r\n\r\n        // just clone arrays (and recursive clone objects inside)\r\n      } else if (Array.isArray(val)) {\r\n        target[key] = cloneDeep(val);\r\n        return;\r\n\r\n        // overwrite by new value if source isn't object or array\r\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\r\n        target[key] = deepExtend({}, val);\r\n        return;\r\n\r\n        // source value and new value is objects both, extending...\r\n      } else {\r\n        target[key] = deepExtend(src, val);\r\n        return;\r\n      }\r\n    });\r\n  });\r\n\r\n  return target;\r\n};\r\n\r\nexport class Deferred {\r\n\r\n  promise: Promise<any>;\r\n\r\n  resolve: any;\r\n  reject: any;\r\n\r\n  constructor() {\r\n    this.promise = new Promise((resolve, reject) => {\r\n      this.resolve = resolve;\r\n      this.reject = reject;\r\n    });\r\n  }\r\n}\r\n\r\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\r\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\r\n  const keys = name.split('.');\r\n  // clone the object\r\n  let level = deepExtend({}, object);\r\n  keys.forEach((k) => {\r\n    if (level && typeof level[k] !== 'undefined') {\r\n      level = level[k];\r\n    }\r\n  });\r\n\r\n  return typeof level === 'undefined' ? defaultValue : level;\r\n}\r\n"]}