{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../src/ng2-smart-table/lib/grid.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nimport { Deferred, getDeepFromObject } from './helpers';\r\nimport { Column } from './data-set/column';\r\nimport { Row } from './data-set/row';\r\nimport { DataSet } from './data-set/data-set';\r\nimport { DataSource } from './data-source/data-source';\r\n\r\nexport class Grid {\r\n\r\n  createFormShown: boolean = false;\r\n\r\n  source: DataSource;\r\n  settings: any;\r\n  dataSet: DataSet;\r\n\r\n  onSelectRowSource = new Subject<any>();\r\n\r\n  constructor(source: DataSource, settings: any) {\r\n    this.setSettings(settings);\r\n    this.setSource(source);\r\n  }\r\n\r\n  showActionColumn(position: string): boolean {\r\n    return this.isCurrentActionsPosition(position) && this.isActionsVisible();\r\n  }\r\n\r\n  isCurrentActionsPosition(position: string): boolean {\r\n    return position == this.getSetting('actions.position');\r\n  }\r\n\r\n  isActionsVisible(): boolean {\r\n    return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\r\n  }\r\n\r\n  isMultiSelectVisible(): boolean {\r\n    return this.getSetting('selectMode') === 'multi';\r\n  }\r\n\r\n  getNewRow(): Row {\r\n    return this.dataSet.newRow;\r\n  }\r\n\r\n  setSettings(settings: Object) {\r\n    this.settings = settings;\r\n    this.dataSet = new DataSet([], this.getSetting('columns'));\r\n\r\n    if (this.source) {\r\n      this.source.refresh();\r\n    }\r\n  }\r\n\r\n  getDataSet(): DataSet {\r\n    return this.dataSet;\r\n  }\r\n\r\n  setSource(source: DataSource) {\r\n    this.source = this.prepareSource(source);\r\n\r\n    this.source.onChanged().subscribe((changes) => this.processDataChange(changes));\r\n\r\n    this.source.onUpdated().subscribe((data) => {\r\n      const changedRow = this.dataSet.findRowByData(data);\r\n      changedRow.setData(data);\r\n    });\r\n  }\r\n\r\n  getSetting(name: string, defaultValue?: any): any {\r\n    return getDeepFromObject(this.settings, name, defaultValue);\r\n  }\r\n\r\n  getColumns(): Array<Column> {\r\n    return this.dataSet.getColumns();\r\n  }\r\n\r\n  getRows(): Array<Row> {\r\n    return this.dataSet.getRows();\r\n  }\r\n\r\n  selectRow(row: Row) {\r\n    this.dataSet.selectRow(row);\r\n  }\r\n\r\n  multipleSelectRow(row: Row) {\r\n    this.dataSet.multipleSelectRow(row);\r\n  }\r\n\r\n  onSelectRow(): Observable<any> {\r\n    return this.onSelectRowSource.asObservable();\r\n  }\r\n\r\n  edit(row: Row) {\r\n    row.isInEditing = true;\r\n  }\r\n\r\n  create(row: Row, confirmEmitter: EventEmitter<any>) {\r\n\r\n    const deferred = new Deferred();\r\n    deferred.promise.then((newData) => {\r\n      newData = newData ? newData : row.getNewData();\r\n      if (deferred.resolve.skipAdd) {\r\n        this.createFormShown = false;\r\n      } else {\r\n        this.source.prepend(newData).then(() => {\r\n          this.createFormShown = false;\r\n          this.dataSet.createNewRow();\r\n        });\r\n      }\r\n    }).catch((err) => {\r\n      // doing nothing\r\n    });\r\n\r\n    if (this.getSetting('add.confirmCreate')) {\r\n      confirmEmitter.emit({\r\n        newData: row.getNewData(),\r\n        source: this.source,\r\n        confirm: deferred,\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n  }\r\n\r\n  save(row: Row, confirmEmitter: EventEmitter<any>) {\r\n\r\n    const deferred = new Deferred();\r\n    deferred.promise.then((newData) => {\r\n      newData = newData ? newData : row.getNewData();\r\n      if (deferred.resolve.skipEdit) {\r\n        row.isInEditing = false;\r\n      } else {\r\n        this.source.update(row.getData(), newData).then(() => {\r\n          row.isInEditing = false;\r\n        });\r\n      }\r\n    }).catch((err) => {\r\n      // doing nothing\r\n    });\r\n\r\n    if (this.getSetting('edit.confirmSave')) {\r\n      confirmEmitter.emit({\r\n        data: row.getData(),\r\n        newData: row.getNewData(),\r\n        source: this.source,\r\n        confirm: deferred,\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n  }\r\n\r\n  delete(row: Row, confirmEmitter: EventEmitter<any>) {\r\n\r\n    const deferred = new Deferred();\r\n    deferred.promise.then(() => {\r\n      this.source.remove(row.getData());\r\n    }).catch((err) => {\r\n      // doing nothing\r\n    });\r\n\r\n    if (this.getSetting('delete.confirmDelete')) {\r\n      confirmEmitter.emit({\r\n        data: row.getData(),\r\n        source: this.source,\r\n        confirm: deferred,\r\n      });\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n  }\r\n\r\n  processDataChange(changes: any) {\r\n    if (this.shouldProcessChange(changes)) {\r\n      this.dataSet.setData(changes['elements']);\r\n      if (this.getSetting('selectMode') !== 'multi') {\r\n        const row = this.determineRowToSelect(changes);\r\n\r\n        if (row) {\r\n          this.onSelectRowSource.next(row);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  shouldProcessChange(changes: any): boolean {\r\n    if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\r\n      return true;\r\n    } else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // TODO: move to selectable? Separate directive\r\n  determineRowToSelect(changes: any): Row {\r\n\r\n    if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\r\n      return this.dataSet.select();\r\n    }\r\n    if (changes['action'] === 'remove') {\r\n      if (changes['elements'].length === 0) {\r\n        // we have to store which one to select as the data will be reloaded\r\n        this.dataSet.willSelectLastRow();\r\n      } else {\r\n        return this.dataSet.selectPreviousRow();\r\n      }\r\n    }\r\n    if (changes['action'] === 'append') {\r\n      // we have to store which one to select as the data will be reloaded\r\n      this.dataSet.willSelectLastRow();\r\n    }\r\n    if (changes['action'] === 'add') {\r\n      return this.dataSet.selectFirstRow();\r\n    }\r\n    if (changes['action'] === 'update') {\r\n      return this.dataSet.selectFirstRow();\r\n    }\r\n    if (changes['action'] === 'prepend') {\r\n      // we have to store which one to select as the data will be reloaded\r\n      this.dataSet.willSelectFirstRow();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  prepareSource(source: any): DataSource {\r\n    const initialSource: any = this.getInitialSort();\r\n    if (initialSource && initialSource['field'] && initialSource['direction']) {\r\n      source.setSort([initialSource], false);\r\n    }\r\n    if (this.getSetting('pager.display') === true) {\r\n      source.setPaging(1, this.getSetting('pager.perPage'), false);\r\n    }\r\n\r\n    source.refresh();\r\n    return source;\r\n  }\r\n\r\n  getInitialSort() {\r\n    const sortConf: any = {};\r\n    this.getColumns().forEach((column: Column) => {\r\n      if (column.isSortable && column.defaultSortDirection) {\r\n        sortConf['field'] = column.id;\r\n        sortConf['direction'] = column.defaultSortDirection;\r\n        sortConf['compare'] = column.getCompareFunction();\r\n      }\r\n    });\r\n    return sortConf;\r\n  }\r\n\r\n  getSelectedRows(): Array<any> {\r\n    return this.dataSet.getRows()\r\n      .filter(r => r.isSelected);\r\n  }\r\n\r\n  selectAllRows(status: any) {\r\n    this.dataSet.getRows()\r\n      .forEach(r => r.isSelected = status);\r\n  }\r\n\r\n  getFirstRow(): Row {\r\n    return this.dataSet.getFirstRow();\r\n  }\r\n\r\n  getLastRow(): Row {\r\n    return this.dataSet.getLastRow();\r\n  }\r\n\r\n}\r\n"]}