/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, ElementRef, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { ChartArea, ChartBars, ChartCurve, ChartOneDimension, ChartType, DataType, HistogramParams, HistogramUtils, Position, SelectionType, SwimlaneBars, SwimlaneCircles, SwimlaneMode } from 'arlas-d3';
import { SwimlaneRepresentation } from 'arlas-d3/histograms/utils/HistogramUtils';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { ArlasColorService } from '../../services/color.generator.service';
import { NUMBER_FORMAT_CHAR } from '../componentsUtils';
import * as histogramJsonSchema from './histogram.schema.json';
import * as swimlaneJsonSchema from './swimlane.schema.json';
import * as i0 from "@angular/core";
import * as i1 from "../../services/color.generator.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/tooltip";
import * as i5 from "../../pipes/get-collection-unit/get-collection-unit.pipe";
import * as i6 from "./histogram-key.pipe";
/**
 * The Histogram web component allows you to display your numeric and temporal data in charts or swimlanes.
 * Charts can be represented as bars or areas.
 * Swimlanes can be represented as bars or circles.
 * For both modes, data can be multi-selected using a selection brush.
 */
export class HistogramComponent {
    constructor(colorService, el, translate) {
        this.colorService = colorService;
        this.el = el;
        this.translate = translate;
        /**
         * @Input
         * @description To be set to `time` when x axis represents dates and to `numeric` otherwise.
         */
        this.dataType = DataType.numeric;
        /**
         * @description Unit of data to add in the end of tooltip values.
         * @deprecated If xUnit is specified, dataUnit is not taken into account.
         */
        this.dataUnit = '';
        /**
         * @description Unit of x axis values.
         */
        this.xUnit = '';
        /**
         * @description Unit of y axis values.
         */
        this.yUnit = '';
        /**
         * @Input : Angular
         * @description The date format of the start/end values.
         *  Please refer to this [list of specifiers](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format).
         */
        this.valuesDateFormat = null;
        /**
         * @Input : Angular
         * @description Whether the chart is selectable.
         */
        this.isHistogramSelectable = true;
        /**
         * @Input : Angular
         * @description Whether the selection is multiple.
         */
        this.multiselectable = false;
        /**
         * @Input : Angular
         * @description Top position of the remove-selection-button.
         */
        this.topOffsetRemoveInterval = 40;
        /**
         * @Input : Angular
         * @description leftOffsetRemoveInterval.
         */
        this.leftOffsetRemoveInterval = 18;
        /**
         * @Input : Angular
         * @description A 0 to 1 weight of the brush handles height.
         * This input will be taken into account when selectionType is 'rectangle'.
         * (This input will be renamed handlesHeightWeight in the v25.0.0 release.)
         */
        this.brushHandlesHeightWeight = 1;
        /**
         * @Input : Angular
         * @description Radius of handles in pixels. This input will be taken into account when selectionType is 'slider'.
         */
        this.handlesRadius = 4;
        /**
         * @Input : Angular
         * @description Radius of handles in pixels. This input will be taken into account when selectionType is 'slider'.
         */
        this.selectionType = SelectionType.slider;
        /**
         * @Input : Angular
         * @description Chart's representation type.
         */
        this.chartType = ChartType.area;
        /**
         * @Input : Angular
         * @description Chart's title.
         */
        this.chartTitle = '';
        /**
         * @Input : Angular
         * @description Chart's label for the x axis (Visible when there is one bucket on the histogram).
         */
        this.chartXLabel = '';
        /**
         * @Input : Angular
         * @description Chart's label for the y axis (Visible when there is one bucket on the histogram).
         */
        this.chartYLabel = '';
        /**
         * @Input : Angular
         * @description Chart's width. If not specified, the chart takes the component's container width.
         */
        this.chartWidth = null;
        /**
         * @Input : Angular
         * @description Chart's height. If not specified, the chart takes the component's container height.
         */
        this.chartHeight = null;
        /**
         * @Input : Angular
         * @description Css class name to use to customize a specific `arlas-histogram` component.
         */
        this.customizedCssClass = '';
        /**
         * @Input : Angular
         * @description Whether the histogram values start from zero or from the minimum of data
         */
        this.yAxisStartsFromZero = true;
        /**
         * @Input : Angular
         * @description Whether to add stripes in the histograms when yAxis starts from minimum of data
         */
        this.showStripes = true;
        /**
         * @Input : Angular
         * @description The xAxis positon : above or below the chart.
         */
        this.xAxisPosition = Position.bottom;
        /**
         * @Input : Angular
         * @description The start/end values positon : above or below the chart.
         */
        this.descriptionPosition = Position.bottom;
        /**
         * @Input : Angular
         * @description Number of ticks in the X axis.
         */
        this.xTicks = 5;
        /**
         * @Input : Angular
         * @description Number of ticks in the Y axis.
         */
        this.yTicks = 5;
        /**
         * @Input : Angular
         * @description Number of labels in the X axis.
         */
        this.xLabels = 5;
        /**
         * @Input : Angular
         * @description Number of labels in the Y axis.
         */
        this.yLabels = 5;
        /**
         * @Input : Angular
         * @description Display short labels on y axis.
         */
        this.shortYLabels = false;
        /**
         * @Input : Angular
         * @description Whether showing the X axis ticks.
         */
        this.showXTicks = true;
        /**
         * @Input : Angular
         * @description Whether showing the Y axis ticks.
         */
        this.showYTicks = true;
        /**
         * @Input : Angular
         * @description Whether showing the X axis labels.
         */
        this.showXLabels = true;
        /**
         * @Input : Angular
         * @description Whether showing the Y axis labels.
         */
        this.showYLabels = true;
        /**
         * @Input : Angular
         * @description Whether showing the horizontal dashed lines.
         */
        this.showHorizontalLines = true;
        /**
         * @Input : Angular
         * @description The date format of ticks.
         * Please refer to this [list of specifiers](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format).
         */
        this.ticksDateFormat = null;
        /**
         * @Input : Angular
         * @description Whether the curve of an `area` chart is smoothed.
         */
        this.isSmoothedCurve = true;
        /**
         * @Input : Angular
         * @description Weight applied to bars width. ]0,1].
         */
        this.barWeight = 0.6;
        /**
         * @Input : Angular
         * @description Either a hex string color or a color name (in English) or a saturation interval.
         */
        this.paletteColors = null;
        /**
        * @Input : Angular
        * @description Allows to include only selections that contain data in the histogram/swimlane
        */
        this.displayOnlyIntervalsWithData = false;
        /**
         * @Input : Angular
         * @description Translates area chart by half data interval
         */
        this.applyOffsetOnAreaChart = true;
        /**
         * @Input : Angular
         * @description The swimlane mode.
         * - `variableHeight` buckets height varies with the bucket's value
         * - `fixedHeight` all the buckets have the same height. A level tick is plotted on the bucket to indicate
         * the value level compared to other values.
         * - `circles` buckets are represented with circles whose radius varies the bucket's value.
         */
        this.swimlaneMode = SwimlaneMode.variableHeight;
        /**
         * @Input : Angular
         * @description The swimlane representation.
         * - `column` representation focuses on terms of the same column; each term is compared to the sum of all terms values in the column.
         * - `global` representation compares all the buckets values to the maximum value in the swimlane.
         */
        this.swimlaneRepresentation = SwimlaneRepresentation.global;
        /**
         * @Input : Angular
         * @description The width of swimlane labels space.
         */
        this.swimLaneLabelsWidth = null;
        /**
         * @Input : Angular
         * @description The radius of swimlane bars borders.
         */
        this.swimlaneBorderRadius = 3;
        /**
         * @Input : Angular
         * @description The height of a single lane. If not specified, a lane height is the chartHeight devided by the number of lanes.
         */
        this.swimlaneHeight = null;
        /**
         * @Input : Angular
         * @description Term's list of powerbars to select
         */
        this.selectedSwimlanes = new Set();
        /**
       * @Input : Angular
       * @description Wether use UTC to display date on the app
       */
        this.useUtc = true;
        /**
         * @Output : Angular
         * @description Emits the list of selected powerbars terms
         */
        this.selectedSwimlanesEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the list of selected intervals.
         */
        this.valuesListChangedEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the hovered bucket key (key as in HistogramData).
         */
        this.hoveredBucketEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits an event informing that the chart finished plotting.
         */
        this.dataPlottedEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the hovered bucket information that can be exploited to display a tooltip
         */
        this.tooltipEvent = new Subject();
        this.ChartType = ChartType;
        this.Position = Position;
        this._onDestroy$ = new Subject();
        fromEvent(window, 'resize')
            .pipe(debounceTime(500), takeUntil(this._onDestroy$))
            .subscribe((event) => {
            this.resizeHistogram();
        });
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    static getHistogramJsonSchema() {
        return histogramJsonSchema;
    }
    static getSwimlaneJsonSchema() {
        return swimlaneJsonSchema;
    }
    ngOnChanges(changes) {
        if (this.histogram === undefined) {
            switch (this.chartType) {
                case ChartType.area: {
                    this.histogram = new ChartArea();
                    this.chart = this.histogram;
                    break;
                }
                case ChartType.curve: {
                    this.histogram = new ChartCurve();
                    this.chart = this.histogram;
                    break;
                }
                case ChartType.bars: {
                    this.histogram = new ChartBars();
                    this.chart = this.histogram;
                    break;
                }
                case ChartType.oneDimension: {
                    this.histogram = new ChartOneDimension();
                    this.chart = this.histogram;
                    break;
                }
                case ChartType.swimlane: {
                    if (this.swimlaneMode === SwimlaneMode.circles) {
                        this.histogram = new SwimlaneCircles();
                    }
                    else {
                        this.histogram = new SwimlaneBars();
                    }
                    break;
                }
                default: {
                    this.histogram = new ChartArea();
                    break;
                }
            }
            this.setHistogramParameters();
        }
        if (changes.data && this.data !== undefined && this.histogram !== undefined) {
            if (Array.isArray(this.data)) {
                this.histogram.histogramParams.histogramData = this.data;
            }
            else {
                this.histogram.histogramParams.swimlaneData = this.data;
            }
            this.histogram.histogramParams.hasDataChanged = true;
            this.plotHistogram(this.data);
            this.histogram.histogramParams.hasDataChanged = false;
            this.dataPlottedEvent.next('DATA_PLOTTED');
        }
        if (changes.intervalSelection && this.intervalSelection !== undefined && this.histogram !== undefined && this.isHistogramSelectable) {
            this.histogram.histogramParams.intervalSelection = this.intervalSelection;
            if (this.histogram.histogramParams.dataLength > 0) {
                this.histogram.setSelectedInterval(this.intervalSelection);
            }
        }
        if (changes.intervalListSelection && this.isHistogramSelectable && this.histogram !== undefined) {
            if (changes.intervalListSelection.currentValue) {
                this.histogram.histogramParams.intervalListSelection = this.intervalListSelection;
                this.histogram.redrawSelectedIntervals();
            }
        }
        if (changes.selectedSwimlanes && this.histogram !== undefined && this.chartType === ChartType.swimlane) {
            this.histogram.histogramParams.selectedSwimlanes = this.selectedSwimlanes;
            this.histogram.applyStyleOnSwimlanes();
        }
    }
    ngOnInit() {
    }
    ngAfterViewChecked() {
        if (this.chartType === ChartType.swimlane) {
            this.histogram.truncateLabels();
        }
        if (this.rt !== undefined && this.lt !== undefined) {
            this.histogram.setHTMLElementsOfBrushCornerTooltips(this.rt.nativeElement, this.lt.nativeElement);
        }
    }
    /**
     * @description Plots the histogram
     */
    plotHistogram(inputData) {
        this.histogram.plot(inputData);
    }
    /**
     * @description Resizes the histogram on windows resize event
     */
    resizeHistogram() {
        if (this.histogram) {
            this.histogram.resize(this.el.nativeElement.childNodes[0]);
        }
    }
    /**
     * @description Removes the selected interval
     */
    removeSelectInterval(id) {
        this.histogram.removeSelectInterval(id);
    }
    setHistogramParameters() {
        if (!this.chartXLabel) {
            this.chartXLabel = '';
        }
        if (!this.chartYLabel) {
            this.chartYLabel = '';
        }
        if (!this.xUnit && this.dataUnit) {
            this.xUnit = this.dataUnit;
        }
        else if (!this.xUnit) {
            this.xUnit = '';
        }
        if (!this.dataUnit) {
            this.dataUnit = '';
        }
        if (!this.yUnit) {
            this.yUnit = '';
        }
        if (!this.selectionType) {
            this.selectionType = SelectionType.slider;
        }
        this.histogram.histogramParams = new HistogramParams();
        this.histogram.histogramParams.useUtc = this.useUtc;
        this.histogram.histogramParams.selectionType = this.selectionType;
        this.histogram.histogramParams.handlesRadius = this.handlesRadius;
        if (this.histogram.histogramParams.useUtc === undefined) {
            this.histogram.histogramParams.useUtc = true;
        }
        this.histogram.histogramParams.barWeight = this.barWeight;
        this.histogram.histogramParams.numberFormatChar = this.translate.instant(NUMBER_FORMAT_CHAR);
        this.histogram.histogramParams.handlesHeightWeight = this.brushHandlesHeightWeight;
        this.histogram.histogramParams.chartHeight = this.chartHeight;
        this.histogram.histogramParams.chartTitle = this.chartTitle;
        this.histogram.histogramParams.chartType = this.chartType;
        this.histogram.histogramParams.chartWidth = this.chartWidth;
        if (Array.isArray(this.data)) {
            this.histogram.histogramParams.histogramData = this.data;
        }
        else {
            this.histogram.histogramParams.swimlaneData = this.data;
        }
        this.histogram.histogramParams.dataType = this.dataType;
        this.histogram.histogramParams.dataUnit = this.dataUnit;
        this.histogram.histogramParams.hoveredBucketEvent = this.hoveredBucketEvent;
        this.histogram.histogramParams.intervalListSelection = this.intervalListSelection;
        this.histogram.histogramParams.intervalSelection = this.intervalSelection;
        this.histogram.histogramParams.isHistogramSelectable = this.isHistogramSelectable;
        this.histogram.histogramParams.isSmoothedCurve = this.isSmoothedCurve;
        this.histogram.histogramParams.multiselectable = this.multiselectable;
        this.histogram.histogramParams.paletteColors = this.paletteColors;
        this.histogram.histogramParams.showHorizontalLines = this.showHorizontalLines;
        this.histogram.histogramParams.showXLabels = this.showXLabels;
        this.histogram.histogramParams.showXTicks = this.showXTicks;
        this.histogram.histogramParams.showYLabels = this.showYLabels;
        this.histogram.histogramParams.showYTicks = this.showYTicks;
        this.histogram.histogramParams.ticksDateFormat = this.ticksDateFormat;
        this.histogram.histogramParams.topOffsetRemoveInterval = this.topOffsetRemoveInterval;
        this.histogram.histogramParams.valuesDateFormat = this.valuesDateFormat;
        this.histogram.histogramParams.valuesListChangedEvent = this.valuesListChangedEvent;
        this.histogram.histogramParams.xAxisPosition = this.xAxisPosition;
        this.histogram.histogramParams.xLabels = this.xLabels;
        this.histogram.histogramParams.xTicks = this.xTicks;
        this.histogram.histogramParams.yLabels = this.yLabels;
        this.histogram.histogramParams.yTicks = this.yTicks;
        this.histogram.histogramParams.shortYLabels = this.shortYLabels;
        this.histogram.histogramParams.swimLaneLabelsWidth = this.swimLaneLabelsWidth;
        this.histogram.histogramParams.swimlaneHeight = this.swimlaneHeight;
        this.histogram.histogramParams.swimlaneBorderRadius = this.swimlaneBorderRadius;
        this.histogram.histogramParams.swimlaneMode = this.swimlaneMode;
        this.histogram.histogramParams.swimlaneOptions = this.swimlaneOptions;
        this.histogram.histogramParams.swimlaneRepresentation = this.swimlaneRepresentation !== undefined ?
            this.swimlaneRepresentation : SwimlaneRepresentation.global;
        this.histogram.histogramParams.uid = HistogramUtils.generateUID();
        this.histogram.histogramParams.id = this.id;
        this.histogram.histogramParams.histogramContainer = this.el.nativeElement.childNodes[0];
        this.histogram.histogramParams.svgNode = this.el.nativeElement.childNodes[0].querySelector('svg');
        this.histogram.histogramParams.displayOnlyIntervalsWithData = this.displayOnlyIntervalsWithData;
        this.histogram.histogramParams.yAxisFromZero = this.yAxisStartsFromZero;
        this.histogram.histogramParams.showStripes = this.showStripes;
        this.histogram.histogramParams.moveDataByHalfInterval = this.applyOffsetOnAreaChart;
        this.histogram.histogramParams.selectedSwimlanes = this.selectedSwimlanes;
        this.histogram.histogramParams.selectedSwimlanesEvent = this.selectedSwimlanesEvent;
        this.histogram.histogramParams.colorGenerator = this.colorService;
        this.histogram.histogramParams.mainChartId = this.mainChartId;
        this.histogram.histogramParams.tooltipEvent
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(t => {
            t.title = this.chartTitle;
            t.xLabel = this.chartXLabel;
            t.yLabel = this.chartYLabel;
            t.xUnit = this.xUnit;
            t.yUnit = this.yUnit;
            this.tooltipEvent.next(t);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: HistogramComponent, deps: [{ token: i1.ArlasColorService }, { token: i0.ElementRef }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: HistogramComponent, selector: "arlas-histogram", inputs: { data: "data", mainChartId: "mainChartId", dataType: "dataType", dataUnit: "dataUnit", xUnit: "xUnit", yUnit: "yUnit", valuesDateFormat: "valuesDateFormat", isHistogramSelectable: "isHistogramSelectable", multiselectable: "multiselectable", intervalSelection: "intervalSelection", intervalListSelection: "intervalListSelection", topOffsetRemoveInterval: "topOffsetRemoveInterval", leftOffsetRemoveInterval: "leftOffsetRemoveInterval", brushHandlesHeightWeight: "brushHandlesHeightWeight", handlesRadius: "handlesRadius", selectionType: "selectionType", chartType: "chartType", chartTitle: "chartTitle", chartXLabel: "chartXLabel", chartYLabel: "chartYLabel", chartWidth: "chartWidth", chartHeight: "chartHeight", customizedCssClass: "customizedCssClass", yAxisStartsFromZero: "yAxisStartsFromZero", showStripes: "showStripes", xAxisPosition: "xAxisPosition", descriptionPosition: "descriptionPosition", xTicks: "xTicks", yTicks: "yTicks", xLabels: "xLabels", yLabels: "yLabels", shortYLabels: "shortYLabels", showXTicks: "showXTicks", showYTicks: "showYTicks", showXLabels: "showXLabels", showYLabels: "showYLabels", showHorizontalLines: "showHorizontalLines", ticksDateFormat: "ticksDateFormat", isSmoothedCurve: "isSmoothedCurve", barWeight: "barWeight", paletteColors: "paletteColors", displayOnlyIntervalsWithData: "displayOnlyIntervalsWithData", applyOffsetOnAreaChart: "applyOffsetOnAreaChart", swimlaneMode: "swimlaneMode", swimlaneRepresentation: "swimlaneRepresentation", swimlaneOptions: "swimlaneOptions", swimLaneLabelsWidth: "swimLaneLabelsWidth", swimlaneBorderRadius: "swimlaneBorderRadius", swimlaneHeight: "swimlaneHeight", id: "id", selectedSwimlanes: "selectedSwimlanes", useUtc: "useUtc" }, outputs: { selectedSwimlanesEvent: "selectedSwimlanesEvent", valuesListChangedEvent: "valuesListChangedEvent", hoveredBucketEvent: "hoveredBucketEvent", dataPlottedEvent: "dataPlottedEvent", tooltipEvent: "tooltipEvent" }, viewQueries: [{ propertyName: "lt", first: true, predicate: ["left"], descendants: true, read: ElementRef }, { propertyName: "rt", first: true, predicate: ["right"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"histogram\" [ngClass]=\"customizedCssClass\">\n  <div *ngIf=\"descriptionPosition === Position.top\" class=\"histogram__description\" [style.width.px]=\"histogram?.histogramParams.chartWidth-histogram?.histogramParams.margin.left-histogram?.histogramParams.margin.right\"\n    [style.margin-left.px]=\"histogram?.histogramParams.margin.left\" [style.margin-right.px]=\"histogram?.histogramParams.margin.right\">\n    <div class=\"histogram__description--display\">\n      <div class=\"histogram__description__startvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__startvalue--background\">{{histogram?.histogramParams.startValue}}</span>\n      </div>\n      <div class=\"histogram__description__title\">\n        <span *ngIf=\"histogram?.histogramParams.showTitle\">{{histogram?.histogramParams.chartTitle}}</span>\n      </div>\n      <div class=\"histogram__description__endvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__endvalue--background\">{{histogram?.histogramParams.endValue}}</span>\n      </div>\n    </div>\n  </div>\n  <div [style.display]=\"histogram?.histogramParams.displaySvg\" style=\"position:relative\">\n    <svg id=\"svgix\" class=\"histogram__chart\" [style.width.px]=\"histogram?.histogramParams.chartWidth\" [style.height.px]=\"histogram?.histogramParams.chartHeight\"></svg>\n    <div *ngIf=\"chart?.brush?.isBrushing\">\n      <div #left [style.visibility]=\"histogram?.brushCornerTooltips.horizontalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__horizontal--left\"\n        [style.left.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.yPosition\">\n        {{histogram?.brushCornerTooltips.leftCornerTooltip.content}}\n      </div>\n      <div #right [style.visibility]=\"histogram?.brushCornerTooltips.horizontalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__horizontal--right\"\n        [style.right.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.yPosition\">\n        {{histogram?.brushCornerTooltips.rightCornerTooltip.content}}\n      </div>\n\n      <div #leftvertical [style.visibility]=\"histogram?.brushCornerTooltips.verticalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__vertical--left__rotation histogram__brush-tooltip__vertical--left\"\n        [style.left.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.yPosition\" [style.width.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.width\">\n        {{histogram?.brushCornerTooltips.leftCornerTooltip.content}}\n      </div>\n      <div #rightvertical [style.visibility]=\"histogram?.brushCornerTooltips.verticalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__vertical--right__rotation histogram__brush-tooltip__vertical--right\"\n        [style.left.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.yPosition\" [style.width.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.width\">\n        {{histogram?.brushCornerTooltips.rightCornerTooltip.content}}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"histogram?.histogramParams.dataLength === 1\" class=\"histogram__no-chart\" [style.width.px]=\"histogram?.histogramParams.chartWidth\" [style.height.px]=\"histogram?.histogramParams.chartHeight\">\n    <span class=\"histogram__no-chart__key\">{{chartXLabel | translate}} {{data[0].key | histogramKey : histogram?.histogramParams }} {{xUnit | translate}}</span>\n    <div *ngFor=\"let d of data\">\n      <span class=\"histogram__no-chart__value\">{{histogram?.histogramParams.chartTitle | translate}} {{d.value}}  {{ ((yUnit && yUnit.length > 0) ? yUnit : d.chartId | getCollectionUnit) | translate }}</span>\n    </div>\n  </div>\n  <div *ngIf=\"descriptionPosition === Position.bottom\" class=\"histogram__description\" [style.width.px]=\"histogram?.histogramParams.chartWidth-histogram?.histogramParams.margin.left-histogram?.histogramParams.margin.right\"\n    [style.margin-left.px]=\"histogram?.histogramParams.margin.left\" [style.margin-right.px]=\"histogram?.histogramParams.margin.right\">\n    <div class=\"histogram__description--display\">\n      <div class=\"histogram__description__startvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__startvalue--background\">{{histogram?.histogramParams.startValue}}</span>\n      </div>\n      <div class=\"histogram__description__title\">\n        <span *ngIf=\"histogram?.histogramParams.showTitle\">{{histogram?.histogramParams.chartTitle}}</span>\n      </div>\n      <div class=\"histogram__description__endvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__endvalue--background\">{{histogram?.histogramParams.endValue}}</span>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"chartType === ChartType.swimlane\">\n    <div class=\"histogram__tooltip\" *ngIf=\"histogram?.histogramParams.swimlaneXTooltip.isShown && !histogram?.histogramParams.swimlaneXTooltip.isRightSide\"\n      [style.left.px]=\"histogram?.histogramParams.swimlaneXTooltip.xPosition\"   [style.bottom.px]=\"30\">\n      <span class=\"histogram__swimlane--tooltip-xcontent\">{{histogram?.histogramParams.swimlaneXTooltip.xContent}}</span>\n    </div>\n    <div class=\"histogram__tooltip\" *ngIf=\"histogram?.histogramParams.swimlaneXTooltip.isShown && histogram?.histogramParams.swimlaneXTooltip.isRightSide\"\n      [style.right.px]=\"histogram?.histogramParams.swimlaneXTooltip.xPosition\"   [style.bottom.px]=\"30\">\n      <span class=\"histogram__swimlane--tooltip-xcontent\">{{histogram?.histogramParams.swimlaneXTooltip.xContent}}</span>\n    </div>\n    <div *ngFor=\"let tooltip of histogram?.histogramParams.swimlaneTooltipsMap | keyvalue\">\n      <div class=\"histogram__tooltip\" *ngIf=\"tooltip.value.isShown && !tooltip.value.isRightSide && tooltip.value.yContent\"\n        [style.left.px]=\"tooltip.value.xPosition\" [style.top.px]=\"tooltip.value.yPosition\">\n        <span class=\"histogram__swimlane--tooltip-content\">{{tooltip.value.yContent}}</span>\n        <span class=\"histogram__swimlane--tooltip-additional_info\">{{tooltip.value.yAdditonalInfo}}</span>\n      </div>\n      <div class=\"histogram__tooltip\" *ngIf=\"tooltip.value.isShown && tooltip.value.isRightSide && tooltip.value.yContent\"\n        [style.right.px]=\"tooltip.value.xPosition\"  [style.top.px]=\"tooltip.value.yPosition\">\n        <span class=\"histogram__swimlane--tooltip-content\">{{tooltip.value.yContent}}</span>\n        <span class=\"histogram__swimlane--tooltip-additional_info\">{{tooltip.value.yAdditonalInfo}}</span>\n      </div>\n    </div>\n  </div>\n\n  <div *ngFor=\"let id of histogram?.histogramParams.selectionListIntervalId\" class=\"histogram__remove\" (click)=\"removeSelectInterval(id)\" [style.top.px]=\"histogram?.histogramParams.topOffsetRemoveInterval\"\n    [style.left.px]=\"histogram?.histogramParams.intervalSelectedMap.get(id)?.x_position\" matTooltip=\"{{'Remove this selection' | translate}}\" matTooltipPosition=\"above\">\n    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 24 24\"\n      width=\"24\" xmlns=\"http://www.w3.org/2000/svg\" transform=\"rotate(45)\">\n      <path  d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\" />\n      <path fill=\"#555\" d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\n    </svg>\n  </div>\n  <div *ngIf=\"chartType === ChartType.swimlane\">\n    <div>\n      <div class=\"swimlane_legend\">\n        <div [style.width.px]=\"histogram?.histogramParams.chartWidth * 0.3 / 10\" class=\"swimlane_legend_color\" *ngFor=\"let b of histogram?.histogramParams.legend\" [style.background-color]=\"b.color\"></div>\n      </div>\n      <div class=\"swimlane_legend\">\n        <div [style.width.px]=\"histogram?.histogramParams.chartWidth * 0.3 / 10\" class=\"swimlane_legend_value\" *ngFor=\"let b of histogram?.histogramParams.legend; index as i\" >{{b.key}}</div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.histogram{background:#00f0;width:100%;height:100%;position:relative}.histogram text{font-size:.8em;fill-opacity:1}.histogram__description{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.9em;line-height:1.3;color:#555;opacity:1;z-index:10000}.histogram__description--display{display:flex}.histogram__description__title{font-family:Roboto,Helvetica Neue,sans-serif;font-size:1em;flex:1 1 100%;max-width:40%;color:#555;opacity:1;text-align:center;z-index:8000}.histogram__description__startvalue{flex:1 1 100%;max-width:30%}.histogram__description__endvalue{flex:1 1 100%;max-width:30%;text-align:right}.histogram__ticks,.histogram__axis{stroke:#757575;stroke-width:1px}.tick text{fill:#757575;font-size:.9em}.histogram__no-chart__key,.histogram__no-chart__value{display:block;text-align:center;padding:1px}.histogram__tooltip{position:absolute;text-align:left;padding:4px;font:12px sans-serif;background:#fff;border:0px;border-radius:1px;pointer-events:none;color:#555;z-index:20000;min-width:100px;box-shadow:0 2px 2px -1px #0003,0 2px 2px #00000024,0 1px 3px #0000001f}.selected_bars_zone{fill:#b7b7b7;fill-opacity:.1}.histogram__brush-tooltip{font:.7em sans-serif;text-align:center;position:absolute;padding:2px;background:#fff;pointer-events:none;color:#000;z-index:20000}.histogram__brush-tooltip__horizontal--left,.histogram__brush-tooltip__horizontal--right,.histogram__brush-tooltip__vertical--left,.histogram__brush-tooltip__vertical--right{background-color:#fff;border-radius:2px}.histogram__brush-tooltip__vertical--left__rotation{transform:rotate(-90deg) translateY(-100%);transform-origin:top right}.histogram__brush-tooltip__vertical--right__rotation{transform:rotate(90deg) translateY(-100%);transform-origin:top left}.histogram__remove{position:absolute;text-align:left;padding:2px;font:12px sans-serif;border:0px;border-radius:2px;color:#043b53;z-index:20000;cursor:pointer}.histogram__tooltip-xcontent-wrapper{display:flex;flex-direction:row;justify-content:space-between;border-bottom:.4px solid #b7b7b7;padding-bottom:5px;color:#222}.histogram__tooltip-ycontent-wrapper{display:flex;flex-direction:row;justify-content:space-between;padding-top:5px;color:#555}.histogram__tooltip-content{display:block}.histogram__tooltip-xcontent{font-size:1.1em}.histogram__tooltip-xlabel{font-size:1.1em;font-weight:700;padding-right:5px}.histogram__tooltip-ylabel{font-weight:700;padding-right:5px}.histogram__ticks-axis text{display:none}.histogram__horizontal-axis__text{display:none}.histogram__horizontal-axis__line{stroke-opacity:.5;stroke-width:.3px;stroke-dasharray:5}.histogram__horizontal-axis{stroke-opacity:0}.histogram__only-axis text{display:none}.histogram__ticks-axis line{stroke:#b3b1b1}.histogram__line-separator text{display:none}.histogram__line-separator .domain{stroke:#b3b1b1}.histogram__ticks-axis__hidden{display:none}.histogram__labels-axis .domain{stroke-opacity:0}.histogram__labels-axis__hidden{display:none}.histogram__only-axis .line,.histogram__only-axis-right .line{stroke:#bdbdbd;stroke-width:1px}.brush .selection{opacity:.1}.slider-brush .selection{opacity:0}.histogram__brush--handles{stroke:#868686;fill:#868686;opacity:1;z-index:30000}.histogram__area_circle{fill:#7fa5a1;stroke:#7fa5a1}.histogram__tooltip_cursor_rect{fill:#bbb;stroke:#bbb;opacity:.5}.histogram__tooltip_cursor_line{fill:#bbb;stroke:#bbb}.swimlane_legend_color,.swimlane_legend_value{display:inline-block;font-size:.7em}.swimlane_legend_color{height:8px}.swimlane_legend{display:flex;justify-content:center}.histogram__chart--fixed-selected--area,.histogram__chart--current-selected--area{fill:#88c9c3;fill-opacity:1}.histogram__chart--unselected--area{fill:#b7b7b7;fill-opacity:.7}.histogram__chart--fixed-selected--curve{fill:none;stroke:#88c9c3}.histogram__chart--fixed-selected--curve--without_color{fill:none}.histogram__chart--current-selected--curve{fill:none;stroke:#88c9c3}.histogram__chart--current-selected--curve--without_color{fill:none}.histogram__chart--unselected--curve{fill:none;stroke:#a5a5a5;stroke-width:.8px}.histogram__ticks-axis-right text{display:none}.stroke_canceller{stroke:unset}.histogram__chart--bar__fullyselected,.histogram__chart--bar__currentselection,.histogram__chart--bar__partlyselected{fill:#fff;stroke:#a5a5a5;stroke-width:.4px}.histogram__chart--bar{fill:#fff;stroke:#b7b7b7;stroke-width:.4px}.histogram__swimlane--vertical-tooltip-line{stroke-width:1px;stroke:#252525;fill:none}.headband_currentselection{fill:#88c9c3!important;stroke:#88c9c3!important;stroke-width:.4px!important;height:1.5px!important}.headband_currentselection_min,.headband_currentselection_max{fill:#e62938!important;stroke:#e62938!important;stroke-width:.4px!important;height:1.5px!important}.headband_partlyselected,.headband_fullyselected{fill:#88c9c3!important;stroke:#88c9c3!important;stroke-width:.4px!important;height:1.5px!important}.headband_notselected{fill:#fff!important;stroke:#b7b7b7!important;stroke-width:0!important;height:0!important}.swimlane-label-unselected{fill:gray}.swimlane-label-selected{fill:#ff4081}.swimlane-label-neutral{fill:#000}.swimlane-label-container-hovered{fill:#efefef}.selection{opacity:.6}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "pipe", type: i3.KeyValuePipe, name: "keyvalue" }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }, { kind: "pipe", type: i5.GetCollectionUnitPipe, name: "getCollectionUnit" }, { kind: "pipe", type: i6.HistogramKeyPipe, name: "histogramKey" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: HistogramComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-histogram', encapsulation: ViewEncapsulation.None, template: "<div id=\"{{id}}\" class=\"histogram\" [ngClass]=\"customizedCssClass\">\n  <div *ngIf=\"descriptionPosition === Position.top\" class=\"histogram__description\" [style.width.px]=\"histogram?.histogramParams.chartWidth-histogram?.histogramParams.margin.left-histogram?.histogramParams.margin.right\"\n    [style.margin-left.px]=\"histogram?.histogramParams.margin.left\" [style.margin-right.px]=\"histogram?.histogramParams.margin.right\">\n    <div class=\"histogram__description--display\">\n      <div class=\"histogram__description__startvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__startvalue--background\">{{histogram?.histogramParams.startValue}}</span>\n      </div>\n      <div class=\"histogram__description__title\">\n        <span *ngIf=\"histogram?.histogramParams.showTitle\">{{histogram?.histogramParams.chartTitle}}</span>\n      </div>\n      <div class=\"histogram__description__endvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__endvalue--background\">{{histogram?.histogramParams.endValue}}</span>\n      </div>\n    </div>\n  </div>\n  <div [style.display]=\"histogram?.histogramParams.displaySvg\" style=\"position:relative\">\n    <svg id=\"svgix\" class=\"histogram__chart\" [style.width.px]=\"histogram?.histogramParams.chartWidth\" [style.height.px]=\"histogram?.histogramParams.chartHeight\"></svg>\n    <div *ngIf=\"chart?.brush?.isBrushing\">\n      <div #left [style.visibility]=\"histogram?.brushCornerTooltips.horizontalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__horizontal--left\"\n        [style.left.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.yPosition\">\n        {{histogram?.brushCornerTooltips.leftCornerTooltip.content}}\n      </div>\n      <div #right [style.visibility]=\"histogram?.brushCornerTooltips.horizontalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__horizontal--right\"\n        [style.right.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.yPosition\">\n        {{histogram?.brushCornerTooltips.rightCornerTooltip.content}}\n      </div>\n\n      <div #leftvertical [style.visibility]=\"histogram?.brushCornerTooltips.verticalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__vertical--left__rotation histogram__brush-tooltip__vertical--left\"\n        [style.left.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.yPosition\" [style.width.px]=\"histogram?.brushCornerTooltips.leftCornerTooltip.width\">\n        {{histogram?.brushCornerTooltips.leftCornerTooltip.content}}\n      </div>\n      <div #rightvertical [style.visibility]=\"histogram?.brushCornerTooltips.verticalCssVisibility\" class=\"histogram__brush-tooltip histogram__brush-tooltip__vertical--right__rotation histogram__brush-tooltip__vertical--right\"\n        [style.left.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.xPosition\"   [style.top.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.yPosition\" [style.width.px]=\"histogram?.brushCornerTooltips.rightCornerTooltip.width\">\n        {{histogram?.brushCornerTooltips.rightCornerTooltip.content}}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"histogram?.histogramParams.dataLength === 1\" class=\"histogram__no-chart\" [style.width.px]=\"histogram?.histogramParams.chartWidth\" [style.height.px]=\"histogram?.histogramParams.chartHeight\">\n    <span class=\"histogram__no-chart__key\">{{chartXLabel | translate}} {{data[0].key | histogramKey : histogram?.histogramParams }} {{xUnit | translate}}</span>\n    <div *ngFor=\"let d of data\">\n      <span class=\"histogram__no-chart__value\">{{histogram?.histogramParams.chartTitle | translate}} {{d.value}}  {{ ((yUnit && yUnit.length > 0) ? yUnit : d.chartId | getCollectionUnit) | translate }}</span>\n    </div>\n  </div>\n  <div *ngIf=\"descriptionPosition === Position.bottom\" class=\"histogram__description\" [style.width.px]=\"histogram?.histogramParams.chartWidth-histogram?.histogramParams.margin.left-histogram?.histogramParams.margin.right\"\n    [style.margin-left.px]=\"histogram?.histogramParams.margin.left\" [style.margin-right.px]=\"histogram?.histogramParams.margin.right\">\n    <div class=\"histogram__description--display\">\n      <div class=\"histogram__description__startvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__startvalue--background\">{{histogram?.histogramParams.startValue}}</span>\n      </div>\n      <div class=\"histogram__description__title\">\n        <span *ngIf=\"histogram?.histogramParams.showTitle\">{{histogram?.histogramParams.chartTitle}}</span>\n      </div>\n      <div class=\"histogram__description__endvalue\">\n        <span *ngIf=\"histogram?.histogramParams.dataLength > 1\" class=\"histogram__description__endvalue--background\">{{histogram?.histogramParams.endValue}}</span>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"chartType === ChartType.swimlane\">\n    <div class=\"histogram__tooltip\" *ngIf=\"histogram?.histogramParams.swimlaneXTooltip.isShown && !histogram?.histogramParams.swimlaneXTooltip.isRightSide\"\n      [style.left.px]=\"histogram?.histogramParams.swimlaneXTooltip.xPosition\"   [style.bottom.px]=\"30\">\n      <span class=\"histogram__swimlane--tooltip-xcontent\">{{histogram?.histogramParams.swimlaneXTooltip.xContent}}</span>\n    </div>\n    <div class=\"histogram__tooltip\" *ngIf=\"histogram?.histogramParams.swimlaneXTooltip.isShown && histogram?.histogramParams.swimlaneXTooltip.isRightSide\"\n      [style.right.px]=\"histogram?.histogramParams.swimlaneXTooltip.xPosition\"   [style.bottom.px]=\"30\">\n      <span class=\"histogram__swimlane--tooltip-xcontent\">{{histogram?.histogramParams.swimlaneXTooltip.xContent}}</span>\n    </div>\n    <div *ngFor=\"let tooltip of histogram?.histogramParams.swimlaneTooltipsMap | keyvalue\">\n      <div class=\"histogram__tooltip\" *ngIf=\"tooltip.value.isShown && !tooltip.value.isRightSide && tooltip.value.yContent\"\n        [style.left.px]=\"tooltip.value.xPosition\" [style.top.px]=\"tooltip.value.yPosition\">\n        <span class=\"histogram__swimlane--tooltip-content\">{{tooltip.value.yContent}}</span>\n        <span class=\"histogram__swimlane--tooltip-additional_info\">{{tooltip.value.yAdditonalInfo}}</span>\n      </div>\n      <div class=\"histogram__tooltip\" *ngIf=\"tooltip.value.isShown && tooltip.value.isRightSide && tooltip.value.yContent\"\n        [style.right.px]=\"tooltip.value.xPosition\"  [style.top.px]=\"tooltip.value.yPosition\">\n        <span class=\"histogram__swimlane--tooltip-content\">{{tooltip.value.yContent}}</span>\n        <span class=\"histogram__swimlane--tooltip-additional_info\">{{tooltip.value.yAdditonalInfo}}</span>\n      </div>\n    </div>\n  </div>\n\n  <div *ngFor=\"let id of histogram?.histogramParams.selectionListIntervalId\" class=\"histogram__remove\" (click)=\"removeSelectInterval(id)\" [style.top.px]=\"histogram?.histogramParams.topOffsetRemoveInterval\"\n    [style.left.px]=\"histogram?.histogramParams.intervalSelectedMap.get(id)?.x_position\" matTooltip=\"{{'Remove this selection' | translate}}\" matTooltipPosition=\"above\">\n    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 24 24\"\n      width=\"24\" xmlns=\"http://www.w3.org/2000/svg\" transform=\"rotate(45)\">\n      <path  d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\" />\n      <path fill=\"#555\" d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\n    </svg>\n  </div>\n  <div *ngIf=\"chartType === ChartType.swimlane\">\n    <div>\n      <div class=\"swimlane_legend\">\n        <div [style.width.px]=\"histogram?.histogramParams.chartWidth * 0.3 / 10\" class=\"swimlane_legend_color\" *ngFor=\"let b of histogram?.histogramParams.legend\" [style.background-color]=\"b.color\"></div>\n      </div>\n      <div class=\"swimlane_legend\">\n        <div [style.width.px]=\"histogram?.histogramParams.chartWidth * 0.3 / 10\" class=\"swimlane_legend_value\" *ngFor=\"let b of histogram?.histogramParams.legend; index as i\" >{{b.key}}</div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.histogram{background:#00f0;width:100%;height:100%;position:relative}.histogram text{font-size:.8em;fill-opacity:1}.histogram__description{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.9em;line-height:1.3;color:#555;opacity:1;z-index:10000}.histogram__description--display{display:flex}.histogram__description__title{font-family:Roboto,Helvetica Neue,sans-serif;font-size:1em;flex:1 1 100%;max-width:40%;color:#555;opacity:1;text-align:center;z-index:8000}.histogram__description__startvalue{flex:1 1 100%;max-width:30%}.histogram__description__endvalue{flex:1 1 100%;max-width:30%;text-align:right}.histogram__ticks,.histogram__axis{stroke:#757575;stroke-width:1px}.tick text{fill:#757575;font-size:.9em}.histogram__no-chart__key,.histogram__no-chart__value{display:block;text-align:center;padding:1px}.histogram__tooltip{position:absolute;text-align:left;padding:4px;font:12px sans-serif;background:#fff;border:0px;border-radius:1px;pointer-events:none;color:#555;z-index:20000;min-width:100px;box-shadow:0 2px 2px -1px #0003,0 2px 2px #00000024,0 1px 3px #0000001f}.selected_bars_zone{fill:#b7b7b7;fill-opacity:.1}.histogram__brush-tooltip{font:.7em sans-serif;text-align:center;position:absolute;padding:2px;background:#fff;pointer-events:none;color:#000;z-index:20000}.histogram__brush-tooltip__horizontal--left,.histogram__brush-tooltip__horizontal--right,.histogram__brush-tooltip__vertical--left,.histogram__brush-tooltip__vertical--right{background-color:#fff;border-radius:2px}.histogram__brush-tooltip__vertical--left__rotation{transform:rotate(-90deg) translateY(-100%);transform-origin:top right}.histogram__brush-tooltip__vertical--right__rotation{transform:rotate(90deg) translateY(-100%);transform-origin:top left}.histogram__remove{position:absolute;text-align:left;padding:2px;font:12px sans-serif;border:0px;border-radius:2px;color:#043b53;z-index:20000;cursor:pointer}.histogram__tooltip-xcontent-wrapper{display:flex;flex-direction:row;justify-content:space-between;border-bottom:.4px solid #b7b7b7;padding-bottom:5px;color:#222}.histogram__tooltip-ycontent-wrapper{display:flex;flex-direction:row;justify-content:space-between;padding-top:5px;color:#555}.histogram__tooltip-content{display:block}.histogram__tooltip-xcontent{font-size:1.1em}.histogram__tooltip-xlabel{font-size:1.1em;font-weight:700;padding-right:5px}.histogram__tooltip-ylabel{font-weight:700;padding-right:5px}.histogram__ticks-axis text{display:none}.histogram__horizontal-axis__text{display:none}.histogram__horizontal-axis__line{stroke-opacity:.5;stroke-width:.3px;stroke-dasharray:5}.histogram__horizontal-axis{stroke-opacity:0}.histogram__only-axis text{display:none}.histogram__ticks-axis line{stroke:#b3b1b1}.histogram__line-separator text{display:none}.histogram__line-separator .domain{stroke:#b3b1b1}.histogram__ticks-axis__hidden{display:none}.histogram__labels-axis .domain{stroke-opacity:0}.histogram__labels-axis__hidden{display:none}.histogram__only-axis .line,.histogram__only-axis-right .line{stroke:#bdbdbd;stroke-width:1px}.brush .selection{opacity:.1}.slider-brush .selection{opacity:0}.histogram__brush--handles{stroke:#868686;fill:#868686;opacity:1;z-index:30000}.histogram__area_circle{fill:#7fa5a1;stroke:#7fa5a1}.histogram__tooltip_cursor_rect{fill:#bbb;stroke:#bbb;opacity:.5}.histogram__tooltip_cursor_line{fill:#bbb;stroke:#bbb}.swimlane_legend_color,.swimlane_legend_value{display:inline-block;font-size:.7em}.swimlane_legend_color{height:8px}.swimlane_legend{display:flex;justify-content:center}.histogram__chart--fixed-selected--area,.histogram__chart--current-selected--area{fill:#88c9c3;fill-opacity:1}.histogram__chart--unselected--area{fill:#b7b7b7;fill-opacity:.7}.histogram__chart--fixed-selected--curve{fill:none;stroke:#88c9c3}.histogram__chart--fixed-selected--curve--without_color{fill:none}.histogram__chart--current-selected--curve{fill:none;stroke:#88c9c3}.histogram__chart--current-selected--curve--without_color{fill:none}.histogram__chart--unselected--curve{fill:none;stroke:#a5a5a5;stroke-width:.8px}.histogram__ticks-axis-right text{display:none}.stroke_canceller{stroke:unset}.histogram__chart--bar__fullyselected,.histogram__chart--bar__currentselection,.histogram__chart--bar__partlyselected{fill:#fff;stroke:#a5a5a5;stroke-width:.4px}.histogram__chart--bar{fill:#fff;stroke:#b7b7b7;stroke-width:.4px}.histogram__swimlane--vertical-tooltip-line{stroke-width:1px;stroke:#252525;fill:none}.headband_currentselection{fill:#88c9c3!important;stroke:#88c9c3!important;stroke-width:.4px!important;height:1.5px!important}.headband_currentselection_min,.headband_currentselection_max{fill:#e62938!important;stroke:#e62938!important;stroke-width:.4px!important;height:1.5px!important}.headband_partlyselected,.headband_fullyselected{fill:#88c9c3!important;stroke:#88c9c3!important;stroke-width:.4px!important;height:1.5px!important}.headband_notselected{fill:#fff!important;stroke:#b7b7b7!important;stroke-width:0!important;height:0!important}.swimlane-label-unselected{fill:gray}.swimlane-label-selected{fill:#ff4081}.swimlane-label-neutral{fill:#000}.swimlane-label-container-hovered{fill:#efefef}.selection{opacity:.6}\n"] }]
        }], ctorParameters: () => [{ type: i1.ArlasColorService }, { type: i0.ElementRef }, { type: i2.TranslateService }], propDecorators: { lt: [{
                type: ViewChild,
                args: ['left', { read: ElementRef, static: false }]
            }], rt: [{
                type: ViewChild,
                args: ['right', { read: ElementRef, static: false }]
            }], data: [{
                type: Input
            }], mainChartId: [{
                type: Input
            }], dataType: [{
                type: Input
            }], dataUnit: [{
                type: Input
            }], xUnit: [{
                type: Input
            }], yUnit: [{
                type: Input
            }], valuesDateFormat: [{
                type: Input
            }], isHistogramSelectable: [{
                type: Input
            }], multiselectable: [{
                type: Input
            }], intervalSelection: [{
                type: Input
            }], intervalListSelection: [{
                type: Input
            }], topOffsetRemoveInterval: [{
                type: Input
            }], leftOffsetRemoveInterval: [{
                type: Input
            }], brushHandlesHeightWeight: [{
                type: Input
            }], handlesRadius: [{
                type: Input
            }], selectionType: [{
                type: Input
            }], chartType: [{
                type: Input
            }], chartTitle: [{
                type: Input
            }], chartXLabel: [{
                type: Input
            }], chartYLabel: [{
                type: Input
            }], chartWidth: [{
                type: Input
            }], chartHeight: [{
                type: Input
            }], customizedCssClass: [{
                type: Input
            }], yAxisStartsFromZero: [{
                type: Input
            }], showStripes: [{
                type: Input
            }], xAxisPosition: [{
                type: Input
            }], descriptionPosition: [{
                type: Input
            }], xTicks: [{
                type: Input
            }], yTicks: [{
                type: Input
            }], xLabels: [{
                type: Input
            }], yLabels: [{
                type: Input
            }], shortYLabels: [{
                type: Input
            }], showXTicks: [{
                type: Input
            }], showYTicks: [{
                type: Input
            }], showXLabels: [{
                type: Input
            }], showYLabels: [{
                type: Input
            }], showHorizontalLines: [{
                type: Input
            }], ticksDateFormat: [{
                type: Input
            }], isSmoothedCurve: [{
                type: Input
            }], barWeight: [{
                type: Input
            }], paletteColors: [{
                type: Input
            }], displayOnlyIntervalsWithData: [{
                type: Input
            }], applyOffsetOnAreaChart: [{
                type: Input
            }], swimlaneMode: [{
                type: Input
            }], swimlaneRepresentation: [{
                type: Input
            }], swimlaneOptions: [{
                type: Input
            }], swimLaneLabelsWidth: [{
                type: Input
            }], swimlaneBorderRadius: [{
                type: Input
            }], swimlaneHeight: [{
                type: Input
            }], id: [{
                type: Input
            }], selectedSwimlanes: [{
                type: Input
            }], useUtc: [{
                type: Input
            }], selectedSwimlanesEvent: [{
                type: Output
            }], valuesListChangedEvent: [{
                type: Output
            }], hoveredBucketEvent: [{
                type: Output
            }], dataPlottedEvent: [{
                type: Output
            }], tooltipEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,