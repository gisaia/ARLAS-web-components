/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Input, Output } from '@angular/core';
import { Item } from '../model/item';
import { ActionHandler } from '../utils/results.utils';
import { filter, Subject, take, takeUntil } from 'rxjs';
import { ResultlistNotifierService } from '../../../services/resultlist.notifier.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/resultlist.notifier.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/icon";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/tooltip";
import * as i6 from "@ngx-translate/core";
import * as i7 from "./result-actions.pipe";
/**
 * This component displays actions of an item.
 * - Actions are only displayed when we hover an item.
 * BUT
 * An action can be reversible. It means that this action has a reverse action.
 * - An example of reversible action:  Action => Add layer to map --///--  Reverse Action => Remove layer from map.
 * - When you click on a reversible action for the first time, the action become 'activated'.
 * - Activated actions should be displayed all the time on the resultlist (in list and grid view).
 * - When you click on an 'activated' action, the action is reversed and goes back to its initial state.
 * - Actions that are not activated are only displayed when we hover an item.
 * ALSO
 * When a reversible action has `fields` attribute. It means that this action needs the existence of the fields values in order to be executed.
 * - If one of the fields values is absent in the current item, the action will be hidden.
 */
export class ResultActionsComponent {
    constructor(notifier) {
        this.notifier = notifier;
        /** Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions. */
        this.activatedActionsPerItem = new Map();
        /** This data retriever allows to fetch the actions of each items + check if an action should be hidden. */
        this.detailedDataRetriever = null;
        /** Whether to stop propagation at click/hover of the action. */
        this.stopPropagation = false;
        /** Whether to display the actions as icon buttons or text buttons. */
        this.mode = 'icon';
        /** Emits an event when the action is clicked on it. */
        this.actionOnItemEvent = new Subject();
        /** Destroy subscriptions. */
        this._onDestroy$ = new Subject();
        /** When an Item is hovered: */
        this.notifier.itemHovered$.pipe(takeUntil(this._onDestroy$)).pipe(filter((i) => i.identifier === this.item.identifier)).subscribe({
            next: (i) => {
                /** Always show non reversible actions. */
                this.actions.filter(a => !ActionHandler.isReversible(a)).forEach(a => a.show = true);
                /** We check if reversible actions has 'fields'.
                 * - If one of the fields values is absent in the current item, the action will be hidden. */
                this.actions.filter(a => ActionHandler.isReversible(a) && a.fields && a.show === undefined).forEach(a => {
                    this.detailedDataRetriever.getValues(i.identifier, a.fields).pipe(take(1)).subscribe({
                        next: (values) => a.show = values.filter(v => !v).length === 0
                    });
                });
            }
        });
    }
    ngOnInit() {
        this.setItemActions(this.item);
    }
    ngOnChanges(changes) {
        if (changes.activatedActionsPerItem) {
            this.updateActions();
        }
    }
    /**
     * An action can be reversible. It means that this action has a reverse action.
     * - When you click on a reversible action for the first time, the action become 'activated'.
     * - Activated actions should be displayed all the time on the resultlist (in list and grid view).
     * - When you click on an 'activated' action, the action is reversed and goes back to its initial state.
     */
    triggerAction(event, action) {
        if (this.stopPropagation) {
            event.stopPropagation();
        }
        this.actionOnItemEvent.next(action);
        /** activate */
        if (ActionHandler.isReversible(action) && !action.activated) {
            ActionHandler.activate(action);
        }
        else if (ActionHandler.isReversible(action) && action.activated) {
            ActionHandler.reverse(action);
        }
        /** Retrigger the pipe ActionDisplayerPipe */
        this.actions = [...this.actions];
    }
    /**
     * An action can be reversible. It means that this action has a reverse action.
     * - When you click on a reversible action for the first time, the action become 'activated'.
     * - Activated actions should be displayed all the time on the resultlist (in list and grid view).
     * - When you click on an 'activated' action, the action is reversed and goes back to its initial state.
     */
    updateActions() {
        if (this.activatedActionsPerItem) {
            const actionIds = this.activatedActionsPerItem.get(this.item.identifier);
            if (!!actionIds && !!this.actions) {
                this.actions.filter(a => ActionHandler.isReversible(a)).forEach(a => {
                    if (actionIds.has(a.id)) {
                        ActionHandler.activate(a);
                        /** Always show activated actions. */
                        a.show = true;
                    }
                    else {
                        ActionHandler.reverse(a);
                    }
                });
                /** Retrigger ActionDisplayerPipe */
                this.actions = [...this.actions];
            }
        }
    }
    /**
     * @description set the list of actions of an item
     * @param item
     */
    setItemActions(item) {
        if (item && (!item.actions || (item.actions && item.actions.length === 0))) {
            item.actions = new Array();
            this.detailedDataRetriever.getActions(item).pipe(take(1)).subscribe(actions => {
                actions.forEach(action => {
                    item.actions.push({
                        id: action.id,
                        label: action.label,
                        actionBus: action.actionBus,
                        cssClass: action.cssClass,
                        tooltip: action.tooltip,
                        reverseAction: action.reverseAction,
                        icon: action.icon,
                        fields: action.fields,
                        show: action.show
                    });
                });
                this.actions = item.actions;
                this.updateActions();
            });
        }
        else if (item && item.actions && item.actions.length > 0) {
            this.actions = item.actions;
            this.updateActions();
        }
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultActionsComponent, deps: [{ token: i1.ResultlistNotifierService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: ResultActionsComponent, selector: "arlas-result-actions", inputs: { item: "item", width: "width", activatedActionsPerItem: "activatedActionsPerItem", detailedDataRetriever: "detailedDataRetriever", stopPropagation: "stopPropagation", mode: "mode" }, outputs: { actionOnItemEvent: "actionOnItemEvent" }, usesOnChanges: true, ngImport: i0, template: "<!-- This sections is for actions that we display as icon buttons -->\n<div [style.max-width.px]=\"width\" class=\"list_actions\" *ngIf=\"mode === 'icon'; else textActions\">\n    <ng-container *ngFor=\"let action of actions\">\n        <ng-container *ngIf=\"action?.show === true\">\n            <!-- The action is activated, which means it will always be displayed.-->\n            <ng-container *ngIf=\"action?.activated\">\n                <!-- The button icon is provided by css 'background-url' attribute.-->\n                <button *ngIf=\"!action?.icon else active_icon\" (click)=\"triggerAction($event, action)\"\n                    matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\"\n                    class=\"resultitem-list__actions {{action.id}}-onhover-action {{action.cssClass}}-onhover-action\">\n                    {{action | actionDisplayer:'label' | translate}}\n                </button>\n                <ng-template #active_icon>\n                    <!-- The icon is provided by the action itself.-->\n                    <mat-icon (click)=\"triggerAction($event, action)\" class=\"icon\"\n                        matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                        {{action | actionDisplayer:'icon'}}\n                    </mat-icon>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n    <ng-container *ngFor=\"let action of actions\">\n        <ng-container *ngIf=\"action?.show === true\">\n            <!-- The action is not activated, which means it will appear only when an item is hovered.-->\n            <ng-container *ngIf=\"!action?.activated\">\n                <button *ngIf=\"!action?.icon else not_active_icon\" (click)=\"triggerAction($event, action)\"\n                    class=\"not_activated\" matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\"\n                    class=\"resultitem-list__actions {{action.id}}-onhover-action {{action.cssClass}}-onhover-action\">\n                    {{action | actionDisplayer:'label' | translate}}\n                </button>\n                <ng-template #not_active_icon>\n                    <mat-icon (click)=\"triggerAction($event, action)\" class=\"icon not_activated\"\n                        matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                        {{action | actionDisplayer:'icon'}}\n                    </mat-icon>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n\n</div>\n<!-- This sections is for actions that we display as text buttons instead of icon buttons-->\n<ng-template #textActions>\n    <ng-container *ngFor=\"let action of actions\">\n        <ng-container *ngIf=\"action?.show === true\">\n            <button mat-raised-button *ngIf=\"!action?.activated else activeButton\" class=\"text-action {{action.id}}-action {{action.cssClass}}-action\"\n                (click)=\"triggerAction($event, action)\" matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                {{action | actionDisplayer:'label' | translate}}\n            </button>\n            <ng-template #activeButton>\n                <button mat-raised-button *ngIf=\"action?.activated\" (click)=\"triggerAction($event, action)\"\n                    class=\"resultdetaileditem__actions text-action {{action.id}}-action {{action.cssClass}}-action\" matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                    {{action | actionDisplayer:'label' | translate}}\n                </button>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n</ng-template>\n", styles: ["@charset \"UTF-8\";.resultitem-list__actions{min-width:0;border-radius:50%;border:none;padding:0;width:24px;height:24px;font-size:0;color:#fff;margin-left:5px;background-color:#fff;background-image:url(\"data:image/svg+xml,%3Csvg%20width%3D%2720%27%20height%3D%2720%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%3E%20%3Cg%3E%20%20%3Ctitle%3Ebackground%3C%2Ftitle%3E%20%20%3Crect%20fill%3D%27%23fff%27%20id%3D%27canvas_background%27%20height%3D%2722%27%20width%3D%2722%27%20y%3D%27-1%27%20x%3D%27-1%27%2F%3E%20%20%3Cg%20display%3D%27none%27%20overflow%3D%27visible%27%20y%3D%270%27%20x%3D%270%27%20height%3D%27100%25%27%20width%3D%27100%25%27%20id%3D%27canvasGrid%27%3E%20%20%20%3Crect%20fill%3D%27url(%23gridpattern)%27%20stroke-width%3D%270%27%20y%3D%270%27%20x%3D%270%27%20height%3D%27100%25%27%20width%3D%27100%25%27%2F%3E%20%20%3C%2Fg%3E%20%3C%2Fg%3E%20%3Cg%3E%20%20%3Ctitle%3ELayer%201%3C%2Ftitle%3E%20%20%3Cellipse%20stroke%3D%27%23000000%27%20ry%3D%275.779194%27%20rx%3D%275.5%27%20id%3D%27svg_1%27%20cy%3D%2710.000004%27%20cx%3D%2710%27%20stroke-width%3D%272.5%27%20fill%3D%27%23ffffff%27%2F%3E%20%3C%2Fg%3E%3C%2Fsvg%3E\");background-repeat:no-repeat;background-position:center;float:right;cursor:pointer}.resultitem-list__actions:active{border:1px solid white}.list_actions{display:flex;flex-direction:row-reverse;align-items:center;position:absolute;right:0;top:0;height:100%;width:max-content}.list_actions .not_activated{display:none}.list_actions .icon{margin-left:5px;float:right;width:24px;height:24px;font-size:20px;text-align:center;align-content:space-evenly;background-color:#fff;border-radius:50%;cursor:pointer}.list_active_actions{display:flex;flex-direction:row-reverse;align-items:center;position:absolute;right:35px;top:0;height:100%;width:max-content}.text-action{font-family:Roboto,Helvetica Neue,sans-serif;font-size:11px;margin:3px;padding:5px 10px;height:25px;line-height:0;cursor:pointer;color:#000;background-color:#fff;border:1.5px solid black;border-radius:2px}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i4.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "directive", type: i5.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }, { kind: "pipe", type: i7.ActionDisplayerPipe, name: "actionDisplayer" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-result-actions', template: "<!-- This sections is for actions that we display as icon buttons -->\n<div [style.max-width.px]=\"width\" class=\"list_actions\" *ngIf=\"mode === 'icon'; else textActions\">\n    <ng-container *ngFor=\"let action of actions\">\n        <ng-container *ngIf=\"action?.show === true\">\n            <!-- The action is activated, which means it will always be displayed.-->\n            <ng-container *ngIf=\"action?.activated\">\n                <!-- The button icon is provided by css 'background-url' attribute.-->\n                <button *ngIf=\"!action?.icon else active_icon\" (click)=\"triggerAction($event, action)\"\n                    matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\"\n                    class=\"resultitem-list__actions {{action.id}}-onhover-action {{action.cssClass}}-onhover-action\">\n                    {{action | actionDisplayer:'label' | translate}}\n                </button>\n                <ng-template #active_icon>\n                    <!-- The icon is provided by the action itself.-->\n                    <mat-icon (click)=\"triggerAction($event, action)\" class=\"icon\"\n                        matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                        {{action | actionDisplayer:'icon'}}\n                    </mat-icon>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n    <ng-container *ngFor=\"let action of actions\">\n        <ng-container *ngIf=\"action?.show === true\">\n            <!-- The action is not activated, which means it will appear only when an item is hovered.-->\n            <ng-container *ngIf=\"!action?.activated\">\n                <button *ngIf=\"!action?.icon else not_active_icon\" (click)=\"triggerAction($event, action)\"\n                    class=\"not_activated\" matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\"\n                    class=\"resultitem-list__actions {{action.id}}-onhover-action {{action.cssClass}}-onhover-action\">\n                    {{action | actionDisplayer:'label' | translate}}\n                </button>\n                <ng-template #not_active_icon>\n                    <mat-icon (click)=\"triggerAction($event, action)\" class=\"icon not_activated\"\n                        matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                        {{action | actionDisplayer:'icon'}}\n                    </mat-icon>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n\n</div>\n<!-- This sections is for actions that we display as text buttons instead of icon buttons-->\n<ng-template #textActions>\n    <ng-container *ngFor=\"let action of actions\">\n        <ng-container *ngIf=\"action?.show === true\">\n            <button mat-raised-button *ngIf=\"!action?.activated else activeButton\" class=\"text-action {{action.id}}-action {{action.cssClass}}-action\"\n                (click)=\"triggerAction($event, action)\" matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                {{action | actionDisplayer:'label' | translate}}\n            </button>\n            <ng-template #activeButton>\n                <button mat-raised-button *ngIf=\"action?.activated\" (click)=\"triggerAction($event, action)\"\n                    class=\"resultdetaileditem__actions text-action {{action.id}}-action {{action.cssClass}}-action\" matTooltip=\"{{action | actionDisplayer:'tooltip' |translate}}\">\n                    {{action | actionDisplayer:'label' | translate}}\n                </button>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n</ng-template>\n", styles: ["@charset \"UTF-8\";.resultitem-list__actions{min-width:0;border-radius:50%;border:none;padding:0;width:24px;height:24px;font-size:0;color:#fff;margin-left:5px;background-color:#fff;background-image:url(\"data:image/svg+xml,%3Csvg%20width%3D%2720%27%20height%3D%2720%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%3E%20%3Cg%3E%20%20%3Ctitle%3Ebackground%3C%2Ftitle%3E%20%20%3Crect%20fill%3D%27%23fff%27%20id%3D%27canvas_background%27%20height%3D%2722%27%20width%3D%2722%27%20y%3D%27-1%27%20x%3D%27-1%27%2F%3E%20%20%3Cg%20display%3D%27none%27%20overflow%3D%27visible%27%20y%3D%270%27%20x%3D%270%27%20height%3D%27100%25%27%20width%3D%27100%25%27%20id%3D%27canvasGrid%27%3E%20%20%20%3Crect%20fill%3D%27url(%23gridpattern)%27%20stroke-width%3D%270%27%20y%3D%270%27%20x%3D%270%27%20height%3D%27100%25%27%20width%3D%27100%25%27%2F%3E%20%20%3C%2Fg%3E%20%3C%2Fg%3E%20%3Cg%3E%20%20%3Ctitle%3ELayer%201%3C%2Ftitle%3E%20%20%3Cellipse%20stroke%3D%27%23000000%27%20ry%3D%275.779194%27%20rx%3D%275.5%27%20id%3D%27svg_1%27%20cy%3D%2710.000004%27%20cx%3D%2710%27%20stroke-width%3D%272.5%27%20fill%3D%27%23ffffff%27%2F%3E%20%3C%2Fg%3E%3C%2Fsvg%3E\");background-repeat:no-repeat;background-position:center;float:right;cursor:pointer}.resultitem-list__actions:active{border:1px solid white}.list_actions{display:flex;flex-direction:row-reverse;align-items:center;position:absolute;right:0;top:0;height:100%;width:max-content}.list_actions .not_activated{display:none}.list_actions .icon{margin-left:5px;float:right;width:24px;height:24px;font-size:20px;text-align:center;align-content:space-evenly;background-color:#fff;border-radius:50%;cursor:pointer}.list_active_actions{display:flex;flex-direction:row-reverse;align-items:center;position:absolute;right:35px;top:0;height:100%;width:max-content}.text-action{font-family:Roboto,Helvetica Neue,sans-serif;font-size:11px;margin:3px;padding:5px 10px;height:25px;line-height:0;cursor:pointer;color:#000;background-color:#fff;border:1.5px solid black;border-radius:2px}\n"] }]
        }], ctorParameters: () => [{ type: i1.ResultlistNotifierService }], propDecorators: { item: [{
                type: Input
            }], width: [{
                type: Input
            }], activatedActionsPerItem: [{
                type: Input
            }], detailedDataRetriever: [{
                type: Input
            }], stopPropagation: [{
                type: Input
            }], mode: [{
                type: Input
            }], actionOnItemEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,