/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatMenuModule } from '@angular/material/menu';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatTooltipModule } from '@angular/material/tooltip';
import { TranslateModule } from '@ngx-translate/core';
import { LazyLoadImageModule } from 'ng-lazyload-image';
import { NgxLoadingModule } from 'ngx-loading-reloaded';
import { ColorGeneratorModule } from '../../services/color.generator.module';
import { ResultDetailedGridComponent } from './result-detailed-grid/result-detailed-grid.component';
import { ResultDetailedItemComponent } from './result-detailed-item/result-detailed-item.component';
import { ResultScrollDirective } from './result-directive/result-scroll.directive';
import { ResultFilterComponent } from './result-filter/result-filter.component';
import { ResultGridTileComponent } from './result-grid-tile/result-grid-tile.component';
import { ResultItemComponent } from './result-item/result-item.component';
import { ResultListComponent } from './result-list/result-list.component';
import { FormatNumberModule } from '../../pipes/format-number/format-number.module';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ReplaceModule } from '../../pipes/replace/replace.module';
import { GetAttachmentUrlModule } from '../../pipes/get-attachment-url/get-attachment-url.module';
import { ResultActionsComponent } from './result-actions/result-actions.component';
import { ActionDisplayerPipe } from './result-actions/result-actions.pipe';
import * as i0 from "@angular/core";
import * as i1 from "../../services/color.generator.module";
export class ResultsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: ResultsModule, declarations: [ResultListComponent, ResultGridTileComponent,
            ResultItemComponent, ResultDetailedItemComponent, ResultDetailedGridComponent,
            ResultFilterComponent, ResultScrollDirective, ResultActionsComponent, ActionDisplayerPipe], imports: [CommonModule, i1.ColorGeneratorModule, MatIconModule,
            MatChipsModule,
            MatButtonToggleModule,
            MatButtonModule,
            MatGridListModule,
            MatCheckboxModule,
            MatMenuModule,
            MatSelectModule,
            MatSlideToggleModule,
            MatTooltipModule,
            MatRadioModule,
            MatProgressSpinnerModule,
            FormsModule,
            LazyLoadImageModule,
            NgxLoadingModule,
            TranslateModule,
            FormatNumberModule,
            ReplaceModule,
            GetAttachmentUrlModule], exports: [ResultListComponent, ResultGridTileComponent,
            ResultItemComponent, ResultDetailedItemComponent, ResultDetailedGridComponent,
            ResultFilterComponent, ResultScrollDirective, ResultActionsComponent, ActionDisplayerPipe] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultsModule, imports: [CommonModule,
            ColorGeneratorModule.forRoot(),
            MatIconModule,
            MatChipsModule,
            MatButtonToggleModule,
            MatButtonModule,
            MatGridListModule,
            MatCheckboxModule,
            MatMenuModule,
            MatSelectModule,
            MatSlideToggleModule,
            MatTooltipModule,
            MatRadioModule,
            MatProgressSpinnerModule,
            FormsModule,
            LazyLoadImageModule,
            NgxLoadingModule,
            TranslateModule,
            FormatNumberModule,
            ReplaceModule,
            GetAttachmentUrlModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ColorGeneratorModule.forRoot(),
                        MatIconModule,
                        MatChipsModule,
                        MatButtonToggleModule,
                        MatButtonModule,
                        MatGridListModule,
                        MatCheckboxModule,
                        MatMenuModule,
                        MatSelectModule,
                        MatSlideToggleModule,
                        MatTooltipModule,
                        MatRadioModule,
                        MatProgressSpinnerModule,
                        FormsModule,
                        LazyLoadImageModule,
                        NgxLoadingModule,
                        TranslateModule,
                        FormatNumberModule,
                        ReplaceModule,
                        GetAttachmentUrlModule
                    ],
                    declarations: [ResultListComponent, ResultGridTileComponent,
                        ResultItemComponent, ResultDetailedItemComponent, ResultDetailedGridComponent,
                        ResultFilterComponent, ResultScrollDirective, ResultActionsComponent, ActionDisplayerPipe],
                    exports: [ResultListComponent, ResultGridTileComponent,
                        ResultItemComponent, ResultDetailedItemComponent, ResultDetailedGridComponent,
                        ResultFilterComponent, ResultScrollDirective, ResultActionsComponent, ActionDisplayerPipe],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,