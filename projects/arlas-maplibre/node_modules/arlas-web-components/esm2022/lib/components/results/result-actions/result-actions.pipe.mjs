/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Pipe } from '@angular/core';
import { ActionHandler } from '../utils/results.utils';
import * as i0 from "@angular/core";
export class ActionDisplayerPipe {
    /**
     * @param a Action
     * @param displayElement Part of the action displayed in the template
     * @returns According to the action's state, returns the right displayElement.
     */
    transform(a, displayElement) {
        /** Note that if an action has been activated, we display the elements of the reverse action ! */
        /** For example if the action of 'visualize' on map is activated, we display the reverse action 'Remove from map'. */
        switch (displayElement) {
            case 'label':
                return ActionHandler.isReversible(a) ?
                    (a.activated ? a.reverseAction?.label : a.label) :
                    a.label;
            case 'tooltip':
                return ActionHandler.isReversible(a) ?
                    (a.activated ? a.reverseAction?.tooltip : a.tooltip) :
                    a.tooltip;
            case 'id':
                return ActionHandler.isReversible(a) ?
                    (a.activated ? a.reverseAction?.id : a.id) :
                    a.id;
            case 'icon':
                return ActionHandler.isReversible(a) ?
                    (a.activated ? a.reverseAction?.icon : a.icon) :
                    a.icon;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActionDisplayerPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: ActionDisplayerPipe, name: "actionDisplayer" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActionDisplayerPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'actionDisplayer'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0LWFjdGlvbnMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FybGFzLWNvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3Jlc3VsdHMvcmVzdWx0LWFjdGlvbnMvcmVzdWx0LWFjdGlvbnMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQVUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBSy9ELE1BQU0sT0FBTyxtQkFBbUI7SUFFOUI7Ozs7T0FJRztJQUNJLFNBQVMsQ0FBQyxDQUFTLEVBQUUsY0FBbUQ7UUFDN0UsaUdBQWlHO1FBQ2pHLHFIQUFxSDtRQUNySCxRQUFRLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssT0FBTztnQkFDVixPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2xELENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDWixLQUFLLFNBQVM7Z0JBQ1osT0FBTyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2QsS0FBSyxJQUFJO2dCQUNQLE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDNUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNULEtBQUssTUFBTTtnQkFDVCxPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2hELENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDYixDQUFDO0lBQ0gsQ0FBQzsrR0E1QlUsbUJBQW1COzZHQUFuQixtQkFBbUI7OzRGQUFuQixtQkFBbUI7a0JBSC9CLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLGlCQUFpQjtpQkFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gR2lzYcOvYSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRS50eHQgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBHaXNhw69hIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25IYW5kbGVyIH0gZnJvbSAnLi4vdXRpbHMvcmVzdWx0cy51dGlscyc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2FjdGlvbkRpc3BsYXllcidcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uRGlzcGxheWVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gYSBBY3Rpb25cbiAgICogQHBhcmFtIGRpc3BsYXlFbGVtZW50IFBhcnQgb2YgdGhlIGFjdGlvbiBkaXNwbGF5ZWQgaW4gdGhlIHRlbXBsYXRlXG4gICAqIEByZXR1cm5zIEFjY29yZGluZyB0byB0aGUgYWN0aW9uJ3Mgc3RhdGUsIHJldHVybnMgdGhlIHJpZ2h0IGRpc3BsYXlFbGVtZW50LlxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybShhOiBBY3Rpb24sIGRpc3BsYXlFbGVtZW50OiAnbGFiZWwnIHwgJ3Rvb2x0aXAnIHwgJ2lkJyB8ICdpY29uJykge1xuICAgIC8qKiBOb3RlIHRoYXQgaWYgYW4gYWN0aW9uIGhhcyBiZWVuIGFjdGl2YXRlZCwgd2UgZGlzcGxheSB0aGUgZWxlbWVudHMgb2YgdGhlIHJldmVyc2UgYWN0aW9uICEgKi9cbiAgICAvKiogRm9yIGV4YW1wbGUgaWYgdGhlIGFjdGlvbiBvZiAndmlzdWFsaXplJyBvbiBtYXAgaXMgYWN0aXZhdGVkLCB3ZSBkaXNwbGF5IHRoZSByZXZlcnNlIGFjdGlvbiAnUmVtb3ZlIGZyb20gbWFwJy4gKi9cbiAgICBzd2l0Y2ggKGRpc3BsYXlFbGVtZW50KSB7XG4gICAgICBjYXNlICdsYWJlbCc6XG4gICAgICAgIHJldHVybiBBY3Rpb25IYW5kbGVyLmlzUmV2ZXJzaWJsZShhKSA/XG4gICAgICAgICAgKGEuYWN0aXZhdGVkID8gYS5yZXZlcnNlQWN0aW9uPy5sYWJlbCA6IGEubGFiZWwpIDpcbiAgICAgICAgICBhLmxhYmVsO1xuICAgICAgY2FzZSAndG9vbHRpcCc6XG4gICAgICAgIHJldHVybiBBY3Rpb25IYW5kbGVyLmlzUmV2ZXJzaWJsZShhKSA/XG4gICAgICAgICAgKGEuYWN0aXZhdGVkID8gYS5yZXZlcnNlQWN0aW9uPy50b29sdGlwIDogYS50b29sdGlwKSA6XG4gICAgICAgICAgYS50b29sdGlwO1xuICAgICAgY2FzZSAnaWQnOlxuICAgICAgICByZXR1cm4gQWN0aW9uSGFuZGxlci5pc1JldmVyc2libGUoYSkgP1xuICAgICAgICAgIChhLmFjdGl2YXRlZCA/IGEucmV2ZXJzZUFjdGlvbj8uaWQgOiBhLmlkKSA6XG4gICAgICAgICAgYS5pZDtcbiAgICAgIGNhc2UgJ2ljb24nOlxuICAgICAgICByZXR1cm4gQWN0aW9uSGFuZGxlci5pc1JldmVyc2libGUoYSkgP1xuICAgICAgICAgIChhLmFjdGl2YXRlZCA/IGEucmV2ZXJzZUFjdGlvbj8uaWNvbiA6IGEuaWNvbikgOlxuICAgICAgICAgIGEuaWNvbjtcbiAgICB9XG4gIH1cbn1cbiJdfQ==