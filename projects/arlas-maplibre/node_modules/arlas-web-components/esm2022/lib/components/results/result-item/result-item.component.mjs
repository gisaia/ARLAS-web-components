/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { ArlasColorService } from '../../../services/color.generator.service';
import { Item } from '../model/item';
import { ItemComponent } from '../model/itemComponent';
import { CellBackgroundStyleEnum } from '../utils/enumerations/cellBackgroundStyleEnum';
import { ResultListOptions } from '../utils/results.utils';
import { TranslateService } from '@ngx-translate/core';
import { NUMBER_FORMAT_CHAR } from '../../componentsUtils';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/color.generator.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/tooltip";
import * as i6 from "../result-actions/result-actions.component";
import * as i7 from "../../../pipes/format-number/format-number.pipe";
export class ResultItemComponent extends ItemComponent {
    constructor(colorService, translate) {
        super();
        this.colorService = colorService;
        this.translate = translate;
        /**
         * @constant
         */
        this.HIDE_DETAILS = marker('Hide details');
        /**
         * @constant
         */
        this.SHOW_DETAILS = marker('Show details');
        this.CellBackgroundStyleEnum = CellBackgroundStyleEnum;
        /**
         * @Input : Angular
         * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
         * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
         * Therefore saturation of generated colors will be within this tightened scale.
         */
        this.colorsSaturationWeight = 1 / 2;
        /**
         * @Input : Angular
         * @description Whether to allow colorizing the cells of the item (the row) according to the terms displayed
         */
        this.useColorService = false;
        /**
         * @Input : Angular
         * @description The way the cell will be colorized: filled or outlined
         */
        this.cellBackgroundStyle = CellBackgroundStyleEnum.filled;
        /**
         * @Input : Angular
         * @description Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions.
        */
        this.activatedActionsPerItem = new Map();
        /**
         * @Output
         * @description Emits the list of selected items in result-list.component.
         */
        this.selectedItemsEvent = new Subject();
        /**
         * @Output
         * @description Emits the event of applying the specified action on the specified item.
         */
        this.actionOnItemEvent = new Subject();
        /**
         * @Output
         * @description Emits the selected/unselected item.
         * @deprecated
         */
        this.selectedItemPositionEvent = new Subject();
        /**
         * @Output
         * @description Emits the border line style depending on the item's toggle state.
         */
        this.borderStyleEvent = new Subject();
        this.isDetailToggled = false;
        this.detailedData = '';
        this.borderStyle = 'solid';
        this.colors = {};
        this.NUMBER_FORMAT_CHAR = NUMBER_FORMAT_CHAR;
        this.colorService.changekeysToColors$.subscribe(() => this.updateColors());
    }
    ngOnInit() {
        this.identifier = this.rowItem?.identifier;
        this.updateColors();
    }
    // Detailed data is retrieved wheb the row is toggled for the first time
    toggle() {
        if (this.rowItem.isDetailToggled === false) {
            this.retrieveAdditionalInfo(this.detailedDataRetriever, this.rowItem);
            this.borderStyle = 'dashed';
        }
        else {
            this.borderStyle = 'solid';
        }
        this.borderStyleEvent.next(this.borderStyle);
        this.rowItem.isDetailToggled = !this.rowItem.isDetailToggled;
    }
    // Update the list of the selected items
    setSelectedItem() {
        super.setSelectedItem(this.rowItem.isChecked, this.identifier, this.selectedItems);
        this.rowItem.isChecked = !this.rowItem.isChecked;
        // Emit to the result list the fact that this checkbox has changed in order to notify the correspondant one in grid mode
        this.selectedItemsEvent.next(this.selectedItems);
    }
    determinateItem() {
        this.rowItem.isChecked = true;
        this.rowItem.isindeterminated = false;
        this.selectedItems.add(this.identifier);
        // Emit to the result list the fact that this checkbox has changed in order to notify the correspondant one in grid mode
        this.selectedItemsEvent.next(this.selectedItems);
    }
    getTextColor(key) {
        if (key !== undefined && key !== null) {
            return this.colorService.getTextColor(key.toString());
        }
        else {
            return '';
        }
    }
    triggerActionOnItem(action) {
        this.actionOnItemEvent.next({ action: action, elementidentifier: { idFieldName: this.idFieldName, idValue: this.rowItem.identifier } });
    }
    updateColors() {
        const newColor = {};
        this.rowItem?.columns.forEach(c => {
            if (c.useColorService) {
                const key = this.rowItem?.itemData.get(c.fieldName);
                if (key !== undefined && key !== null) {
                    newColor[key.toString()] = {};
                    newColor[key.toString()]['color'] = this.getColor(key);
                    newColor[key.toString()]['textColor'] = this.getTextColor(key);
                }
            }
        });
        this.colors = newColor;
    }
    getColor(key) {
        if (key !== undefined && key !== null) {
            return this.colorService.getColor(key.toString(), this.keysToColors, this.colorsSaturationWeight);
        }
        else {
            return '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultItemComponent, deps: [{ token: i1.ArlasColorService }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: ResultItemComponent, selector: "[arlas-result-item]", inputs: { options: "options", rowItem: "rowItem", idFieldName: "idFieldName", detailedDataRetriever: "detailedDataRetriever", selectedItems: "selectedItems", keysToColors: "keysToColors", colorsSaturationWeight: "colorsSaturationWeight", useColorService: "useColorService", cellBackgroundStyle: "cellBackgroundStyle", activatedActionsPerItem: "activatedActionsPerItem", tableWidth: "tableWidth" }, outputs: { selectedItemsEvent: "selectedItemsEvent", actionOnItemEvent: "actionOnItemEvent", selectedItemPositionEvent: "selectedItemPositionEvent", borderStyleEvent: "borderStyleEvent" }, usesInheritance: true, ngImport: i0, template: "  <ng-container *ngFor=\"let column of rowItem?.columns;\">\n    <!-- If the column corresponds to an id field, then we put the checkbox that enables to check the item-->\n    <td *ngIf=\"column.isIdField\" class=\"resultitem__cell\" [style.max-width.px]=\"column.width\" [style.min-width.px]=\"column.width\" >\n      <div class=\"checkbox\">\n        <mat-icon *ngIf=\"rowItem?.isChecked && !rowItem?.isindeterminated\"  (click)=\"setSelectedItem()\" class=\"primary resultitem__icon_check mat-icon material-icons\">check_box</mat-icon>\n        <mat-icon *ngIf=\"!rowItem?.isChecked && !rowItem?.isindeterminated\" (click)=\"setSelectedItem()\" class=\"primary resultitem__icon_check mat-icon material-icons\">check_box_outline_blank</mat-icon>\n        <mat-icon *ngIf=\"rowItem?.isindeterminated\" (click)=\"determinateItem()\" class=\"primary resultitem__icon_check mat-icon material-icons\">indeterminate_check_box</mat-icon>\n      </div>\n    </td>\n\n    <!-- If the column is not an id field nor a toggle, then we put the value of the corespondant field-->\n    <td *ngIf=\"!column.isIdField && !column.isToggleField\" class=\"resultitem__cell resultitem__cell__{{column.fieldName}}\"\n          [style.max-width.px]=\"column.width\"\n          [style.min-width.px]=\"column.width\">\n      <label *ngIf=\"(!useColorService || !column.useColorService || cellBackgroundStyle === undefined); else labelModeIsDefined\" class=\"resultitem__cell--label resultitem__cell--label__{{column.fieldName}}  resultitem__cell--label__{{rowItem?.itemData.get(column.fieldName)}}\">\n        {{rowItem?.itemData.get(column.fieldName) | formatNumber:NUMBER_FORMAT_CHAR}}{{column.dataType}}\n      </label>\n      <ng-template #labelModeIsDefined>\n        <label *ngIf=\"cellBackgroundStyle === CellBackgroundStyleEnum.filled && column.useColorService\" class=\"resultitem__cell--label resultitem__cell--label__filled\"\n          [style.background-color]=\"!!colors[rowItem?.itemData.get(column.fieldName)] ? colors[rowItem?.itemData.get(column.fieldName)]['color'] : 'transparent'\" \n          [style.color]=\"!!colors[rowItem?.itemData.get(column.fieldName)] ?  colors[rowItem?.itemData.get(column.fieldName)]['textColor'] : 'black'\">\n          {{rowItem?.itemData.get(column.fieldName) | formatNumber:NUMBER_FORMAT_CHAR}}{{column.dataType}}\n        </label>\n        <label *ngIf=\"cellBackgroundStyle === CellBackgroundStyleEnum.outlined && column.useColorService && !!rowItem?.itemData.get(column.fieldName) && rowItem?.itemData.get(column.fieldName) !== ''\" class=\"resultitem__cell--label resultitem__cell--label__outlined\"\n          [style.border-color]=\"!!colors[rowItem?.itemData.get(column.fieldName)] ? colors[rowItem?.itemData.get(column.fieldName)]['color'] : 'black'\"  >\n          {{rowItem?.itemData.get(column.fieldName) | formatNumber:NUMBER_FORMAT_CHAR}}{{column.dataType}}\n        </label>\n      </ng-template>\n    </td>\n\n    <!-- If the column is a toggle, then we put the + button that enables to fetch detailed data of the item-->\n    <td *ngIf=\"column.isToggleField\" class=\"resultitem__cell toggle\" [style.max-width.px]=\"column.width\" [style.min-width.px]=\"column.width\">\n      <div *ngIf=\"options.showActionsOnhover\" class=\"actions\">\n        <arlas-result-actions\n          [item]=\"rowItem\"\n          [activatedActionsPerItem]=\"activatedActionsPerItem\"\n          [detailedDataRetriever]=\"detailedDataRetriever\"\n          [width]=\"tableWidth * 80 / 100\"\n          (actionOnItemEvent)=\"triggerActionOnItem($event)\"></arlas-result-actions>\n      </div>\n      <mat-icon id= \"{{'open-detail-' + rowItem?.identifier}}\" matTooltip=\"{{SHOW_DETAILS | translate}}\" class=\"resultitem__cell__toggle--icon\" *ngIf=\"!rowItem?.isDetailToggled; else cancel_toggle\" (click) = \"toggle()\">{{options.showDetailIconName}}</mat-icon>\n      <ng-template #cancel_toggle>\n        <mat-icon id= \"{{'close-detail-' + rowItem?.identifier}}\"   matTooltip=\"{{HIDE_DETAILS | translate}}\" class=\"resultitem__cell__toggle--icon\" (click) = \"toggle()\">{{options.hideDetailIconName}}</mat-icon>\n      </ng-template>\n    </td>\n\n  </ng-container>\n\n\n\n", styles: [".resultitem__cell{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.7em;text-align:left;vertical-align:middle;box-sizing:border-box}.resultitem__cell__toggle--icon{font-size:18px;width:18px;height:18px;display:block;cursor:pointer}.resultitem__cell--label{margin:0}.resultitem__icon_check{float:right;font-size:15px;width:15px;height:15px;cursor:pointer}.resultitem__cell--label__filled{padding:2px;border-radius:2px}.resultitem__cell--label__outlined{padding:2px;border-radius:2px;border:1.5px solid;display:inline-grid}.toggle{position:relative;cursor:pointer}.actions{position:absolute;right:35px;top:0;height:100%;width:100%}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i5.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "component", type: i6.ResultActionsComponent, selector: "arlas-result-actions", inputs: ["item", "width", "activatedActionsPerItem", "detailedDataRetriever", "stopPropagation", "mode"], outputs: ["actionOnItemEvent"] }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }, { kind: "pipe", type: i7.FormatNumberPipe, name: "formatNumber" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultItemComponent, decorators: [{
            type: Component,
            args: [{ selector: '[arlas-result-item]', template: "  <ng-container *ngFor=\"let column of rowItem?.columns;\">\n    <!-- If the column corresponds to an id field, then we put the checkbox that enables to check the item-->\n    <td *ngIf=\"column.isIdField\" class=\"resultitem__cell\" [style.max-width.px]=\"column.width\" [style.min-width.px]=\"column.width\" >\n      <div class=\"checkbox\">\n        <mat-icon *ngIf=\"rowItem?.isChecked && !rowItem?.isindeterminated\"  (click)=\"setSelectedItem()\" class=\"primary resultitem__icon_check mat-icon material-icons\">check_box</mat-icon>\n        <mat-icon *ngIf=\"!rowItem?.isChecked && !rowItem?.isindeterminated\" (click)=\"setSelectedItem()\" class=\"primary resultitem__icon_check mat-icon material-icons\">check_box_outline_blank</mat-icon>\n        <mat-icon *ngIf=\"rowItem?.isindeterminated\" (click)=\"determinateItem()\" class=\"primary resultitem__icon_check mat-icon material-icons\">indeterminate_check_box</mat-icon>\n      </div>\n    </td>\n\n    <!-- If the column is not an id field nor a toggle, then we put the value of the corespondant field-->\n    <td *ngIf=\"!column.isIdField && !column.isToggleField\" class=\"resultitem__cell resultitem__cell__{{column.fieldName}}\"\n          [style.max-width.px]=\"column.width\"\n          [style.min-width.px]=\"column.width\">\n      <label *ngIf=\"(!useColorService || !column.useColorService || cellBackgroundStyle === undefined); else labelModeIsDefined\" class=\"resultitem__cell--label resultitem__cell--label__{{column.fieldName}}  resultitem__cell--label__{{rowItem?.itemData.get(column.fieldName)}}\">\n        {{rowItem?.itemData.get(column.fieldName) | formatNumber:NUMBER_FORMAT_CHAR}}{{column.dataType}}\n      </label>\n      <ng-template #labelModeIsDefined>\n        <label *ngIf=\"cellBackgroundStyle === CellBackgroundStyleEnum.filled && column.useColorService\" class=\"resultitem__cell--label resultitem__cell--label__filled\"\n          [style.background-color]=\"!!colors[rowItem?.itemData.get(column.fieldName)] ? colors[rowItem?.itemData.get(column.fieldName)]['color'] : 'transparent'\" \n          [style.color]=\"!!colors[rowItem?.itemData.get(column.fieldName)] ?  colors[rowItem?.itemData.get(column.fieldName)]['textColor'] : 'black'\">\n          {{rowItem?.itemData.get(column.fieldName) | formatNumber:NUMBER_FORMAT_CHAR}}{{column.dataType}}\n        </label>\n        <label *ngIf=\"cellBackgroundStyle === CellBackgroundStyleEnum.outlined && column.useColorService && !!rowItem?.itemData.get(column.fieldName) && rowItem?.itemData.get(column.fieldName) !== ''\" class=\"resultitem__cell--label resultitem__cell--label__outlined\"\n          [style.border-color]=\"!!colors[rowItem?.itemData.get(column.fieldName)] ? colors[rowItem?.itemData.get(column.fieldName)]['color'] : 'black'\"  >\n          {{rowItem?.itemData.get(column.fieldName) | formatNumber:NUMBER_FORMAT_CHAR}}{{column.dataType}}\n        </label>\n      </ng-template>\n    </td>\n\n    <!-- If the column is a toggle, then we put the + button that enables to fetch detailed data of the item-->\n    <td *ngIf=\"column.isToggleField\" class=\"resultitem__cell toggle\" [style.max-width.px]=\"column.width\" [style.min-width.px]=\"column.width\">\n      <div *ngIf=\"options.showActionsOnhover\" class=\"actions\">\n        <arlas-result-actions\n          [item]=\"rowItem\"\n          [activatedActionsPerItem]=\"activatedActionsPerItem\"\n          [detailedDataRetriever]=\"detailedDataRetriever\"\n          [width]=\"tableWidth * 80 / 100\"\n          (actionOnItemEvent)=\"triggerActionOnItem($event)\"></arlas-result-actions>\n      </div>\n      <mat-icon id= \"{{'open-detail-' + rowItem?.identifier}}\" matTooltip=\"{{SHOW_DETAILS | translate}}\" class=\"resultitem__cell__toggle--icon\" *ngIf=\"!rowItem?.isDetailToggled; else cancel_toggle\" (click) = \"toggle()\">{{options.showDetailIconName}}</mat-icon>\n      <ng-template #cancel_toggle>\n        <mat-icon id= \"{{'close-detail-' + rowItem?.identifier}}\"   matTooltip=\"{{HIDE_DETAILS | translate}}\" class=\"resultitem__cell__toggle--icon\" (click) = \"toggle()\">{{options.hideDetailIconName}}</mat-icon>\n      </ng-template>\n    </td>\n\n  </ng-container>\n\n\n\n", styles: [".resultitem__cell{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.7em;text-align:left;vertical-align:middle;box-sizing:border-box}.resultitem__cell__toggle--icon{font-size:18px;width:18px;height:18px;display:block;cursor:pointer}.resultitem__cell--label{margin:0}.resultitem__icon_check{float:right;font-size:15px;width:15px;height:15px;cursor:pointer}.resultitem__cell--label__filled{padding:2px;border-radius:2px}.resultitem__cell--label__outlined{padding:2px;border-radius:2px;border:1.5px solid;display:inline-grid}.toggle{position:relative;cursor:pointer}.actions{position:absolute;right:35px;top:0;height:100%;width:100%}\n"] }]
        }], ctorParameters: () => [{ type: i1.ArlasColorService }, { type: i2.TranslateService }], propDecorators: { options: [{
                type: Input
            }], rowItem: [{
                type: Input
            }], idFieldName: [{
                type: Input
            }], detailedDataRetriever: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], keysToColors: [{
                type: Input
            }], colorsSaturationWeight: [{
                type: Input
            }], useColorService: [{
                type: Input
            }], cellBackgroundStyle: [{
                type: Input
            }], activatedActionsPerItem: [{
                type: Input
            }], tableWidth: [{
                type: Input
            }], selectedItemsEvent: [{
                type: Output
            }], actionOnItemEvent: [{
                type: Output
            }], selectedItemPositionEvent: [{
                type: Output
            }], borderStyleEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,