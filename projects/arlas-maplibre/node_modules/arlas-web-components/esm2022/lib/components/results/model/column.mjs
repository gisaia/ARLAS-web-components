/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { SortEnum } from '../utils/enumerations/sortEnum';
export class Column {
    constructor(columnName, fieldName, dataType) {
        /**
         * @description Sort direction to apply to th column : ascending, descending or none
         */
        this.sortDirection = SortEnum.none;
        /**
         * @description Whether this column represents an id field.
         */
        this.isIdField = false;
        /**
         * @description Whether the cells of this column contains a toggle button.
         */
        this.isToggleField = false;
        /**
         * @description Whether the filter search column has a dropdown.
         */
        this.dropdown = false;
        /**
         * @description Size of the dropdown list.
         */
        this.dropdownsize = 10;
        /**
         * @description Whether to allow colorizing cells that are within this column
         */
        this.useColorService = false;
        this.columnName = columnName;
        this.fieldName = fieldName;
        this.dataType = dataType;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYXJsYXMtY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvcmVzdWx0cy9tb2RlbC9jb2x1bW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTFELE1BQU0sT0FBTyxNQUFNO0lBMENqQixZQUFtQixVQUFrQixFQUFFLFNBQWlCLEVBQUUsUUFBZ0I7UUF6QjFFOztXQUVHO1FBQ0ksa0JBQWEsR0FBYSxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQy9DOztXQUVHO1FBQ0ksY0FBUyxHQUFHLEtBQUssQ0FBQztRQUN6Qjs7V0FFRztRQUNJLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzdCOztXQUVHO1FBQ0ksYUFBUSxHQUFHLEtBQUssQ0FBQztRQUN4Qjs7V0FFRztRQUNJLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3pCOztXQUVHO1FBQ0ksb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFHN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNvcnRFbnVtIH0gZnJvbSAnLi4vdXRpbHMvZW51bWVyYXRpb25zL3NvcnRFbnVtJztcblxuZXhwb3J0IGNsYXNzIENvbHVtbiB7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIGNvbHVtbiBuYW1lXG4gICAqL1xuICBwdWJsaWMgY29sdW1uTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCByZWxhdGVkIHRvIHRoaXMgY29sdW1uLlxuICAgKi9cbiAgcHVibGljIGZpZWxkTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFR5cGUgb2YgZGF0YSB0aGF0IGlzIGFwcGVuZGVkIHRvIGNvbHVtbiBuYW1lIDogJSwgwrBDLCAuLlxuICAgKi9cbiAgcHVibGljIGRhdGFUeXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gV2lkdGggb2YgdGhlIGNvbHVtbi5cbiAgICovXG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFNvcnQgZGlyZWN0aW9uIHRvIGFwcGx5IHRvIHRoIGNvbHVtbiA6IGFzY2VuZGluZywgZGVzY2VuZGluZyBvciBub25lXG4gICAqL1xuICBwdWJsaWMgc29ydERpcmVjdGlvbjogU29ydEVudW0gPSBTb3J0RW51bS5ub25lO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFdoZXRoZXIgdGhpcyBjb2x1bW4gcmVwcmVzZW50cyBhbiBpZCBmaWVsZC5cbiAgICovXG4gIHB1YmxpYyBpc0lkRmllbGQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBXaGV0aGVyIHRoZSBjZWxscyBvZiB0aGlzIGNvbHVtbiBjb250YWlucyBhIHRvZ2dsZSBidXR0b24uXG4gICAqL1xuICBwdWJsaWMgaXNUb2dnbGVGaWVsZCA9IGZhbHNlO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFdoZXRoZXIgdGhlIGZpbHRlciBzZWFyY2ggY29sdW1uIGhhcyBhIGRyb3Bkb3duLlxuICAgKi9cbiAgcHVibGljIGRyb3Bkb3duID0gZmFsc2U7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gU2l6ZSBvZiB0aGUgZHJvcGRvd24gbGlzdC5cbiAgICovXG4gIHB1YmxpYyBkcm9wZG93bnNpemUgPSAxMDtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBXaGV0aGVyIHRvIGFsbG93IGNvbG9yaXppbmcgY2VsbHMgdGhhdCBhcmUgd2l0aGluIHRoaXMgY29sdW1uXG4gICAqL1xuICBwdWJsaWMgdXNlQ29sb3JTZXJ2aWNlID0gZmFsc2U7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbHVtbk5hbWU6IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcsIGRhdGFUeXBlOiBzdHJpbmcgKSB7XG4gICAgdGhpcy5jb2x1bW5OYW1lID0gY29sdW1uTmFtZTtcbiAgICB0aGlzLmZpZWxkTmFtZSA9IGZpZWxkTmFtZTtcbiAgICB0aGlzLmRhdGFUeXBlID0gZGF0YVR5cGU7XG4gIH1cblxufVxuIl19