/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/checkbox";
import * as i2 from "@angular/common";
import * as i3 from "../../powerbars/powerbar/powerbar.component";
export class MetricsTableRowComponent {
    constructor() {
        this.useColorService = false;
        this.useColorFromData = false;
        this.pendingMode = false;
        this.powerBars = [];
        this.rowSelected = new EventEmitter();
    }
    selectRow() {
        this.updateRowState();
    }
    onCheck() {
        this.updateRowState();
    }
    updateRowState() {
        this.metricsTableRow.selected = !this.metricsTableRow.selected;
        this.rowSelected.emit(this.metricsTableRow.term);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: MetricsTableRowComponent, selector: "arlas-multi-bars-row", inputs: { displayCheckBox: "displayCheckBox", hideSelection: "hideSelection", metricsTableRow: "metricsTableRow", useColorService: "useColorService", useColorFromData: "useColorFromData", colors: "colors", selected: "selected", pendingMode: "pendingMode", powerBars: "powerBars" }, outputs: { rowSelected: "rowSelected" }, ngImport: i0, template: "<tr *ngIf=\"!metricsTableRow?.selected || !hideSelection\" [ngClass]=\"{\n'multi-bar-row--unselected': !metricsTableRow?.selected,\n'multi-bar-row--selected': metricsTableRow?.selected,\n'multi-bar-row--pending': !metricsTableRow?.selected && pendingMode\n}\" (click)=\"selectRow()\" class=\"multi-bar-row\">\n  <th class=\"terms-head\" scope=\"row\" class=\"multi-bar-row__header\">\n    <div class=\"header\">\n      <section *ngIf=\"displayCheckBox\"  (click)=\"$event.stopPropagation()\">\n        <mat-checkbox [checked]=\"metricsTableRow?.selected\" (change)=\"onCheck()\"></mat-checkbox>\n      </section>\n      <span class=\"header-title\" [matTooltip]=\"metricsTableRow?.term\">\n           {{metricsTableRow?.term | uppercase}}\n      </span>\n    </div>\n  </th>\n  <td  class=\"column-head\" class=\"multi-bar-row__data\" *ngFor=\"let powerBar of powerBars\">\n    <div>\n    <arlas-powerbar [useColorFromData]=\"useColorFromData\"\n                      [useColorService]=\"useColorService\"\n                      *ngIf=\"powerBar.count !== null && powerBar.count !== undefined; else noData\"\n                      [powerbar]=\"powerBar\"></arlas-powerbar>\n      <ng-template #noData>\n        <div class=\"empty-cell\">\n          <span class=\"empty\"></span>\n          <span class=\"empty\"></span>\n        </div>\n      </ng-template>\n    </div>\n  </td>\n</tr>\n", styles: ["@charset \"UTF-8\";:host{display:table-row-group}:host ::ng-deep{--mdc-checkbox-state-layer-size: 10px}:host ::ng-deep arlas-powerbar .powerbars__powerbar--count{text-align:left}:host ::ng-deep arlas-powerbar .powerbars__powerbar--term{display:none}:host ::ng-deep arlas-powerbar .powerbars__powerbar--neutral-state:hover,:host ::ng-deep arlas-powerbar .powerbars__powerbar--selected-bar:hover,:host ::ng-deep arlas-powerbar .powerbars__powerbar--unselected-bar:hover{opacity:1;cursor:pointer}:host ::ng-deep ::ng-deep .mdc-checkbox__native-control{top:0!important;right:0!important;left:0!important}:host ::ng-deep ::ng-deep .mdc-checkbox,:host ::ng-deep ::ng-deep .mdc-checkbox__background,:host ::ng-deep ::ng-deep .mat-mdc-checkbox-touch-target,:host ::ng-deep ::ng-deep .mdc-checkbox__ripple,:host ::ng-deep ::ng-deep .mat-mdc-checkbox-ripple{width:10px;height:10px;top:0!important;left:0!important}:host ::ng-deep ::ng-deep .mat-mdc-checkbox-touch-target{transform:unset}:host ::ng-deep .checkbox{margin-right:5px;padding-bottom:5px}:host ::ng-deep .checkbox-unselected-bar ::ng-deep .mat-checkbox-frame{border-color:#0000000a!important}.multi-bar-row{height:25px;cursor:pointer}.multi-bar-row--selected{font-weight:700;opacity:1}.multi-bar-row--selected .header{font-weight:700!important}.multi-bar-row--unselected:hover{opacity:.8}.multi-bar-row--pending{opacity:.5}.multi-bar-row__header{padding:0 6px;font-size:12px;vertical-align:middle}.multi-bar-row__header .header{display:flex;align-items:center;gap:5px;font-weight:400}.multi-bar-row__header .header-title{text-overflow:ellipsis;overflow:hidden;padding:0 3px}.multi-bar-row__data{padding:0 6px;vertical-align:middle}.multi-bar-row td,.multi-bar-row th{white-space:nowrap}.empty-cell{height:10px;display:flex;gap:4px;align-items:center}.empty{display:inline-block;width:5px;border:solid 1px rgba(0,0,0,.2)}.terms-head{width:80px}.column-head{width:70px}\n"], dependencies: [{ kind: "component", type: i1.MatCheckbox, selector: "mat-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "disableRipple", "tabIndex", "color", "disabledInteractive", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: i3.PowerbarComponent, selector: "arlas-powerbar", inputs: ["powerbar", "numberShorteningPrecision", "unit", "useColorService", "useColorFromData", "hideSelected", "selectWithCheckbox"], outputs: ["onCheckEvent", "onClickEvent"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: i2.UpperCasePipe, name: "uppercase" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableRowComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-multi-bars-row', template: "<tr *ngIf=\"!metricsTableRow?.selected || !hideSelection\" [ngClass]=\"{\n'multi-bar-row--unselected': !metricsTableRow?.selected,\n'multi-bar-row--selected': metricsTableRow?.selected,\n'multi-bar-row--pending': !metricsTableRow?.selected && pendingMode\n}\" (click)=\"selectRow()\" class=\"multi-bar-row\">\n  <th class=\"terms-head\" scope=\"row\" class=\"multi-bar-row__header\">\n    <div class=\"header\">\n      <section *ngIf=\"displayCheckBox\"  (click)=\"$event.stopPropagation()\">\n        <mat-checkbox [checked]=\"metricsTableRow?.selected\" (change)=\"onCheck()\"></mat-checkbox>\n      </section>\n      <span class=\"header-title\" [matTooltip]=\"metricsTableRow?.term\">\n           {{metricsTableRow?.term | uppercase}}\n      </span>\n    </div>\n  </th>\n  <td  class=\"column-head\" class=\"multi-bar-row__data\" *ngFor=\"let powerBar of powerBars\">\n    <div>\n    <arlas-powerbar [useColorFromData]=\"useColorFromData\"\n                      [useColorService]=\"useColorService\"\n                      *ngIf=\"powerBar.count !== null && powerBar.count !== undefined; else noData\"\n                      [powerbar]=\"powerBar\"></arlas-powerbar>\n      <ng-template #noData>\n        <div class=\"empty-cell\">\n          <span class=\"empty\"></span>\n          <span class=\"empty\"></span>\n        </div>\n      </ng-template>\n    </div>\n  </td>\n</tr>\n", styles: ["@charset \"UTF-8\";:host{display:table-row-group}:host ::ng-deep{--mdc-checkbox-state-layer-size: 10px}:host ::ng-deep arlas-powerbar .powerbars__powerbar--count{text-align:left}:host ::ng-deep arlas-powerbar .powerbars__powerbar--term{display:none}:host ::ng-deep arlas-powerbar .powerbars__powerbar--neutral-state:hover,:host ::ng-deep arlas-powerbar .powerbars__powerbar--selected-bar:hover,:host ::ng-deep arlas-powerbar .powerbars__powerbar--unselected-bar:hover{opacity:1;cursor:pointer}:host ::ng-deep ::ng-deep .mdc-checkbox__native-control{top:0!important;right:0!important;left:0!important}:host ::ng-deep ::ng-deep .mdc-checkbox,:host ::ng-deep ::ng-deep .mdc-checkbox__background,:host ::ng-deep ::ng-deep .mat-mdc-checkbox-touch-target,:host ::ng-deep ::ng-deep .mdc-checkbox__ripple,:host ::ng-deep ::ng-deep .mat-mdc-checkbox-ripple{width:10px;height:10px;top:0!important;left:0!important}:host ::ng-deep ::ng-deep .mat-mdc-checkbox-touch-target{transform:unset}:host ::ng-deep .checkbox{margin-right:5px;padding-bottom:5px}:host ::ng-deep .checkbox-unselected-bar ::ng-deep .mat-checkbox-frame{border-color:#0000000a!important}.multi-bar-row{height:25px;cursor:pointer}.multi-bar-row--selected{font-weight:700;opacity:1}.multi-bar-row--selected .header{font-weight:700!important}.multi-bar-row--unselected:hover{opacity:.8}.multi-bar-row--pending{opacity:.5}.multi-bar-row__header{padding:0 6px;font-size:12px;vertical-align:middle}.multi-bar-row__header .header{display:flex;align-items:center;gap:5px;font-weight:400}.multi-bar-row__header .header-title{text-overflow:ellipsis;overflow:hidden;padding:0 3px}.multi-bar-row__data{padding:0 6px;vertical-align:middle}.multi-bar-row td,.multi-bar-row th{white-space:nowrap}.empty-cell{height:10px;display:flex;gap:4px;align-items:center}.empty{display:inline-block;width:5px;border:solid 1px rgba(0,0,0,.2)}.terms-head{width:80px}.column-head{width:70px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { displayCheckBox: [{
                type: Input
            }], hideSelection: [{
                type: Input
            }], metricsTableRow: [{
                type: Input
            }], useColorService: [{
                type: Input
            }], useColorFromData: [{
                type: Input
            }], colors: [{
                type: Input
            }], selected: [{
                type: Input
            }], pendingMode: [{
                type: Input
            }], powerBars: [{
                type: Input
            }], rowSelected: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljcy10YWJsZS1yb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYXJsYXMtY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvbWV0cmljcy10YWJsZS9tdWx0aS1iYXJzLXJvdy9tZXRyaWNzLXRhYmxlLXJvdy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9tZXRyaWNzLXRhYmxlL211bHRpLWJhcnMtcm93L21ldHJpY3MtdGFibGUtcm93LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBVXZFLE1BQU0sT0FBTyx3QkFBd0I7SUFhbkM7UUFUZ0Isb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBR3pCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLGNBQVMsR0FBZSxFQUFFLENBQUM7UUFDMUIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRzNCLENBQUM7SUFFakIsU0FBUztRQUNkLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBR00sT0FBTztRQUNaLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO1FBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQzsrR0EzQlUsd0JBQXdCO21HQUF4Qix3QkFBd0IsK1hDN0JyQyw2MkNBOEJBOzs0RkREYSx3QkFBd0I7a0JBTHBDLFNBQVM7K0JBQ0Usc0JBQXNCO3dEQUtoQixlQUFlO3NCQUE5QixLQUFLO2dCQUNVLGFBQWE7c0JBQTVCLEtBQUs7Z0JBQ1UsZUFBZTtzQkFBOUIsS0FBSztnQkFDVSxlQUFlO3NCQUE5QixLQUFLO2dCQUNVLGdCQUFnQjtzQkFBL0IsS0FBSztnQkFDVSxNQUFNO3NCQUFyQixLQUFLO2dCQUNVLFFBQVE7c0JBQXZCLEtBQUs7Z0JBQ1UsV0FBVztzQkFBMUIsS0FBSztnQkFDVSxTQUFTO3NCQUF4QixLQUFLO2dCQUNXLFdBQVc7c0JBQTNCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gR2lzYcOvYSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRS50eHQgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBHaXNhw69hIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvd2VyQmFyIH0gZnJvbSAnLi4vLi4vcG93ZXJiYXJzL21vZGVsL3Bvd2VyYmFyJztcbmltcG9ydCB7IE1ldHJpY3NUYWJsZVJvdyB9IGZyb20gJy4uL21vZGVsL21ldHJpY3MtdGFibGUnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FybGFzLW11bHRpLWJhcnMtcm93JyxcbiAgdGVtcGxhdGVVcmw6ICcuL21ldHJpY3MtdGFibGUtcm93LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWV0cmljcy10YWJsZS1yb3cuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNZXRyaWNzVGFibGVSb3dDb21wb25lbnQge1xuICBASW5wdXQoKSBwdWJsaWMgZGlzcGxheUNoZWNrQm94OiBib29sZWFuO1xuICBASW5wdXQoKSBwdWJsaWMgaGlkZVNlbGVjdGlvbjogYm9vbGVhbjtcbiAgQElucHV0KCkgcHVibGljIG1ldHJpY3NUYWJsZVJvdzogTWV0cmljc1RhYmxlUm93O1xuICBASW5wdXQoKSBwdWJsaWMgdXNlQ29sb3JTZXJ2aWNlID0gZmFsc2U7XG4gIEBJbnB1dCgpIHB1YmxpYyB1c2VDb2xvckZyb21EYXRhID0gZmFsc2U7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb2xvcnM6IHN0cmluZ1tdO1xuICBASW5wdXQoKSBwdWJsaWMgc2VsZWN0ZWQ6IGJvb2xlYW47IC8vIHRyaWdnZXIgY2hhbmdlIGRldGVjdGlvblxuICBASW5wdXQoKSBwdWJsaWMgcGVuZGluZ01vZGUgPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIHBvd2VyQmFyczogUG93ZXJCYXJbXSA9IFtdO1xuICBAT3V0cHV0KCkgcHVibGljIHJvd1NlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljIHNlbGVjdFJvdygpIHtcbiAgICB0aGlzLnVwZGF0ZVJvd1N0YXRlKCk7XG4gIH1cblxuXG4gIHB1YmxpYyBvbkNoZWNrKCkge1xuICAgIHRoaXMudXBkYXRlUm93U3RhdGUoKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVSb3dTdGF0ZSgpe1xuICAgIHRoaXMubWV0cmljc1RhYmxlUm93LnNlbGVjdGVkID0gIXRoaXMubWV0cmljc1RhYmxlUm93LnNlbGVjdGVkO1xuICAgIHRoaXMucm93U2VsZWN0ZWQuZW1pdCh0aGlzLm1ldHJpY3NUYWJsZVJvdy50ZXJtKTtcbiAgfVxuXG4gIC8qKiBUT0RPIDogdGhlIHNlbGVjdGlvbiBzdGF0ZSBzaG91bGQgYmUgc2F2ZWQgYW4gcHJvcGFnYXRlZCB0byB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICovXG59XG4iLCI8dHIgKm5nSWY9XCIhbWV0cmljc1RhYmxlUm93Py5zZWxlY3RlZCB8fCAhaGlkZVNlbGVjdGlvblwiIFtuZ0NsYXNzXT1cIntcbidtdWx0aS1iYXItcm93LS11bnNlbGVjdGVkJzogIW1ldHJpY3NUYWJsZVJvdz8uc2VsZWN0ZWQsXG4nbXVsdGktYmFyLXJvdy0tc2VsZWN0ZWQnOiBtZXRyaWNzVGFibGVSb3c/LnNlbGVjdGVkLFxuJ211bHRpLWJhci1yb3ctLXBlbmRpbmcnOiAhbWV0cmljc1RhYmxlUm93Py5zZWxlY3RlZCAmJiBwZW5kaW5nTW9kZVxufVwiIChjbGljayk9XCJzZWxlY3RSb3coKVwiIGNsYXNzPVwibXVsdGktYmFyLXJvd1wiPlxuICA8dGggY2xhc3M9XCJ0ZXJtcy1oZWFkXCIgc2NvcGU9XCJyb3dcIiBjbGFzcz1cIm11bHRpLWJhci1yb3dfX2hlYWRlclwiPlxuICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJcIj5cbiAgICAgIDxzZWN0aW9uICpuZ0lmPVwiZGlzcGxheUNoZWNrQm94XCIgIChjbGljayk9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcIj5cbiAgICAgICAgPG1hdC1jaGVja2JveCBbY2hlY2tlZF09XCJtZXRyaWNzVGFibGVSb3c/LnNlbGVjdGVkXCIgKGNoYW5nZSk9XCJvbkNoZWNrKClcIj48L21hdC1jaGVja2JveD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiaGVhZGVyLXRpdGxlXCIgW21hdFRvb2x0aXBdPVwibWV0cmljc1RhYmxlUm93Py50ZXJtXCI+XG4gICAgICAgICAgIHt7bWV0cmljc1RhYmxlUm93Py50ZXJtIHwgdXBwZXJjYXNlfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgPC90aD5cbiAgPHRkICBjbGFzcz1cImNvbHVtbi1oZWFkXCIgY2xhc3M9XCJtdWx0aS1iYXItcm93X19kYXRhXCIgKm5nRm9yPVwibGV0IHBvd2VyQmFyIG9mIHBvd2VyQmFyc1wiPlxuICAgIDxkaXY+XG4gICAgPGFybGFzLXBvd2VyYmFyIFt1c2VDb2xvckZyb21EYXRhXT1cInVzZUNvbG9yRnJvbURhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgIFt1c2VDb2xvclNlcnZpY2VdPVwidXNlQ29sb3JTZXJ2aWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cInBvd2VyQmFyLmNvdW50ICE9PSBudWxsICYmIHBvd2VyQmFyLmNvdW50ICE9PSB1bmRlZmluZWQ7IGVsc2Ugbm9EYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICBbcG93ZXJiYXJdPVwicG93ZXJCYXJcIj48L2FybGFzLXBvd2VyYmFyPlxuICAgICAgPG5nLXRlbXBsYXRlICNub0RhdGE+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eS1jZWxsXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlbXB0eVwiPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVtcHR5XCI+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9kaXY+XG4gIDwvdGQ+XG48L3RyPlxuIl19