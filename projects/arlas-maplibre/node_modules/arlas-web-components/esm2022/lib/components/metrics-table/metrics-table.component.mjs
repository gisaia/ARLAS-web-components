/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PowerBar } from '../powerbars/model/powerbar';
import * as tinycolor from 'tinycolor2';
import { ArlasColorService } from '../../services/color.generator.service';
import * as metricTableJsonSchema from './metrics-table.schema.json';
import * as i0 from "@angular/core";
import * as i1 from "../../services/color.generator.service";
import * as i2 from "@angular/material/tooltip";
import * as i3 from "@angular/common";
import * as i4 from "./multi-bars-row/metrics-table-row.component";
import * as i5 from "@ngx-translate/core";
import * as i6 from "../../pipes/get-collection-display-name/get-collection-display-name.pipe";
import * as i7 from "../../pipes/get-field-display-name/get-field-display-name.pipe";
export class MetricsTableComponent {
    constructor(colorService, cdr) {
        this.colorService = colorService;
        this.cdr = cdr;
        /**
           * @Input : Angular
           * @description Options about how to apply filters on metrics table
           * - value : The default value.
           *           if 'Eq', the selected line is included in the ARLAS filter.
           *           if 'Neq', the selected line is excluded in the ARLAS filter.
           * - display: Whether to display a switcher between 'Eq' and 'Neq' or keep the default operator all the time
           */
        this.filterOperator = {
            value: 'Eq',
            display: true
        };
        /**
         * @Output : Angular
         * @description Emits the filter operator
         */
        this.filterOperatorEvent = new EventEmitter();
        /**
         * @Input : Angular
         * @description Whether to allow colorizing the bar according to its term or not using keysToColors
         */
        this.useColorService = false;
        /**
         * @Input : Angular
         * @description Choose how to apply colors to the table. By column : all the bars in same column will have the same color.
         * By row : all the bars in the same row, will have the same color.
         */
        this.applyColorTo = 'column';
        /**
         * @description Allow to select a row by a checkbox
         */
        this.selectWithCheckbox = true;
        /**
         * @description Allow to select display mode for headers.
         */
        this.headerDisplayMode = 'chip';
        /**
         * @description Normalise bars progression based on the maximum value of each column OR of the whole table
         */
        this.normaliseBy = 'table';
        this.showRowField = true;
        this.onSelect = new EventEmitter();
        // keep it time complexity o(1) with get.
        /** Map of <term-list.of.powerbars.corresponding.to.this.term.> */
        this.powerBarsMap = new Map();
        this.selectedKeys = new Set();
        this.selectedRows = new Map();
        this.pendingMode = false;
        this.titleAreDifferent = true;
        // preserve order of insertion
        this.originalOrder = (a, b) => 0;
        this.colorService.changekeysToColors$.subscribe(() => {
            this.powerBarsMap.forEach(powerbarsRow => {
                powerbarsRow.forEach(p => {
                    if (this.useColorService) {
                        this.defineColor(p.term);
                    }
                });
            });
        });
    }
    ngOnInit() {
        if (this.metricsTable) {
            this.updateSelectedTermWithDefaultValue();
            this.buildPowerBars();
            this.buildHeaders();
        }
    }
    ngOnChanges(changes) {
        if (changes.metricsTable) {
            if (this.metricsTable !== undefined && this.metricsTable !== null) {
                this.ngOnInit();
            }
        }
        if (changes.selectedTerms) {
            this.updateSelection(this.selectedTerms);
        }
    }
    buildHeaders() {
        this.uniqueTitles = [];
        let previousId = '';
        let nextIndex = 0;
        this.metricsTable.header.forEach((header, i) => {
            header.color = this.defineColor(header.title);
            const currentId = header.title + header.rowfield;
            if (currentId !== previousId) {
                header.span = 1;
                this.uniqueTitles.push(header);
                nextIndex++;
                previousId = currentId;
            }
            else {
                this.uniqueTitles[nextIndex - 1].span++;
            }
        });
        this.titleAreDifferent = this.uniqueTitles.length === this.metricsTable?.data[0]?.data.length;
    }
    updateSelectedTermWithDefaultValue() {
        if (this.selectedTerms && this.selectedTerms.length > 0) {
            this.selectedTerms.forEach(selectedTerm => {
                this.selectedKeys.add(selectedTerm);
            });
        }
        this.togglePendingMode();
    }
    buildPowerBars() {
        this.powerBarsMap.clear();
        this.clearAll();
        this.metricsTable.data?.forEach((merticsRow, rowIndex) => {
            this.powerBarsMap.set(merticsRow.term, []);
            merticsRow.data.forEach((item, i) => {
                let powerBar;
                if (this.applyColorTo === 'row') {
                    powerBar = new PowerBar(merticsRow.term, merticsRow.term, item?.value);
                }
                else {
                    const header = this.metricsTable.header[i];
                    powerBar = new PowerBar(header.title, header.title, item?.value);
                }
                if (item) {
                    let maxValue;
                    if (this.normaliseBy === 'table') {
                        maxValue = item.maxTableValue;
                    }
                    else {
                        maxValue = item.maxColumnValue;
                    }
                    powerBar.progression = (item.value / maxValue) * 100;
                }
                if (this.useColorService) {
                    powerBar.color = this.defineColor(powerBar.term);
                }
                if (this.selectedKeys.has(merticsRow.term)) {
                    merticsRow.selected = true;
                    this.selectedRows.set(merticsRow.term, merticsRow);
                }
                this.powerBarsMap.get(merticsRow.term).push(powerBar);
            });
        });
    }
    updateSelection(keys) {
        this.selectedKeys = new Set(keys);
        this.clearAll();
        keys.forEach(key => this.updateSelectedRow(key));
        this.togglePendingMode();
    }
    clearAll() {
        this.metricsTable?.data?.forEach(row => row.selected = false);
        this.selectedRows.clear();
    }
    addTermToSelectedList(key) {
        this.updateSelectedRow(key);
        this.updateSelectedTerm(key);
        this.togglePendingMode();
    }
    updateSelectedTerm(key) {
        if (this.selectedKeys.has(key)) {
            this.selectedKeys.delete(key);
        }
        else {
            this.selectedKeys.add(key);
        }
        this.onSelect.emit(this.selectedKeys);
    }
    updateSelectedRow(key) {
        const row = this.metricsTable.data.find(row => row.term === key);
        if (this.selectedRows.has(key)) {
            row.selected = false;
            this.selectedRows.delete(key);
        }
        else if (row) {
            row.selected = true;
            this.selectedRows.set(key, row);
        }
        else {
            /** If we select a row that does not exists, it means we data is not  */
        }
    }
    togglePendingMode() {
        this.pendingMode = this.selectedKeys.size !== 0;
    }
    trackByFn(index, item) {
        return item.term; // Use the 'id' property as the unique identifier
    }
    defineColor(key) {
        const rgbaColor = tinycolor.default(this.colorService.getColor(key, this.keysToColors, this.colorsSaturationWeight)).toRgb();
        return this.getPowerbarColor(rgbaColor);
    }
    getPowerbarColor(rgbaColor) {
        return 'rgba(' + [rgbaColor.r, rgbaColor.g, rgbaColor.b, 0.7].join(',') + ')';
    }
    static getJsonSchema() {
        return metricTableJsonSchema;
    }
    setOperator(op) {
        if (this.filterOperator.value !== op) {
            this.filterOperator.value = op;
            this.filterOperatorEvent.next(op);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableComponent, deps: [{ token: i1.ArlasColorService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: MetricsTableComponent, selector: "arlas-metrics-table", inputs: { metricsTable: "metricsTable", filterOperator: "filterOperator", selectedTerms: "selectedTerms", keysToColors: "keysToColors", useColorService: "useColorService", applyColorTo: "applyColorTo", colorsSaturationWeight: "colorsSaturationWeight", selectWithCheckbox: "selectWithCheckbox", headerDisplayMode: "headerDisplayMode", normaliseBy: "normaliseBy", showRowField: "showRowField" }, outputs: { filterOperatorEvent: "filterOperatorEvent", onSelect: "onSelect" }, viewQueries: [{ propertyName: "header", first: true, predicate: ["tableHeader"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"tools\">\n  <div *ngIf=\"filterOperator && filterOperator?.display\" class=\"include_exclude\">\n    <div class=\"operation\" [class.selected_operation]=\"filterOperator?.value === 'Eq'\" (click)=\"setOperator('Eq')\">\n      {{'include' | translate}}</div>\n    <div class=\"operation\" [class.selected_operation]=\"filterOperator?.value === 'Neq'\" (click)=\"setOperator('Neq')\">\n      {{'exclude' | translate}}</div>\n  </div>\n  <div *ngIf=\"filterOperator && !filterOperator?.display && filterOperator?.value === 'Neq'\" class=\"include_exclude\">\n    <div class=\"operation\" [class.exclude]=\"filterOperator?.value === 'Neq'\">{{'exclude' | translate}}</div>\n  </div>\n</div>\n<div class=\"table-overflow-wrapper\">\n  <table class=\"multi-bar\">\n    <thead #tableHeader>\n      <!-- Title area -->\n      <tr>\n        <th class=\"terms-head\"></th>\n        <ng-container *ngIf=\"titleAreDifferent; else displayOneTitle\">\n          <th class=\"multi-bar__header-indicator\" *ngFor=\"let header of metricsTable?.header; let i = index\">\n            <div>\n              <div class=\"container\">\n                <div *ngIf=\"headerDisplayMode === 'chip' || headerDisplayMode === 'full'\" class=\"header-indicator\"\n                  [style]=\"{'background': header.color}\" [matTooltip]=\"header.title | getCollectionDisplayName |  translate\"></div>\n                <div class=\"separator\" *ngIf=\"headerDisplayMode === 'full'\"></div>\n                <div class=\"multi-bar__header-title-with-indicator\" [matTooltip]=\"header.title | getCollectionDisplayName |  translate\"\n                  *ngIf=\"headerDisplayMode === 'title' || headerDisplayMode === 'full'\">{{ header.title | getCollectionDisplayName | translate }}\n                </div>\n              </div>\n              <div class=\"multi-bar__header-rowfield\" [matTooltip]=\"header.rowfield | translate\" *ngIf=\"showRowField\">{{\n                header.rowfield | getFieldDisplayName | translate }}</div>\n\n            </div>\n          </th>\n        </ng-container>\n        <ng-template #displayOneTitle>\n          <th *ngFor=\"let header of uniqueTitles\" class=\"multi-bar__header-indicator\"\n            [style.width.px]=\"header.span * 70\" [attr.colspan]=\"header.span\">\n            <div class=\"container\">\n              <div *ngIf=\"headerDisplayMode === 'chip' || headerDisplayMode === 'full'\" class=\"header-indicator\"\n                [style]=\"{'background': header.color}\" [matTooltip]=\"header.title | getCollectionDisplayName | translate\"></div>\n              <div class=\"separator\" *ngIf=\"headerDisplayMode === 'full'\"></div>\n              <div class=\"multi-bar__header-title-with-indicator\" [matTooltip]=\"header.title | getCollectionDisplayName | translate\"\n                *ngIf=\"headerDisplayMode === 'title' || headerDisplayMode === 'full'\">{{ header.title | getCollectionDisplayName | translate }}\n              </div>\n            </div>\n            <div class=\"multi-bar__header-rowfield\" [matTooltip]=\"header.rowfield | translate\" *ngIf=\"showRowField\">\n              {{header.rowfield | getFieldDisplayName | translate}}</div>\n          </th>\n        </ng-template>\n      </tr>\n      <!-- Sub Title area -->\n      <tr>\n        <th class=\"terms-head\"></th>\n        <th class=\"column-head multi-bar__header\" *ngFor=\"let header of metricsTable?.header; let i = index\">\n          <div *ngIf=\"header.metric !== 'count'\"\n            [matTooltip]=\"'METRIC_COLUMN_TITLE' | translate:  { metric: 'METRIC_COLUMN_' + header.metric | translate, field : header.subTitle | getFieldDisplayName | translate }\"\n            class=\"multi-bar__header-item multi-bar__header-item-title\">\n            {{'METRIC_COLUMN_TITLE' | translate: { metric: 'METRIC_COLUMN_' + header.metric | translate, field :\n            header.subTitle | getFieldDisplayName |\n            translate } }}\n          </div>\n          <div *ngIf=\"header.metric === 'count'\" [matTooltip]=\"'COUNT_COLUMN_TITLE' | translate\"\n            class=\"multi-bar__header-item multi-bar__header-item-title\">\n            {{'COUNT_COLUMN_TITLE' | translate }}\n          </div>\n        </th>\n      </tr>\n    </thead>\n    <ng-container *ngFor=\"let item of metricsTable?.data; let index = index;trackBy: trackByFn\">\n      <arlas-multi-bars-row *ngIf=\"item?.selected\" [metricsTableRow]=\"item\" [useColorFromData]=\"false\"\n        [hideSelection]=\"false\" [useColorService]=\"useColorService\" [powerBars]=\"powerBarsMap.get(item.term)\"\n        [displayCheckBox]=\"selectWithCheckbox\" (rowSelected)=\"addTermToSelectedList($event)\">\n      </arlas-multi-bars-row>\n    </ng-container>\n    <arlas-multi-bars-row *ngFor=\"let row of metricsTable?.data; let index = index;trackBy: trackByFn\"\n      [metricsTableRow]=\"row\" [selected]=\"row.selected\" [hideSelection]=\"true\" [useColorFromData]=\"false\"\n      [useColorService]=\"useColorService\" [powerBars]=\"powerBarsMap.get(row.term)\"\n      [displayCheckBox]=\"selectWithCheckbox\" [pendingMode]=\"pendingMode\" (rowSelected)=\"addTermToSelectedList($event)\">\n    </arlas-multi-bars-row>\n  </table>\n</div>", styles: ["@charset \"UTF-8\";:host{min-width:200px;display:block;height:100%}.tools .include_exclude{display:flex;align-items:baseline}.tools .include_exclude .operation{font-size:12px;color:#aaa;border-radius:3px;font-weight:700;margin-right:5px;cursor:pointer;padding-bottom:3px}.tools .include_exclude .selected_operation{color:#555;font-weight:700}.tools .include_exclude .exclude{color:#555;font-weight:700;cursor:unset}.table-overflow-wrapper{overflow-x:auto;overflow-y:auto;height:100%;max-width:100%}.container{display:flex;align-items:center}.header-indicator{height:10px;width:10px;display:inline-block;border-radius:10px;margin-left:2px}.separator{margin:0 2px;display:inline-block}.multi-bar{font-size:12px;border-spacing:0;width:100%;table-layout:fixed;max-height:100%;position:relative;border-collapse:collapse}.multi-bar thead{position:sticky;background:#fff;top:0;z-index:1}.multi-bar thead .terms-head{width:80px}.multi-bar thead .column-head{width:70px}.multi-bar td,.multi-bar th{white-space:nowrap}.multi-bar__header{font-size:12px;padding:0 6px 6px;text-align:center;vertical-align:bottom;border-bottom:1px solid #dadada;cursor:pointer}.multi-bar__header-indicator{padding:6px 0;text-align:center;line-height:12px;border-right:2px solid white;background:#e5e5e554;box-sizing:border-box}.multi-bar__header-title{font-size:12px;overflow:hidden;text-overflow:ellipsis}.multi-bar__header-title-with-indicator{font-size:12px;overflow:hidden;text-overflow:ellipsis;width:calc(100% - 20px)}.multi-bar__header-rowfield{font-weight:200;margin:2px auto auto;overflow:hidden;text-overflow:ellipsis}.multi-bar__header-item{font-weight:400;margin:0 auto;word-wrap:break-word;text-align:center}.multi-bar__header-item-title{max-height:50px;overflow:hidden;text-overflow:ellipsis}::-webkit-scrollbar{width:3px!important;height:4px!important;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}\n"], dependencies: [{ kind: "directive", type: i2.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.MetricsTableRowComponent, selector: "arlas-multi-bars-row", inputs: ["displayCheckBox", "hideSelection", "metricsTableRow", "useColorService", "useColorFromData", "colors", "selected", "pendingMode", "powerBars"], outputs: ["rowSelected"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i6.GetCollectionDisplayNamePipe, name: "getCollectionDisplayName" }, { kind: "pipe", type: i7.GetFieldDisplayNamePipe, name: "getFieldDisplayName" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-metrics-table', template: "<div class=\"tools\">\n  <div *ngIf=\"filterOperator && filterOperator?.display\" class=\"include_exclude\">\n    <div class=\"operation\" [class.selected_operation]=\"filterOperator?.value === 'Eq'\" (click)=\"setOperator('Eq')\">\n      {{'include' | translate}}</div>\n    <div class=\"operation\" [class.selected_operation]=\"filterOperator?.value === 'Neq'\" (click)=\"setOperator('Neq')\">\n      {{'exclude' | translate}}</div>\n  </div>\n  <div *ngIf=\"filterOperator && !filterOperator?.display && filterOperator?.value === 'Neq'\" class=\"include_exclude\">\n    <div class=\"operation\" [class.exclude]=\"filterOperator?.value === 'Neq'\">{{'exclude' | translate}}</div>\n  </div>\n</div>\n<div class=\"table-overflow-wrapper\">\n  <table class=\"multi-bar\">\n    <thead #tableHeader>\n      <!-- Title area -->\n      <tr>\n        <th class=\"terms-head\"></th>\n        <ng-container *ngIf=\"titleAreDifferent; else displayOneTitle\">\n          <th class=\"multi-bar__header-indicator\" *ngFor=\"let header of metricsTable?.header; let i = index\">\n            <div>\n              <div class=\"container\">\n                <div *ngIf=\"headerDisplayMode === 'chip' || headerDisplayMode === 'full'\" class=\"header-indicator\"\n                  [style]=\"{'background': header.color}\" [matTooltip]=\"header.title | getCollectionDisplayName |  translate\"></div>\n                <div class=\"separator\" *ngIf=\"headerDisplayMode === 'full'\"></div>\n                <div class=\"multi-bar__header-title-with-indicator\" [matTooltip]=\"header.title | getCollectionDisplayName |  translate\"\n                  *ngIf=\"headerDisplayMode === 'title' || headerDisplayMode === 'full'\">{{ header.title | getCollectionDisplayName | translate }}\n                </div>\n              </div>\n              <div class=\"multi-bar__header-rowfield\" [matTooltip]=\"header.rowfield | translate\" *ngIf=\"showRowField\">{{\n                header.rowfield | getFieldDisplayName | translate }}</div>\n\n            </div>\n          </th>\n        </ng-container>\n        <ng-template #displayOneTitle>\n          <th *ngFor=\"let header of uniqueTitles\" class=\"multi-bar__header-indicator\"\n            [style.width.px]=\"header.span * 70\" [attr.colspan]=\"header.span\">\n            <div class=\"container\">\n              <div *ngIf=\"headerDisplayMode === 'chip' || headerDisplayMode === 'full'\" class=\"header-indicator\"\n                [style]=\"{'background': header.color}\" [matTooltip]=\"header.title | getCollectionDisplayName | translate\"></div>\n              <div class=\"separator\" *ngIf=\"headerDisplayMode === 'full'\"></div>\n              <div class=\"multi-bar__header-title-with-indicator\" [matTooltip]=\"header.title | getCollectionDisplayName | translate\"\n                *ngIf=\"headerDisplayMode === 'title' || headerDisplayMode === 'full'\">{{ header.title | getCollectionDisplayName | translate }}\n              </div>\n            </div>\n            <div class=\"multi-bar__header-rowfield\" [matTooltip]=\"header.rowfield | translate\" *ngIf=\"showRowField\">\n              {{header.rowfield | getFieldDisplayName | translate}}</div>\n          </th>\n        </ng-template>\n      </tr>\n      <!-- Sub Title area -->\n      <tr>\n        <th class=\"terms-head\"></th>\n        <th class=\"column-head multi-bar__header\" *ngFor=\"let header of metricsTable?.header; let i = index\">\n          <div *ngIf=\"header.metric !== 'count'\"\n            [matTooltip]=\"'METRIC_COLUMN_TITLE' | translate:  { metric: 'METRIC_COLUMN_' + header.metric | translate, field : header.subTitle | getFieldDisplayName | translate }\"\n            class=\"multi-bar__header-item multi-bar__header-item-title\">\n            {{'METRIC_COLUMN_TITLE' | translate: { metric: 'METRIC_COLUMN_' + header.metric | translate, field :\n            header.subTitle | getFieldDisplayName |\n            translate } }}\n          </div>\n          <div *ngIf=\"header.metric === 'count'\" [matTooltip]=\"'COUNT_COLUMN_TITLE' | translate\"\n            class=\"multi-bar__header-item multi-bar__header-item-title\">\n            {{'COUNT_COLUMN_TITLE' | translate }}\n          </div>\n        </th>\n      </tr>\n    </thead>\n    <ng-container *ngFor=\"let item of metricsTable?.data; let index = index;trackBy: trackByFn\">\n      <arlas-multi-bars-row *ngIf=\"item?.selected\" [metricsTableRow]=\"item\" [useColorFromData]=\"false\"\n        [hideSelection]=\"false\" [useColorService]=\"useColorService\" [powerBars]=\"powerBarsMap.get(item.term)\"\n        [displayCheckBox]=\"selectWithCheckbox\" (rowSelected)=\"addTermToSelectedList($event)\">\n      </arlas-multi-bars-row>\n    </ng-container>\n    <arlas-multi-bars-row *ngFor=\"let row of metricsTable?.data; let index = index;trackBy: trackByFn\"\n      [metricsTableRow]=\"row\" [selected]=\"row.selected\" [hideSelection]=\"true\" [useColorFromData]=\"false\"\n      [useColorService]=\"useColorService\" [powerBars]=\"powerBarsMap.get(row.term)\"\n      [displayCheckBox]=\"selectWithCheckbox\" [pendingMode]=\"pendingMode\" (rowSelected)=\"addTermToSelectedList($event)\">\n    </arlas-multi-bars-row>\n  </table>\n</div>", styles: ["@charset \"UTF-8\";:host{min-width:200px;display:block;height:100%}.tools .include_exclude{display:flex;align-items:baseline}.tools .include_exclude .operation{font-size:12px;color:#aaa;border-radius:3px;font-weight:700;margin-right:5px;cursor:pointer;padding-bottom:3px}.tools .include_exclude .selected_operation{color:#555;font-weight:700}.tools .include_exclude .exclude{color:#555;font-weight:700;cursor:unset}.table-overflow-wrapper{overflow-x:auto;overflow-y:auto;height:100%;max-width:100%}.container{display:flex;align-items:center}.header-indicator{height:10px;width:10px;display:inline-block;border-radius:10px;margin-left:2px}.separator{margin:0 2px;display:inline-block}.multi-bar{font-size:12px;border-spacing:0;width:100%;table-layout:fixed;max-height:100%;position:relative;border-collapse:collapse}.multi-bar thead{position:sticky;background:#fff;top:0;z-index:1}.multi-bar thead .terms-head{width:80px}.multi-bar thead .column-head{width:70px}.multi-bar td,.multi-bar th{white-space:nowrap}.multi-bar__header{font-size:12px;padding:0 6px 6px;text-align:center;vertical-align:bottom;border-bottom:1px solid #dadada;cursor:pointer}.multi-bar__header-indicator{padding:6px 0;text-align:center;line-height:12px;border-right:2px solid white;background:#e5e5e554;box-sizing:border-box}.multi-bar__header-title{font-size:12px;overflow:hidden;text-overflow:ellipsis}.multi-bar__header-title-with-indicator{font-size:12px;overflow:hidden;text-overflow:ellipsis;width:calc(100% - 20px)}.multi-bar__header-rowfield{font-weight:200;margin:2px auto auto;overflow:hidden;text-overflow:ellipsis}.multi-bar__header-item{font-weight:400;margin:0 auto;word-wrap:break-word;text-align:center}.multi-bar__header-item-title{max-height:50px;overflow:hidden;text-overflow:ellipsis}::-webkit-scrollbar{width:3px!important;height:4px!important;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}\n"] }]
        }], ctorParameters: () => [{ type: i1.ArlasColorService }, { type: i0.ChangeDetectorRef }], propDecorators: { metricsTable: [{
                type: Input
            }], filterOperator: [{
                type: Input
            }], filterOperatorEvent: [{
                type: Output
            }], selectedTerms: [{
                type: Input
            }], keysToColors: [{
                type: Input
            }], useColorService: [{
                type: Input
            }], applyColorTo: [{
                type: Input
            }], colorsSaturationWeight: [{
                type: Input
            }], selectWithCheckbox: [{
                type: Input
            }], headerDisplayMode: [{
                type: Input
            }], normaliseBy: [{
                type: Input
            }], showRowField: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], header: [{
                type: ViewChild,
                args: ['tableHeader']
            }] } });
//# sourceMappingURL=data:application/json;base64,