import { HttpClient, HttpHeaders } from '@angular/common/http';
import { OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { UntypedFormGroup } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export interface GetTilesInfo {
    url: string;
    zoomMax: number;
    zoomMin: number;
    bbox: Array<number>;
    md: Object;
}
export interface Dimension {
    identifier: string;
    abstract: string;
    values: Array<string>;
    startDate?: Date;
    endDate?: Date;
}
export interface LayerParam {
    styles: Array<string>;
    dimensions?: Array<Dimension>;
}
export declare class WmtsLayerManagertDialogComponent implements OnInit {
    private dialogRef;
    private http;
    layer: string;
    style: string;
    formGroup: UntypedFormGroup;
    imageToShow: any;
    isImageLoading: boolean;
    showError: boolean;
    previewLoading: boolean;
    launchPreview: boolean;
    layers: Array<string>;
    styles: Array<string>;
    metadata: Map<string, string>;
    dimensions: Array<Dimension>;
    data: Map<string, LayerParam>;
    isDimension: boolean;
    clickTopreview: Subject<any>;
    constructor(dialogRef: MatDialogRef<WmtsLayerManagertDialogComponent>, http: HttpClient);
    ngOnInit(): void;
    selectionChange(event: any): void;
    clickOnPreview(): void;
    previewUrl(url: string): void;
    private getImage;
    private createImageFromBlob;
    static ɵfac: i0.ɵɵFactoryDeclaration<WmtsLayerManagertDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WmtsLayerManagertDialogComponent, "arlas-wmts-layer-manager-dialog", never, { "layers": { "alias": "layers"; "required": false; }; "styles": { "alias": "styles"; "required": false; }; "metadata": { "alias": "metadata"; "required": false; }; "dimensions": { "alias": "dimensions"; "required": false; }; "data": { "alias": "data"; "required": false; }; "isDimension": { "alias": "isDimension"; "required": false; }; }, { "clickTopreview": "clickTopreview"; }, never, never, false, never>;
}
export declare class WmtsLayerManagerComponent implements OnInit, OnChanges {
    dialog: MatDialog;
    private http;
    dialogRef: MatDialogRef<WmtsLayerManagertDialogComponent>;
    /**
     * @Input : Angular
     * @description Url to access  getCapabilities endpoint of WMTS service
     */
    getCapaUrl: string;
    /**
     * @Input : Angular
     * @description Metadata of product to display (optional)
     */
    metadata: Map<string, string>;
    /**
     * @Input : Angular
     * @description Base url to access getTiles endpoint of WMTS service
     * If this input is  provided, we use it to build getTiles endpoint
     * If this input is not provided, we try to find it in getCapabilities response
     */
    getTilesBaseUrl: string;
    /**
    * @Input : Angular
    * @description Version of WMTS service
    * If this input is  provided, we use it to build getTiles endpoint
    * If this input is not provided, we try to find it in getCapabilities response
    */
    version: string;
    /**
    * @Input : Angular
    * @description Format of getTile response
    * If getCapabilities does not contains this format, we send an error
     */
    format: string;
    /**
    * @Input : Angular
    * @description Supported CRS code of WMTS service
    */
    supportedCRSCode: string[];
    /**
  * @Input : Angular
  * @description String date Format for time input
  */
    dateFormat: string;
    /**
    * @Input : Angular
    * @description Value to use in TileMatrixSet
    * If this input is  provided, we use it and we dont search TileMatrixSet in getCapabilities
    */
    tileMatrixSetIdenttifier: string;
    /**
     * @Output : Angular
     * @description Emit the information needed by a wmts client to view a product
     */
    getTilesInfoBus: Subject<GetTilesInfo>;
    /**
     * @Output : Angular
     * @description Emit all errors of the component
     */
    onError: Subject<Error>;
    errorInRun: boolean;
    isGetCapaLoading: boolean;
    constructor(dialog: MatDialog, http: HttpClient);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    run(header?: HttpHeaders, md?: {}, timeoutDuration?: number, numberOfRetry?: number): void;
    geLayerToData(xmlDoc: Document): Map<string, LayerParam>;
    getDimension(layerElement: Element): Array<Dimension>;
    getFormat(xmlDoc: Document, layer: string): string;
    getVersion(xmlDoc: any): string;
    getKVPBaseUrl(xmlDoc: Document): string;
    getTileMatrixSet(xmlDoc: Document, layer: string): string;
    getBbox(xmlDoc: Document, layer: string): Array<number>;
    getZoomMinMax(xmlDoc: Document): Array<number>;
    buildGetTileUrl(xmlDoc: Document, layer: string, style: string, dimensions?: Object): string;
    buildGetTileInfo(xmlDoc: Document, layer: string, style: string, md: Object, dimensions?: Object): GetTilesInfo;
    getDimensionsFromGroupValues(formGroup: any): Object;
    static ɵfac: i0.ɵɵFactoryDeclaration<WmtsLayerManagerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WmtsLayerManagerComponent, "arlas-wmts-layer-manager", never, { "getCapaUrl": { "alias": "getCapaUrl"; "required": false; }; "metadata": { "alias": "metadata"; "required": false; }; "getTilesBaseUrl": { "alias": "getTilesBaseUrl"; "required": false; }; "version": { "alias": "version"; "required": false; }; "format": { "alias": "format"; "required": false; }; "supportedCRSCode": { "alias": "supportedCRSCode"; "required": false; }; "dateFormat": { "alias": "dateFormat"; "required": false; }; "tileMatrixSetIdenttifier": { "alias": "tileMatrixSetIdenttifier"; "required": false; }; }, { "getTilesInfoBus": "getTilesInfoBus"; "onError": "onError"; }, never, never, false, never>;
}
