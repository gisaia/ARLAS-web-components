import { ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { Item } from '../model/item';
import { Action, ElementIdentifier } from '../utils/results.utils';
import { HttpClient } from '@angular/common/http';
import { DetailedDataRetriever } from '../utils/detailed-data-retriever';
import * as i0 from "@angular/core";
export declare class ResultDetailedGridComponent implements OnChanges, OnDestroy {
    private changeDetectorRef;
    private http;
    /**
     * @constant
     */
    SHOW_DETAILS: "Show details";
    /**
     * @constant
     */
    VIEW_IMAGE: "View in full screen";
    /**
     * @constant
     */
    SHOW_IMAGE: "Show image";
    /**
     * @constant
     */
    CLOSE_DETAILS: "Close details";
    private fullScreenViewer;
    /**
     * @Input
     * @description An object representing an Item and that contains the detailed data.
     */
    gridTile: Item;
    /**
     * @Input
     * @description Width of the detailed grid.
     */
    detailWidth: number;
    /**
     * @Input
     * @description Height of the detailed grid.
     */
    detailHeight: number;
    /**
     * @Input
     * @description Name of the id field.
     */
    idFieldName: string;
    /**
     * @Input
     * @description Whether the detail is visible.
     */
    isDetailShowed: boolean;
    /**
     * @Input
     * @description Whether display group with no detail.
     */
    showEmptyGroup: boolean;
    /**
     * @Input : Angular
     * @description Whether to use a http request to query detailed image instead of relying on img tag internal mechanism.
     */
    useHttp: boolean;
    /**
     * @Input : Angular
     * @description List of active actions per item.
    */
    activatedActionsPerItem: Map<string, Set<string>>;
    /**
    * @Input
    * @description A detailed-data-retriever object that implements
    * DetailedDataRetriever interface.
    */
    detailedDataRetriever: DetailedDataRetriever;
    /**
     * @Output
     * @description Emits the event of applying the specified action on the specified item.
     */
    actionOnItemEvent: Subject<{
        action: Action;
        elementidentifier: ElementIdentifier;
    }>;
    /**
   * @Output
   * @description Emits the event of closing details.
   */
    closeDetail: Subject<boolean>;
    imageViewer: ElementRef;
    isDetailedDataShowed: boolean;
    /**
     * @description The image source to display. Either is an url or the content of the image.
     */
    imgSrc: string | ArrayBuffer;
    /**
     * @description Whether the request for the image is being processed
     */
    isLoading: boolean;
    /**
     * @description In the case of multiple images, indicates which one is selected
     */
    currentImageIndex: number;
    /**
     * @description Whether the viewer is in full screen mode
     */
    isFullScreen: boolean;
    private viewer;
    constructor(changeDetectorRef: ChangeDetectorRef, http: HttpClient);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private getImage;
    private resetViewer;
    destroyViewer(isComponentDestroy?: boolean): void;
    showHideDetailedData(): void;
    closeDetailedData(): void;
    triggerActionOnItem(actionOnItem: {
        action: Action;
        elementidentifier: ElementIdentifier;
    }): void;
    showOverlay(): void;
    onPrevious(): void;
    onNext(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResultDetailedGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ResultDetailedGridComponent, "arlas-result-detailed-grid", never, { "gridTile": { "alias": "gridTile"; "required": false; }; "detailWidth": { "alias": "detailWidth"; "required": false; }; "detailHeight": { "alias": "detailHeight"; "required": false; }; "idFieldName": { "alias": "idFieldName"; "required": false; }; "isDetailShowed": { "alias": "isDetailShowed"; "required": false; }; "showEmptyGroup": { "alias": "showEmptyGroup"; "required": false; }; "useHttp": { "alias": "useHttp"; "required": false; }; "activatedActionsPerItem": { "alias": "activatedActionsPerItem"; "required": false; }; "detailedDataRetriever": { "alias": "detailedDataRetriever"; "required": false; }; }, { "actionOnItemEvent": "actionOnItemEvent"; "closeDetail": "closeDetail"; }, never, never, false, never>;
}
