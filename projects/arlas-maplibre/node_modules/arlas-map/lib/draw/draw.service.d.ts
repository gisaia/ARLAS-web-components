import { Feature, FeatureCollection } from '@turf/helpers';
import { AbstractDraw } from './AbstractDraw';
import { AoiDimensions, BboxDrawCommand, Corner } from './draw.models';
import * as i0 from "@angular/core";
export declare class MapboxAoiDrawService {
    private mapDraw;
    private editionId;
    private registeringMode;
    private ids;
    private editAoiSource;
    editAoi$: import("rxjs").Observable<AoiDimensions>;
    private drawBboxSource;
    drawBbox$: import("rxjs").Observable<BboxDrawCommand>;
    /** Set to true when the user is drawing a bbox. */
    isDrawingBbox: boolean;
    /** Set to true when the user is drawing a circle. */
    isDrawingCircle: boolean;
    /** Set to true when the user is drawing a strip. */
    isDrawingStrip: boolean;
    /** Set to true when the user is drawing a polygon. */
    isDrawingPolygon: boolean;
    /** Set to true when the user is in simple draw mode. */
    isInSimpleDrawMode: boolean;
    /** Set to true when the drawn geometry is selected. */
    isDrawSelected: boolean;
    isReady: boolean;
    constructor();
    isDrawing(): boolean;
    drawBbox(fCorner: Corner, sCorner: Corner): void;
    setDraw(mapboxDraw: AbstractDraw): void;
    /**
     * Add new features to the mapboxdraw object.
     * @param fc Featurecollection to be added to mapboxdraw object.
     * @param deleteOld if true, the mapboxdraw object is purged first, before adding the new given feature collection.
     */
    addFeatures(fc: FeatureCollection<GeoJSON.Geometry>, deleteOld?: boolean): void;
    /** Deletes all the features from Mapboxdraw object */
    deleteAll(): void;
    /** Deletes all the features from Mapboxdraw object that have not been saved */
    deleteUnregisteredFeatures(): void;
    /** Returns the area of the given feature */
    calculateArea(feature: Feature): number;
    /** Returns the width x height of the given feature's envelope */
    calculateEnvelopeDimension(feature: Feature): [number, number];
    /** on selection of a drawn polygon, we get its corresponding id. */
    private onSelectionChange;
    private hasFeatures;
    /** Triggered on deletion of feature(s).
     * - Removes the deleted feature(s) from this service's register.
     * - Stops emitting Aoi dimension info.
     * */
    private onDelete;
    private onStop;
    /**
     * This event is triggered :
     * - after draw.update
     * - after draw.delete
     * - on adding/deleting features from mapboxdraw object.
     */
    private onRender;
    emitStartBBox(): void;
    /** Emits dimension info of the given feature.*/
    emitDimensions(feature: Feature): void;
    /** Stops emitting Aoi dimension info */
    endDimensionsEmission(): void;
    /** Mapbox lacks a method to get the identifier of a new feature that is being drawn and not yet created
     * this method detects this feature on 'draw.render' event.
    */
    private getUnregistredFeatures;
    /** registers the identifiers of each drawn polygon in this service. */
    private registerAll;
    /** Unregisters the given feature id in this service. */
    private unregister;
    /** Registers the given feature id in this service. */
    private register;
    /** Gets the given feature from MapboxDraw object. */
    private getFeature;
    /** Checks if the given feature has enough coordinates to represent an area (polygon) */
    private isArea;
    /** Checks if the given feature has enough coordinates to represent a line */
    private isLine;
    /**
     * Chck if its a valid circle
     * @param feature
     */
    isValidCircle(feature: any): boolean;
    isValidPolygon(feature: any): boolean;
    isPolygon(feature: any): boolean;
    isCircle(feature: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapboxAoiDrawService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MapboxAoiDrawService>;
}
