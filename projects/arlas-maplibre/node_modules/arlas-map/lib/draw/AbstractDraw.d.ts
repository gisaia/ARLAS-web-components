import MapboxDraw from '@mapbox/mapbox-gl-draw';
import { AbstractArlasMapGL } from '../map/AbstractArlasMapGL';
import { Feature, FeatureCollection, Geometry } from '@turf/helpers';
export type DrawEvents = 'draw.create' | 'draw.delete' | 'draw.combine' | 'draw.uncombine' | 'draw.update' | 'draw.selectionchange' | 'draw.modechange' | 'draw.render' | 'draw.actionable' | 'draw.edit.saveInitialFeature' | 'draw.onClick' | 'draw.onStart' | 'draw.onStop' | 'draw.invalidGeometry';
export type DrawModes = 'SIMPLE_SELECT' | 'DRAW_CIRCLE' | 'DIRECT_SELECT' | 'DRAW_LINE_STRING' | 'DRAW_POLYGON' | 'DRAW_POINT' | 'DRAW_RADIUS_CIRCLE' | 'DRAW_STRIP' | 'DIRECT_STRIP' | 'DRAW_RECTANGLE' | 'STATIC';
export interface DrawEventsInterface {
    onDrawCreate: (...args: any[]) => void;
    onDrawUpdate: (...args: any[]) => void;
    onDrawDelete: (...args: any[]) => void;
    onDrawOnClick: (...args: any[]) => void;
    onDrawOnStart: (...args: any[]) => void;
    onDrawOnStop: (...args: any[]) => void;
    onDrawInvalidGeometry: (...args: any[]) => void;
    onDrawEditSaveInitialFeature: (...args: any[]) => void;
    onDrawSelectionchange: (...args: any[]) => void;
    onDrawModeChange: (...args: any[]) => void;
}
export declare class AbstractDraw implements DrawEventsInterface {
    protected config: any;
    arlasMap: AbstractArlasMapGL;
    enabled: boolean;
    drawProvider: MapboxDraw;
    constructor(config: any, enabled: boolean, map: AbstractArlasMapGL);
    onAdd(map: any): any;
    onRemove(map: any): any;
    setMode(drawModes: DrawModes, replaceMode: any): void;
    getAllFeatures(): any;
    onDrawCreate(fn: (e: any) => void): void;
    onDrawDelete(fn: (e: any) => void): void;
    onDrawEditSaveInitialFeature(fn: (e: any) => void): void;
    onDrawInvalidGeometry(fn: (e: any) => void): void;
    onDrawModeChange(fn: (e: any) => void): void;
    onDrawOnClick(fn: (e: any) => void): void;
    onDrawOnStart(fn: (e: any) => void): void;
    onDrawOnStop(fn: (e: any) => void): void;
    onDrawSelectionchange(fn: (e: any) => void): void;
    onDrawUpdate(fn: (e: any) => void): void;
    getMode(modes: DrawModes): any;
    on(event: DrawEvents, func: (e: any) => void): void;
    add(feature: Feature<Geometry> | FeatureCollection<GeoJSON.Geometry>): void;
    get(featureId: string): Feature | undefined;
    delete(ids: string | Array<string>): this;
    deleteAll(): this;
    set(featureCollection: FeatureCollection): Array<string>;
    trash(): this;
    combineFeatures(): this;
    uncombineFeatures(): this;
    getCurrentMode(): string;
    getFeatureIdsAt(point: {
        x: number;
        y: number;
    }): Array<string>;
    getSelectedIds(): Array<string>;
    getSelected(): any;
    getAll(): any;
    getSelectedFeatures(): any;
    setFeatureProperty(featureId: string, property: string, value: any): this;
    changeMode(mode: string, opt?: any): this;
}
