import { PipeTransform } from '@angular/core';
import { CollectionService } from 'arlas-web-components';
import * as i0 from "@angular/core";
export interface LegendParamsResult {
    translateKey: string;
    field?: string;
    normalized?: string;
    normalizedKey?: string;
    metric?: string;
    format: ParamsResultType;
}
/**
 * full :
 *  return all interpolated values to construct a title legend
 *  ex: Average of boats (normalized)
 * metricField :
 *  return metric and field interpolated values.
 *  ex: Average of boats
 * metricNormalised :
 *   return metric and normalized interpolated values.
 *   ex: count (normalized)
 * noMetric :
 *   return field and normalized interpolated values.
 *   ex: Boat visibility (normalized)
 * original
 *   return the original key to be translated. This case appear only if we fail
 *   to parse of if we have an error.
 */
export type ParamsResultType = 'full' | 'metricField' | 'metricNormalised' | 'noMetric' | 'original';
export declare class FormatLegendPipe implements PipeTransform {
    private readonly collectionService;
    constructor(collectionService: CollectionService);
    private readonly metrics;
    transform(field: string): LegendParamsResult | null;
    buildInterpolatedParams(params: LegendParamsResult, metric: string, field: string, normalized: string, normalizedKey: string): LegendParamsResult;
    getMetric(valueSplit: string[]): string;
    getField(valueSplit: string[]): string;
    isMetrics(metrics: string): boolean;
    containsMetrics(value: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormatLegendPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<FormatLegendPipe, "formatLegend", false>;
}
