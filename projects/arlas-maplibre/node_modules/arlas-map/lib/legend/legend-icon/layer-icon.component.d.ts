import { ElementRef, AfterViewInit, SimpleChanges, OnChanges } from '@angular/core';
import { Legend } from '../legend.config';
import * as i0 from "@angular/core";
export declare class LayerIconComponent implements AfterViewInit, OnChanges {
    layer: any;
    colorLegend: Legend;
    strokeColorLegend: Legend;
    widthLegend: Legend;
    radiusLegend: Legend;
    lineDasharray: Array<number>;
    layerIconElement: ElementRef;
    constructor();
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private drawIcons;
    static ɵfac: i0.ɵɵFactoryDeclaration<LayerIconComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LayerIconComponent, "arlas-layer-icon", never, { "layer": { "alias": "layer"; "required": false; }; "colorLegend": { "alias": "colorLegend"; "required": false; }; "strokeColorLegend": { "alias": "strokeColorLegend"; "required": false; }; "widthLegend": { "alias": "widthLegend"; "required": false; }; "radiusLegend": { "alias": "radiusLegend"; "required": false; }; "lineDasharray": { "alias": "lineDasharray"; "required": false; }; }, {}, never, never, false, never>;
}
/**
 * Draws the rectangles icon for cluster mode
 * @param svgNode SVG element on which we append the rectangles using d3.
 * @param colorLegend Color legend, to give the drawn icons rectangles the same color on the map
 * @param strokeColorLegend Color legend, to give the drawn icons rectangles the same stroke color on the map
 */
export declare function drawClusterFillIcon(svgNode: SVGElement, colorLegend: Legend, strokeColorLegend: Legend): void;
/**
 * Draws the rectangles icon for feature and feature-metric modes
 * @param svgNode SVG element on which we append the rectangles using d3.
 * @param colorLegend Color legend, to give the drawn icons rectangles the same color on the map
 * @param strokeColorLegend Color legend, to give the drawn icons rectangles the same stroke color on the map
 * @param [isMetric=false] Whether the layer depends on a metric
 */
export declare function drawFeatureFillIcon(svgNode: SVGElement, colorLegend: Legend, strokeColorLegend: Legend, isMetric?: boolean): void;
export declare function getOneColor(legend: Legend): string;
export declare function drawTextIcon(svgNode: SVGElement, colorLegend: Legend): void;
/**
 * draws the heatmap icon for cluster mode
 * @param svgNode SVG element on which we append the heamap circles using d3.
 * @param colorLegend Color legend, to give the drawn icons circles the same color on the map
 * @param small Whether to create a small version of the icon
 */
export declare function drawHeatmapIcon(svgNode: SVGElement, colorLegend: Legend, small: boolean): void;
/**
 * Draws the line icon for feature mode
 * @param svgNode SVG element on which we append the line using d3.
 * @param colorLegend Color legend, to give the drawn icons line the same color on the map
 * @param dashArray Array representing the dash pattern
 * @param [isMetric=false] Whether the layer depends on a metric
 */
export declare function drawLineIcon(svgNode: SVGElement, colorLegend: Legend, dashArray: Array<number>, isMetric?: boolean): void;
/**
 * Draws the circle icon for feature mode
 * @param svgNode SVG element on which we append the circles using d3.
 * @param colorLegend Color legend, to give the drawn icons circles the same color on the map
 * @param strokeColorLegend Color legend, to give the drawn icons circles the same stroke color on the map
 * @param [isMetric=false] Whether the layer depends on a metric
 */
export declare function drawFeatureCircleIcon(svgNode: SVGElement, colorLegend: Legend, strokeColorLegend: Legend, isMetric?: boolean): void;
/**
 * draws the circle icon for cluster mode
 * @param svgNode SVG element on which we append the circles using d3.
 * @param colorLegend Color legend, to give the drawn icons circles the same color on the map
 * @param strokeColorLegend Color legend, to give the drawn icons circles the same stroke color on the map
 * @param addBlur Whether to add blur to the drawn circles
 */
export declare function drawClusterCircleIcon(svgNode: SVGElement, colorLegend: Legend, strokeColorLegend: Legend, addBlur?: boolean): void;
export declare function populateListFromLegend(list: Array<string | number>, legend: Legend): void;
export declare function getClusterFillColors(colorLegend: Legend): string[];
