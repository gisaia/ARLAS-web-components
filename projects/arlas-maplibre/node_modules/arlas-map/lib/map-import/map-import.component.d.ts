import { ElementRef } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Subject } from 'rxjs';
import { Feature } from 'geojson';
import { ArlasMapComponent } from '../arlas-map.component';
import { ArlasMapFrameworkService } from '../arlas-map-framework.service';
import * as i0 from "@angular/core";
export declare class MapImportDialogComponent {
    private dialogRef;
    private data;
    displayError: boolean;
    isRunning: boolean;
    fitResult: boolean;
    errorMessage: string;
    errorThreshold: string;
    currentFile: File;
    importType: string;
    allowedFileExtension: string;
    allowedImportType: string[];
    wktContent: string;
    SHP: string;
    KML: string;
    WKT: string;
    GEOJSON: string;
    file: Subject<File>;
    importRun: Subject<any>;
    fileInput: ElementRef;
    constructor(dialogRef: MatDialogRef<MapImportDialogComponent>, data: {
        allowedImportType: Array<string>;
        defaultFitResult?: boolean;
    });
    onFileChange(files: FileList): void;
    import(): void;
    onTextChange(): void;
    changeType(): void;
    onCancel(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapImportDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapImportDialogComponent, "arlas-map-import-dialog", never, {}, { "file": "file"; "importRun": "importRun"; }, never, never, false, never>;
}
export type AllowedImportGeometry = 'Polygon' | 'Point';
export declare class MapImportComponent<L, S, M> {
    dialog: MatDialog;
    mapService: ArlasMapFrameworkService<L, S, M>;
    SHP: string;
    KML: string;
    WKT: string;
    GEOJSON: string;
    SELF_INTERSECT: "Geometry is not valid due to self-intersection";
    PARSING_ISSUE: "Problem parsing input file";
    FILE_TOO_LARGE: "File is too large";
    GEOMETRY_INVALID: "Geometry is not valid";
    TOO_MANY_VERTICES: "Too many vertices in a polygon";
    TOO_MANY_FEATURES: "Too many features";
    TIMEOUT: "Timeout";
    currentFile: File;
    dialogRef: MatDialogRef<MapImportDialogComponent>;
    reader: FileReader;
    private tooManyVertex;
    private fitResult;
    private jszip;
    private readonly SOURCE_NAME_POLYGON_LABEL;
    private emptyData;
    private featureIndex;
    mapComponent: ArlasMapComponent<L, S, M>;
    maxVertexByPolygon: number;
    maxFeatures?: number;
    maxFileSize?: number;
    maxLoadingTime: number;
    allowedImportType: string[];
    allowedGeometryObjectType: Array<AllowedImportGeometry>;
    imported: Subject<any>;
    error: Subject<any>;
    private _currentAllowedGeom;
    constructor(dialog: MatDialog, mapService: ArlasMapFrameworkService<L, S, M>);
    promiseTimeout(ms: any, promise: any): Promise<any>;
    private buildAllowedGeometryForImportType;
    private getAllowedGeom;
    openDialog(defaultFitResult?: boolean): void;
    import(importType: string, content?: string): void;
    buildFeature(geom: any, feature: Feature | any, geometryType?: string, bbox?: boolean): {
        type: string;
        geometry: {
            coordinates: any;
            type: any;
        };
        properties: any;
    };
    handleSimpleGeometry(feature: any, centroids: any, importedGeojson: any): void;
    handleMultiGeometry(feature: any, centroids: any, importedGeojson: any): void;
    handleGeometryCollection(feature: any, centroids: any, importedGeojson: any): void;
    handleFeatureCollection(feature: any, centroids: any, importedGeojson: any): void;
    /** *************/
    /** *** KML *****/
    /** *************/
    readKmlFile(): Promise<string | ArrayBuffer>;
    private resolveFileFromGzip;
    processAllKml(): Promise<void>;
    /** *************/
    /** * GEOJSON ***/
    /** *************/
    readJsonFile(): Promise<string | ArrayBuffer>;
    processJson(): Promise<void>;
    /** *************/
    /** ** SHAPE ****/
    /** *************/
    readZipFile(): Promise<unknown>;
    private areFilesInvalid;
    processAllShape(): Promise<void>;
    /** *************/
    /** **  WKT  ****/
    /** *************/
    processWKT(wkt: string): Promise<void>;
    /** *************/
    /** ** TOOLS ****/
    /** *************/
    clearPolygons(): void;
    addFeature(feature: any, centroides: Array<any>, importedGeojson: {
        type: string;
        features: Array<any>;
    }, index: number): void;
    setImportedData(importedResult: any): void;
    calcCentroid(feature: any): any;
    private throwError;
    private formatBytes;
    private computeGeojson;
    private handleGeom;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapImportComponent<any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapImportComponent<any, any, any>, "arlas-map-import", never, { "mapComponent": { "alias": "mapComponent"; "required": false; }; "maxVertexByPolygon": { "alias": "maxVertexByPolygon"; "required": false; }; "maxFeatures": { "alias": "maxFeatures"; "required": false; }; "maxFileSize": { "alias": "maxFileSize"; "required": false; }; "maxLoadingTime": { "alias": "maxLoadingTime"; "required": false; }; "allowedImportType": { "alias": "allowedImportType"; "required": false; }; "allowedGeometryObjectType": { "alias": "allowedGeometryObjectType"; "required": false; }; }, { "imported": "imported"; "error": "error"; }, never, never, false, never>;
}
