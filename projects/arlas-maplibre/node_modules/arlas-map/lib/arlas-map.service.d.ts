import { ArlasMapFrameworkService } from './arlas-map-framework.service';
import { FeatureCollection } from '@turf/helpers';
import { AbstractArlasMapGL } from './map/AbstractArlasMapGL';
import { ArlasMapSource } from './map/model/sources';
import { VisualisationSetConfig } from './map/model/visualisationsets';
import { ArlasDataLayer, ExternalEvent, MapLayers } from './map/model/layers';
import { ElementIdentifier } from 'arlas-web-components';
import * as i0 from "@angular/core";
/**
 * This service propose a set of method to execute the ArlasMapComponent logic.
 * Do not confuse with ArlasMapFrameworkService that is more dedicated to a framework logic.
 */
export declare abstract class AbstractArlasMapService<L, S, M> {
    mapFrameworkService: ArlasMapFrameworkService<L, S, M>;
    /** @description List of arlas data sources declared in configuration */
    dataSources: S[];
    /** @description Map of ARLAS data layers and their ids (the ids being the key of the map).  */
    layersMap: Map<string, ArlasDataLayer>;
    /**
     * @description Object to describe visualisation sets
     * - visulisations: a map of <visualisation name, set of layers identifiers>;
     * - status: a map of <visualisation name, visibility status>
     */
    visualisationsSets: {
        visualisations: Map<string, Set<string>>;
        status: Map<string, boolean>;
    };
    constructor(mapFrameworkService: ArlasMapFrameworkService<L, S, M>);
    /**
     * @description Declares the arlas data sources provided in configuration.
     * @param dataSourcesIds Identifiers of arlas data sources.
     * @param data A feature collection.
     * @param map Map instance.
     */
    abstract declareArlasDataSources(dataSourcesIds: Set<string>, data: FeatureCollection<GeoJSON.Geometry>, map: AbstractArlasMapGL): void;
    abstract declareLabelSources(labelSourceId: string, data: FeatureCollection<GeoJSON.Geometry>, map: AbstractArlasMapGL): void;
    abstract declareBasemapSources(basemapSources: Array<ArlasMapSource<any>>, map: AbstractArlasMapGL): void;
    abstract setLayersMap(mapLayers: MapLayers<ArlasDataLayer>, layers?: Array<ArlasDataLayer>): any;
    updateLabelSources(labelSourceId: string, data: FeatureCollection<GeoJSON.Geometry>, map: AbstractArlasMapGL): void;
    /**
     * @description Inits a map of visulisation sets from the configuration.
     * @param visualisationSetsConfig Visualisation set configuration.
     */
    initVisualisationSet(visualisationSetsConfig: VisualisationSetConfig[]): void;
    initMapLayers(mapLayers: MapLayers<ArlasDataLayer>, map: AbstractArlasMapGL): void;
    abstract moveArlasDataLayer(map: AbstractArlasMapGL, layer: any, layersMap: Map<string, ArlasDataLayer>, beforeId?: string): any;
    /**
     * Add a layer to the map instance. This method handles any specific treatment when adding ARLAS data.
     * For instance, in mapbox and maplibre implementation, adding a fill layer needs to add systematically the stroke layer.
     * @param map Map instance.
     * @param layer A layer. It could be a layer identifier OR a layer object (it will depend on the framwork implementation).
     * @param layersMap Map of ARLAS data layers and their ids (the ids being the key of the map).
     * @param beforeId Identifier of an already added layer. The layers of layersMap are added under this 'beforeId' layer.
     */
    abstract addArlasDataLayer(map: AbstractArlasMapGL, layer: ArlasDataLayer | string, layersMap: Map<string, ArlasDataLayer>, beforeId?: string): any;
    addArlasDataLayers(visualisationSetsConfig: VisualisationSetConfig[], mapLayers: MapLayers<ArlasDataLayer>, map: AbstractArlasMapGL): void;
    private _addExternalEventLayers;
    reorderLayers(visualisationSetsConfig: VisualisationSetConfig[], map: AbstractArlasMapGL): void;
    protected abstract reorderDrawLayers(map: AbstractArlasMapGL): any;
    abstract filterLayers(mapLayers: MapLayers<ArlasDataLayer>, map: AbstractArlasMapGL, visibilityCondition: boolean, visibilityFilter: Array<any>, visibilityEvent: ExternalEvent, collection?: string): void;
    selectFeatures(mapLayers: MapLayers<ArlasDataLayer>, map: AbstractArlasMapGL, elementToSelect: Array<ElementIdentifier>): void;
    highlightFeature(mapLayers: MapLayers<ArlasDataLayer>, map: AbstractArlasMapGL, featureToHightLight: {
        isleaving: boolean;
        elementidentifier: ElementIdentifier;
    }): void;
    selectFeaturesByCollection(mapLayers: MapLayers<ArlasDataLayer>, map: AbstractArlasMapGL, features: Array<ElementIdentifier>, collection: string): void;
    updateLayoutVisibility(visualisationName: string, visualisationSetsConfig: VisualisationSetConfig[], map: AbstractArlasMapGL): Set<string>;
    updateVisibility(visibilityStatus: Map<string, boolean>, visualisationSetsConfig: VisualisationSetConfig[], map: AbstractArlasMapGL): void;
    findVisualisationSetLayer(visuName: string, visualisationSetsConfig: VisualisationSetConfig[]): string[];
    setVisualisationSetLayers(visuName: string, layers: string[], visualisationSetsConfig: VisualisationSetConfig[]): void;
    abstract updateMapStyle(map: AbstractArlasMapGL, l: any, ids: Array<string | number>, sourceName: string): void;
    abstract getVisibleIdsFilter(map: AbstractArlasMapGL, layer: any, ids: Array<string | number>): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractArlasMapService<any, any, any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AbstractArlasMapService<any, any, any>>;
}
