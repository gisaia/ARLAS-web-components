import { ArlasBasemaps } from './basemaps.model';
import { BasemapStyle } from './basemap.config';
import { Observable, Subject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { AbstractArlasMapGL } from '../map/AbstractArlasMapGL';
import { ArlasMapFrameworkService } from '../arlas-map-framework.service';
import * as i0 from "@angular/core";
export declare abstract class BasemapService<L, S, M> {
    protected http: HttpClient;
    protected mapFrameworkService: ArlasMapFrameworkService<L, S, M>;
    protected POWERED_BY_ARLAS: string;
    protected LOCAL_STORAGE_BASEMAPS: string;
    protected basemapChangedSource: Subject<void>;
    basemapChanged$: Observable<void>;
    basemaps: ArlasBasemaps;
    protected protomapBasemapAddedSource: Subject<boolean>;
    protomapBasemapAdded$: Observable<boolean>;
    protected constructor(http: HttpClient, mapFrameworkService: ArlasMapFrameworkService<L, S, M>);
    setBasemaps(basemaps: ArlasBasemaps): void;
    abstract addProtomapBasemap(map: AbstractArlasMapGL): any;
    protected addPMtilesToSource(map: AbstractArlasMapGL, pmtilesSource: any): void;
    protected addProtomapLayerToMap(map: AbstractArlasMapGL, styleFile: any): void;
    notifyProtomapAddition(): void;
    abstract removeProtomapBasemap(map: AbstractArlasMapGL): any;
    abstract declareProtomapProtocol(map: AbstractArlasMapGL): void;
    cloneStyleFile<T>(selected: any): T;
    buildInitStyle<StyleType, LayerSpec>(clonedStyleFile: StyleType): StyleType;
    abstract getInitStyle(selected: BasemapStyle): any;
    abstract fetchSources$(): Observable<readonly any[]>;
    protected abstract getStyleFile(b: BasemapStyle): Observable<any>;
    abstract setBasemap(s: any, newBasemap: BasemapStyle, map: AbstractArlasMapGL, options?: any): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<BasemapService<any, any, any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BasemapService<any, any, any>>;
}
