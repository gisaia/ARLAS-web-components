/** All the map controls configuration
 * These interfaces are generic.
 */
export type ControlPosition = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
export interface IconConfig {
    path: string;
    recolorable?: boolean;
}
export interface ConfigControls {
    enable: boolean;
    position?: ControlPosition;
    config?: any;
    overrideEvent?: {
        event: any;
        fn: (e: any) => void;
    };
}
export interface PitchToggleConfigControls extends ConfigControls {
    enable: boolean;
    position?: ControlPosition;
    config: {
        bearing: number;
        pitch: number;
        minpitchzoom: number;
    };
    overrideEvent?: {
        event: any;
        fn: (e?: any) => void;
    };
}
export interface ControlsOption {
    mapAttribution?: ConfigControls;
    scale?: ConfigControls;
    pitchToggle?: PitchToggleConfigControls;
    navigationControl?: ConfigControls;
}
export interface DrawConfigControl extends ConfigControls {
    name?: string;
}
export interface DrawControlsOption {
    draw: {
        control: any;
        position?: ControlPosition;
    };
    addGeoBox: DrawConfigControl;
    removeAois: DrawConfigControl;
}
export declare class PitchToggle {
    bearing: number;
    pitch: number;
    minpitchzoom: number;
    map: any;
    btn: HTMLButtonElement;
    container: HTMLDivElement;
    image3D: string;
    image2D: string;
    btnClasses: string[];
    containerClasses: string[];
    constructor(bearing: any, pitch: any, minpitchzoom: any);
    protected _buildClasses(): void;
    onAdd(map: any): HTMLDivElement;
    onRemove(): void;
}
export declare class ControlButton {
    map: any;
    btn: HTMLButtonElement;
    container: HTMLDivElement;
    icon: any;
    name: any;
    private tooltip;
    btnClasses: string[];
    containerClasses: string[];
    constructor(name: string, tooltip?: string);
    protected _buildClasses(): void;
    onAdd(map: any): HTMLDivElement;
    onRemove(): void;
}
