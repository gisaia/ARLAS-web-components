export interface ArlasDataLayer {
    id: string;
    type: string;
    minzoom?: number;
    maxzoom?: number;
    source?: string;
    metadata?: LayerMetadata;
    paint: ArlasPaint;
    layout?: any;
    filter?: any;
}
export interface MapLayers<T> {
    layers: Array<T>;
    externalEventLayers?: Array<ExternalEventLayer>;
    events: LayerEvents;
}
export interface LayerEvents {
    onHover: Set<string>;
    emitOnClick: Set<string>;
    zoomOnClick: Set<string>;
}
export interface ExternalEventLayer {
    id: string;
    on: ExternalEvent;
}
export declare enum ExternalEvent {
    select = "select",
    hover = "hover"
}
export interface FillStroke {
    width?: PaintValue;
    opacity?: number;
    color?: PaintValue;
}
/** Metadata of a layer containing info about
 * - the collection
 * - whether it has an interaction with the resultlist (scrollable)
 * - geomType for circle heatmap.
 */
export interface LayerMetadata {
    collection?: string;
    collectionDisplayName?: string;
    stroke?: FillStroke;
    isScrollableLayer?: boolean;
    hiddenProps?: MetadataHiddenProps;
    showLegend?: boolean;
}
export interface MetadataHiddenProps {
    geomType?: string;
}
export type PaintValue = Array<string | Array<string> | number> | PaintColor | string | number;
export interface ArlasPaint {
    [key: string]: PaintValue;
}
export interface PaintColor {
    property: string;
    type: string;
    stops: Array<Array<string>>;
}
export declare const HOVER_LAYER_PREFIX = "arlas-hover-";
export declare const SELECT_LAYER_PREFIX = "arlas-select-";
export declare const FILLSTROKE_LAYER_PREFIX = "arlas-fill_stroke-";
export declare const SCROLLABLE_ARLAS_ID = "scrollable_arlas_id:";
export declare const ARLAS_ID = "arlas_id:";
export declare const ARLAS_VSET = ":arlas_vset:";
/** FROM V15.0.0 layer ids look like 'arlas_id:NAME:timestamp
   * This pipe extracts the 'NAME' in that id
   */
export declare function getLayerName(id: string): string;
