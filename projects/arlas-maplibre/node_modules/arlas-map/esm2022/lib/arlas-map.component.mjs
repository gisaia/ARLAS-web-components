/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TranslateService } from '@ngx-translate/core';
import { finalize, fromEvent, Subject, takeUntil } from 'rxjs';
import { ArlasMapFrameworkService } from './arlas-map-framework.service';
import * as mapJsonSchema from './arlas-map.schema.json';
import { AbstractArlasMapService } from './arlas-map.service';
import { BasemapService } from './basemaps/basemap.service';
import { ArlasBasemaps } from './basemaps/basemaps.model';
import { ArlasDrawComponent } from './draw/arlas-draw.component';
import { MapboxAoiDrawService } from './draw/draw.service';
import { CROSS_LAYER_PREFIX, RESET_BEARING, ZOOM_IN, ZOOM_OUT } from './map/AbstractArlasMapGL';
import { ARLAS_VSET, getLayerName } from './map/model/layers';
import * as i0 from "@angular/core";
import * as i1 from "./draw/draw.service";
import * as i2 from "./basemaps/basemap.service";
import * as i3 from "@ngx-translate/core";
import * as i4 from "./arlas-map-framework.service";
import * as i5 from "./arlas-map.service";
import * as i6 from "@angular/material/icon";
import * as i7 from "@angular/material/slide-toggle";
import * as i8 from "@angular/material/tooltip";
import * as i9 from "@angular/cdk/drag-drop";
import * as i10 from "@angular/common";
import * as i11 from "./coordinates/coordinates.component";
import * as i12 from "./basemaps/basemap.component";
import * as i13 from "./legend/legend.component";
import * as i14 from "./draw/arlas-draw.component";
import * as i15 from "arlas-web-components";
import * as i16 from "./arlas-map.pipe";
/** L: a layer class/interface.
 *  S: a source class/interface.
 *  M: a Map configuration class/interface.
 */
export class ArlasMapComponent {
    constructor(drawService, basemapService, translate, mapFrameworkService, mapService) {
        this.drawService = drawService;
        this.basemapService = basemapService;
        this.translate = translate;
        this.mapFrameworkService = mapFrameworkService;
        this.mapService = mapService;
        /** Whether the legend is visible (open) or not.*/
        this.legendOpen = true;
        /** Used to clear geojson sources. */
        this.emptyData = {
            'type': 'FeatureCollection',
            'features': []
        };
        /** Whether the list of basemaps is shown. */
        this.showBasemapList = false;
        /** Visibility status of each visualisation set*. */
        this.visibilityStatus = new Map();
        this._onDestroy$ = new Subject();
        /** ANGULAR INPUTS */
        /** @description Html identifier given to the map container (it's a div ;))*/
        this.id = 'mapgl';
        /** @description An object with north,east,south,west properies which represent an offset in pixels */
        /** Origin is top-left and x-axis is west to east and y-axis north to south.*/
        this.offset = { north: 0, east: 0, south: 0, west: 0 };
        /** --- SCALE & COORDINATES */
        /** @description Whether the map scale is displayed. */
        this.displayScale = true;
        /** @description Maximim width in pixels that the map scale could take. */
        this.maxWidthScale = 100;
        /** @description Unit display for the map scale. */
        this.unitScale = 'metric';
        /** @description Whether to display the coordinates of the mouse while moving. */
        this.displayCurrentCoordinates = false;
        /** @description If true, the coordinates values are wrapped between -180 and 180. */
        this.wrapLatLng = true;
        /** @description List of available basemaps. */
        this.basemapStyles = new Array();
        /** --- INITIAL MAP VIEW : ZOOMs, CENTER, BOUNDS */
        /** @description Zoom of the map when it's initialized. */
        this.initZoom = 2;
        /** @description Max zoom of the map. */
        this.maxZoom = 22;
        /** @description Min zoom of the map. */
        this.minZoom = 0;
        /** @description Coordinates of the map's center when it's first loaded. */
        this.initCenter = [2.1972656250000004, 45.706179285330855];
        /** @description The padding added in the top-left and bottom-right corners of a map container that shouldn't be accounted */
        /** for when setting the view to fit bounds.*/
        this.fitBoundsOffSet = [0, 0];
        /**  @description Padding value applied around a fitBounds to fully show the area targeted. */
        this.fitBoundsPadding = 10;
        /** @description The maximum zoom level so that the bounds fit the map view. */
        this.fitBoundsMaxZoom = 22;
        /** @description Subject to which the component subscribes to redraw on the map the `data` of the given `source`. */
        this.redrawSource = new Subject();
        /** --- DRAW */
        /**  @description Options object for draw tools : https://github.com/mapbox/mapbox-gl-draw/blob/master/docs/API.md#options */
        this.drawOption = {};
        /** @description Features drawn at component start */
        this.drawData = ({ ...this.emptyData });
        /** @description Whether the draw tools are activated. */
        this.drawButtonEnabled = false;
        /** @description Whether the drawing buffer is activated */
        /** If true, the map's canvas can be exported to a PNG using map.getCanvas().toDataURL(). Default: false */
        this.preserveDrawingBuffer = false;
        /** --- ATTRIBUTION */
        /** @description Position of the map attribution. */
        this.mapAttributionPosition = 'bottom-right';
        /** --- LEGEND AND VISUALISATIONS */
        /** @description Subject of [collection, [field, legendData]] map. The map subscribes to it to keep */
        /** the legend updated with the data displayed on the map. */
        this.legendUpdater = new Subject();
        /** @description Subject of [layerId, boolean] map. The map subscribes to it to keep */
        /** the legend updated with the visibility of the layer.*/
        this.visibilityUpdater = new Subject();
        /** ANGULAR OUTPUTS */
        /** @description Emits true after the map is loaded and all sources & layers are added. */
        this.onMapLoaded = new Subject();
        /** @description Emits the map extent when the browser tab is closed/refreshed. */
        this.onMapClosed = new EventEmitter();
        /**
         * @deprecated
         * @description  Emits the event of moving the map. */
        this.onMove = new EventEmitter();
        /** @description Emits the visible visualisation sets' names */
        this.visualisations = new EventEmitter();
        /** @description Emits the features that were clicked on. */
        this.onFeatureClick = new EventEmitter();
        /** @description Emits the features that were hovered. */
        this.onFeatureHover = new EventEmitter();
        /** @description Emits the geojson of all aois added to the map. */
        this.onAoiChanged = new EventEmitter();
        /** @description Emits the the dimensions of the polygon/bbox that is being drawn. */
        this.onAoiEdit = new EventEmitter();
        /** @description Emits an event when the basemap has been changed by the user. */
        this.onBasemapChanged = new Subject();
        /** @description Emits which layers are displayed on the map. */
        this.legendVisibiltyStatus = new Subject();
        /** @description  Notifies that the user wants to download the selected layer */
        this.downloadSourceEmitter = new Subject();
        this.ICONS_BASE_PATH = 'assets/icons/';
        this.basemapService.protomapBasemapAdded$.pipe(takeUntilDestroyed())
            .subscribe(() => this.reorderLayers());
    }
    ngAfterViewInit() {
        /** init values */
        if (!this.initCenter) {
            this.initCenter = [0, 0];
        }
        if (this.initZoom === undefined || this.initZoom === null) {
            this.initZoom = 3;
        }
        if (this.maxZoom === undefined || this.maxZoom === null) {
            this.maxZoom = 23;
        }
        this.minZoom = this.minZoom ?? 0;
        /** BASEMAPS */
        if (this.defaultBasemapStyle && typeof this.defaultBasemapStyle.styleFile === 'string') {
            this.defaultBasemapStyle.url = this.defaultBasemapStyle.styleFile;
        }
        this.basemapStyles.forEach(bm => {
            if (typeof bm.styleFile === 'string') {
                bm.url = (bm.styleFile);
            }
        });
        this.basemapService.setBasemaps(new ArlasBasemaps(this.defaultBasemapStyle, this.basemapStyles));
        this.basemapService.fetchSources$()
            .pipe(finalize(() => this.declareMap()))
            .subscribe();
    }
    ngOnChanges(changes) {
        if (this.map && this.map.getMapProvider() !== undefined) {
            if (changes['boundsToFit'] !== undefined) {
                const newBoundsToFit = changes['boundsToFit'].currentValue;
                this.map.fitBounds(newBoundsToFit, {
                    maxZoom: this.fitBoundsMaxZoom,
                    offset: this.fitBoundsOffSet
                });
            }
            if (changes['featureToHightLight'] !== undefined
                && changes['featureToHightLight'].currentValue !== changes['featureToHightLight'].previousValue) {
                const featureToHightLight = changes['featureToHightLight'].currentValue;
                this.highlightFeature(featureToHightLight);
            }
            if (changes['featuresToSelect'] !== undefined
                && changes['featuresToSelect'].currentValue !== changes['featuresToSelect'].previousValue) {
                const featuresToSelect = changes['featuresToSelect'].currentValue;
                this.selectFeatures(featuresToSelect);
            }
        }
    }
    /** If transformRequest' @Input was not set, set a default value : a function that maintains the same url */
    initTransformRequest() {
        if (!this.transformRequest) {
            this.transformRequest = this.mapFrameworkService.getInitTransformRequest();
        }
    }
    /** Zooms on clicked feature from map mouse event e.
     * @param mouseEvent Map mouse event provided by the map instance.
     */
    zoomOnClick(mouseEvent) {
        const zoom = this.map.getZoom();
        let newZoom;
        if (zoom >= 0 && zoom < 3) {
            newZoom = 4;
        }
        else if (zoom >= 3 && zoom < 5) {
            newZoom = 5;
        }
        else if (zoom >= 5 && zoom < 7) {
            newZoom = 7;
        }
        else if (zoom >= 7 && zoom < 10) {
            newZoom = 10;
        }
        else if (zoom >= 10 && zoom < 11) {
            newZoom = 11;
        }
        else {
            newZoom = 12;
        }
        this.mapFrameworkService.flyTo(mouseEvent.lngLat.lat, mouseEvent.lngLat.lng, newZoom, this.map);
    }
    /**
     * Queries all rendered features on the position that was clicked on, on a layer; and emits those features.
     * @param mapLayerMouseEvent Map mouse event provided by a layer instance.
     */
    queryRender(mapLayerMouseEvent) {
        const hasCrossOrDrawLayer = this.mapFrameworkService.queryFeatures(mapLayerMouseEvent, this.map, CROSS_LAYER_PREFIX);
        if (!this.drawService.isDrawingBbox && !this.drawService.isDrawingPolygon
            && !this.drawService.isDrawingCircle && !this.drawService.isInSimpleDrawMode && !hasCrossOrDrawLayer) {
            this.onFeatureClick.next({ features: mapLayerMouseEvent.features, point: [mapLayerMouseEvent.lngLat.lng, mapLayerMouseEvent.lngLat.lat] });
        }
    }
    /** @description Adds the custom icons given in the component's input */
    addIcons() {
        if (this.icons) {
            this.icons.forEach(icon => {
                const iconName = icon.path.split('.')[0];
                const iconPath = this.ICONS_BASE_PATH + icon.path;
                const iconErrorMessage = 'The icon "' + this.ICONS_BASE_PATH + icon.path + '" is not found';
                this.mapFrameworkService.addImage(iconName, iconPath, this.map, iconErrorMessage, { 'sdf': icon.recolorable });
            });
        }
        this.mapFrameworkService.addImage('rotate', this.ICONS_BASE_PATH + 'rotate/01.png', this.map, 'Rotate not found');
        this.mapFrameworkService.addImage('resize', this.ICONS_BASE_PATH + 'resize/01.png', this.map, 'Resize not found');
    }
    /**
     * @description Creates the map instance and adds the basemap, arlas data
     * and starts listening to arlas data changes and layers visibility updates.
     * It also starts emiting map moveend event.
     */
    declareMap() {
        this.initTransformRequest();
        const config = {
            displayCurrentCoordinates: this.displayCurrentCoordinates,
            fitBoundsPadding: this.fitBoundsPadding,
            margePanForLoad: this.margePanForLoad,
            margePanForTest: this.margePanForTest,
            offset: this.offset,
            wrapLatLng: this.wrapLatLng,
            maxWidthScale: this.maxWidthScale,
            unitScale: this.unitScale,
            mapProviderOptions: {
                container: this.id,
                style: this.basemapService.getInitStyle(this.basemapService.basemaps.getSelected()),
                center: this.initCenter,
                zoom: this.initZoom,
                maxZoom: this.maxZoom,
                minZoom: this.minZoom,
                renderWorldCopies: true,
                preserveDrawingBuffer: this.preserveDrawingBuffer,
                locale: {
                    'NavigationControl.ZoomIn': this.translate.instant(ZOOM_IN),
                    'NavigationControl.ZoomOut': this.translate.instant(ZOOM_OUT),
                    'NavigationControl.ResetBearing': this.translate.instant(RESET_BEARING)
                },
                pitchWithRotate: false,
                transformRequest: this.transformRequest,
                attributionControl: false,
            },
            controls: {
                mapAttribution: {
                    enable: true,
                    position: this.mapAttributionPosition,
                    config: {
                        compact: false
                    }
                },
                scale: {
                    enable: this.displayScale
                },
                navigationControl: {
                    enable: true
                },
                pitchToggle: {
                    enable: true,
                    config: { bearing: -20, pitch: 70, minpitchzoom: 11 }
                }
            }
        };
        this.map = this.mapFrameworkService.createMap(config);
        fromEvent(window, 'beforeunload').subscribe(() => {
            this.onMapClosed.next(this.map.getMapExtend());
        });
        this.map.onCustomEvent('beforeOnLoadInit', () => {
            this.basemapService.declareProtomapProtocol(this.map);
            this.basemapService.addProtomapBasemap(this.map);
            this.addIcons();
            this.mapService.declareArlasDataSources(this.dataSources, this.emptyData, this.map);
            this.mapService.declareBasemapSources(this.mapSources, this.map);
            this.mapService.addArlasDataLayers(this.visualisationSetsConfig, this.mapLayers, this.map);
            this.listenToLayersEvents();
        });
        this.mapFrameworkService.onMapEvent('load', this.map, () => {
            if (this.mapLayers !== null) {
                this.visibilityUpdater.subscribe(visibilityStatus => {
                    this.mapService.updateVisibility(visibilityStatus, this.visualisationSetsConfig, this.map);
                });
            }
            this.onMapLoaded.next(true);
        });
        this.map.onMoveEnd(this.mapService.visualisationsSets).subscribe((moveResult => {
            this.onMove.next(moveResult);
        }));
        if (this.redrawSource) {
            this.redrawSource.pipe(takeUntil(this._onDestroy$)).subscribe(sd => {
                this.mapFrameworkService.setDataToGeojsonSource(this.mapFrameworkService.getSource(sd.source, this.map), {
                    'type': 'FeatureCollection',
                    'features': sd.data
                });
            });
        }
    }
    /**
     * @description Listens to events on mapLayers input (configured layers).
     */
    listenToLayersEvents() {
        /** Zooms on the clicked feature of the given layers. */
        this.mapLayers.events.zoomOnClick.forEach(layerId => {
            this.mapFrameworkService.onLayerEvent('click', this.map, layerId, (e) => this.zoomOnClick(e));
        });
        this.mapLayers.events.onHover.forEach(layerId => {
            /** Emits the hovered feature on mousemove. */
            this.mapFrameworkService.onLayerEvent('mousemove', this.map, layerId, (e) => this.onFeatureHover.next({ features: e.features, point: [e.lngLat.lng, e.lngLat.lat] }));
            /** Emits an empty object on mouse leaving a feature. */
            this.mapFrameworkService.onLayerEvent('mouseleave', this.map, layerId, (e) => this.onFeatureHover.next({}));
        });
        /** Emits the clicked on feature. */
        this.mapLayers.events.emitOnClick.forEach(layerId => {
            this.mapFrameworkService.onLayerEvent('click', this.map, layerId, (e) => this.queryRender(e));
        });
        const drawPolygonLayers = [
            'gl-draw-polygon-stroke-inactive',
            'gl-draw-polygon-stroke-active',
            'gl-draw-polygon-stroke-static'
        ].map(layer => ['.cold', '.hot']
            .map(id => layer.concat(id)))
            .reduce((p, ac) => ac.concat(p), []);
        /** Sets mouse cursor on drawn features */
        drawPolygonLayers.forEach(layerId => {
            this.mapFrameworkService.onLayerEvent('mousemove', this.map, layerId, (e) => this.mapFrameworkService.setMapCursor(this.map, 'pointer'));
            this.mapFrameworkService.onLayerEvent('mouseleave', this.map, layerId, (e) => {
                if (this.drawService.isDrawing()) {
                    this.mapFrameworkService.setMapCursor(this.map, 'crosshair');
                }
                else {
                    this.mapFrameworkService.setMapCursor(this.map, '');
                }
            });
        });
    }
    /** Sets the layers order according to the current order of `visualisationSetsConfig` list*/
    reorderLayers() {
        this.mapService.reorderLayers(this.visualisationSetsConfig, this.map);
    }
    /** @description Display the basemapswitcher */
    showBasemapSwitcher() {
        this.showBasemapList = true;
    }
    /** @description Emits event notifiying that the basemap has been changed */
    onChangeBasemapStyle() {
        this.onBasemapChanged.next(true);
    }
    /**
     * Updates the visibility status of the layer and emits that update.
     * @param visualisation visualisation set name
     * @param l layer id
     * @param visible whether the layer is enabled and visible in the visualisation set
     */
    emitLegendVisibility(visualisation, l, visible) {
        // Copy the map so the pipe updates the values
        this.visibilityStatus = new Map(this.visibilityStatus);
        this.visibilityStatus.set(visualisation + ARLAS_VSET + l, visible);
        this.legendVisibiltyStatus.next(this.visibilityStatus);
    }
    /**
     * @description Emits the visible visualisation set
     * @param visualisationName Name of the visualisation.
     */
    emitVisualisations(visualisationName) {
        const layers = this.mapService.updateLayoutVisibility(visualisationName, this.visualisationSetsConfig, this.map);
        this.visualisations.emit(layers);
        this.reorderLayers();
    }
    downloadLayerSource(downaload) {
        const downlodedSource = {
            layerId: downaload.layer.id,
            layerName: getLayerName(downaload.layer.id),
            collection: downaload.layer.metadata.collection,
            sourceName: downaload.layer.source,
            downloadType: downaload.downloadType
        };
        this.downloadSourceEmitter.next(downlodedSource);
    }
    /** puts the visualisation set list in the new order after dropping */
    drop(event) {
        moveItemInArray(this.visualisationSetsConfig, event.previousIndex, event.currentIndex);
        this.reorderLayers();
    }
    /** puts the layers list in the new order after dropping */
    dropLayer(event, visuName) {
        const layers = Array.from(this.mapService.findVisualisationSetLayer(visuName, this.visualisationSetsConfig));
        moveItemInArray(layers, event.previousIndex, event.currentIndex);
        this.mapService.setVisualisationSetLayers(visuName, layers, this.visualisationSetsConfig);
        this.reorderLayers();
    }
    hideBasemapSwitcher() {
        this.showBasemapList = false;
    }
    /**
     * Fit to given bounds. Options are for padding.
     * @param bounds Bounds of the map to fit to.
     */
    fitToPaddedBounds(bounds) {
        this.map.fitToPaddedBounds(bounds);
    }
    /**
     * Centers the map to the given latitude/longitude coordinates.
     * @param lngLat Latitude/longitude coordinates.
     */
    moveToCoordinates(lngLat) {
        this.map.setCenter(lngLat);
    }
    /** Highlights, in all data sources,the feature(s) having the given elementIdentifier */
    highlightFeature(featureToHightLight) {
        this.mapService.highlightFeature(this.mapLayers, this.map, featureToHightLight);
    }
    /** Selects, in all data sources,the feature(s) having the given elementIdentifier */
    selectFeatures(elementToSelect) {
        this.mapService.selectFeatures(this.mapLayers, this.map, elementToSelect);
    }
    /** Selects, in all data sources, all the features having the given elementIdentifiers and under the given collection.
     * @param features list of features identifiers.
     * @param collection data collection (metadata of the data source).
    */
    selectFeaturesByCollection(features, collection) {
        this.mapService.selectFeaturesByCollection(this.mapLayers, this.map, features, collection);
    }
    static getMapJsonSchema() {
        return mapJsonSchema;
    }
    /** Destroys all the components subscriptions. */
    ngOnDestroy() {
        if (this.map) {
            this.map.unsubscribeEvents();
        }
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    /** @description Enables bbox drawing mode.*/
    addGeoBox() {
        this.drawComponent.addGeoBox();
    }
    /**
     * @description Removes all the aois if none of them is selected. Otherwise it removes the selected one only
     */
    removeAois() {
        this.drawComponent.removeAois();
    }
    /** @description Deletes the selected drawn geometry. If no drawn geometry is selected, all geometries are deteleted */
    deleteSelectedItem() {
        this.drawComponent.deleteSelectedItem();
    }
    /**
     * @description Switches to a drawing mode of a DRAW_POLYGON, DRAW_CIRCLE or DRAW_RADIUS_CIRCLE.
     * @param mode Draw mode (DRAW_POLYGON, DRAW_CIRCLE or DRAW_RADIUS_CIRCLE). Default to DRAW_POLYGON
     * @param option Mapboxdraw option.
     */
    switchToDrawMode(mode, option) {
        this.drawComponent.switchToDrawMode(mode, option);
    }
    /**
     * @description Switches to direct_select mode.
     * @param option Mapboxdraw option.
     */
    switchToDirectSelectMode(option) {
        this.drawComponent.switchToDirectSelectMode(option);
    }
    /**
     * @description Switches to simple_select mode.
     * @param option Mapboxdraw option.
     */
    switchToEditMode() {
        this.drawComponent.switchToEditMode();
    }
    /**
     * @description Returns all the drawn polygons as wkt or geojson.
     * @param mode 'wkt' | 'geojson'
     * @returns Wkt string or Geojson object.
     */
    getAllPolygon(mode) {
        return this.drawComponent.getAllPolygon(mode);
    }
    /**
     * @description returns the selected polygon geometry in WKT or GeoJson given the mode
     * @param mode : 'wkt' | 'geojson'
     * @returns Wkt string or Geojson object.
     */
    getSelectedPolygon(mode) {
        return this.drawComponent.getSelectedPolygon(mode);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasMapComponent, deps: [{ token: i1.MapboxAoiDrawService }, { token: i2.BasemapService }, { token: i3.TranslateService }, { token: i4.ArlasMapFrameworkService }, { token: i5.AbstractArlasMapService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: ArlasMapComponent, selector: "arlas-map", inputs: { id: "id", offset: "offset", mapLayers: "mapLayers", displayScale: "displayScale", maxWidthScale: "maxWidthScale", unitScale: "unitScale", displayCurrentCoordinates: "displayCurrentCoordinates", wrapLatLng: "wrapLatLng", defaultBasemapStyle: "defaultBasemapStyle", basemapStyles: "basemapStyles", initZoom: "initZoom", maxZoom: "maxZoom", minZoom: "minZoom", initCenter: "initCenter", boundsToFit: "boundsToFit", fitBoundsOffSet: "fitBoundsOffSet", fitBoundsPadding: "fitBoundsPadding", fitBoundsMaxZoom: "fitBoundsMaxZoom", margePanForLoad: "margePanForLoad", margePanForTest: "margePanForTest", transformRequest: "transformRequest", featureToHightLight: "featureToHightLight", featuresToSelect: "featuresToSelect", mapSources: "mapSources", redrawSource: "redrawSource", dataSources: "dataSources", drawOption: "drawOption", drawData: "drawData", drawButtonEnabled: "drawButtonEnabled", drawPolygonVerticesLimit: "drawPolygonVerticesLimit", preserveDrawingBuffer: "preserveDrawingBuffer", mapAttributionPosition: "mapAttributionPosition", icons: "icons", legendUpdater: "legendUpdater", visibilityUpdater: "visibilityUpdater", visualisationSetsConfig: "visualisationSetsConfig" }, outputs: { onMapLoaded: "onMapLoaded", onMapClosed: "onMapClosed", onMove: "onMove", visualisations: "visualisations", onFeatureClick: "onFeatureClick", onFeatureHover: "onFeatureHover", onAoiChanged: "onAoiChanged", onAoiEdit: "onAoiEdit", onBasemapChanged: "onBasemapChanged", legendVisibiltyStatus: "legendVisibiltyStatus", downloadSourceEmitter: "downloadSourceEmitter" }, viewQueries: [{ propertyName: "drawComponent", first: true, predicate: ["drawComponent"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"map__container\">\n  <div class=\"map__visu-list\" *ngIf=\"visualisationSetsConfig?.length > 0\">\n    <div class=\"map__legend-button\" [matTooltipPosition]=\"'left'\" matTooltip=\"{{'Manage layers' | translate}}\">\n      <mat-icon (click)=\"legendOpen=!legendOpen\" (keyDown)=\"legendOpen=!legendOpen\">layers</mat-icon>\n    </div>\n    <div [hidden]=\"!legendOpen\" class=\"map__visu-list--container\" cdkDropList\n      (cdkDropListDropped)=\"drop($event)\">\n      <div cdkDrag class=\"map__visu-item\" *ngFor=\"let visu of visualisationSetsConfig\">\n        <div cdkDragHandle class=\"map__visu-title\">\n          <span class=\"map__visu-title-text\" [class.map__visu-title-text--disabled]=\"!visu.enabled\">\n            {{visu.name | translate}}</span>\n          <mat-slide-toggle [checked]=\"visu.enabled\" (change)=\"emitVisualisations(visu.name)\"\n            [matTooltip]=\"'show_layers' | translate\" [hideIcon]=\"true\"></mat-slide-toggle>\n        </div>\n        <div class=\"map__visu-content\" cdkDropList (cdkDropListDropped)=\"dropLayer($event, visu.name)\">\n          <div cdkDrag *ngFor=\"let l of visu.layers\" class=\"map__visu-layer\"\n            [class.cdk-visually-hidden]=\"((visu.name + ':arlas_vset:' + l) | getValue:visibilityStatus) !== true\">\n            <div cdkDragHandle class=\"map__visu-layer-drag\">\n              <mat-icon>drag_indicator</mat-icon>\n            </div>\n            <arlas-legend [collection]=\"l | getCollection: mapService.layersMap \" [enabled]=\"visu.enabled\"\n              [layer]=\"l | getValue: mapService.layersMap \" [zoom]=\"map?.zoom\"\n              (visibilityStatus)=\"emitLegendVisibility(visu.name, l, $event)\" [legendUpdater]=\"legendUpdater\"\n              [visibilityUpdater]=\"visibilityUpdater\"\n              (downloadSourceEmitter)=\"downloadLayerSource($event)\"></arlas-legend>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<arlas-coordinates *ngIf=\"displayCurrentCoordinates\" [currentLat]=\"map?.currentLat\" [currentLng]=\"map?.currentLng\"\n  (moveToCoordinates$)=\"moveToCoordinates($event)\"></arlas-coordinates>\n\n<arlas-basemap *ngIf=\"showBasemapList\" [mapSources]=\"mapSources\" [map]=\"map\" (mouseleave)=\"hideBasemapSwitcher()\"\n  (basemapChanged)=\"onChangeBasemapStyle()\"></arlas-basemap>\n\n\n<arlas-draw #drawComponent *ngIf=\"map\" [map]=\"map\" [emptyData]=\"emptyData\" [drawData]=\"drawData\"\n  [drawButtonEnabled]=\"drawButtonEnabled\" [drawOption]=\"drawOption\"\n  [drawPolygonVerticesLimit]=\"drawPolygonVerticesLimit\" [preserveDrawingBuffer]=\"preserveDrawingBuffer\"\n  (onAoiChanged)=\"onAoiChanged.emit($event)\"\n  (onAoiEdit)=\"onAoiEdit.emit($event)\"></arlas-draw>", styles: ["@charset \"UTF-8\";.map__container{width:100%;height:100%;position:absolute!important}.map__visu-list{position:absolute;display:flex;flex-direction:column;top:220px;right:7px;z-index:1;background:transparent;flex-wrap:wrap-reverse}.map__legend-button{cursor:pointer;margin-bottom:4px;border-radius:3px;background-color:#fff;width:30px;height:30px;padding:3px}.map__legend-button:hover{background-color:#f5f5f5}.map__visu-list--container{padding:1px 1px 3px;border-radius:2px;max-height:calc(100vh - 415px);overflow-y:auto;overflow-x:hidden}.map__visu-item{margin:1px;padding:unset;padding-right:3px;width:225px;border:.8px solid #ddd;background:#fff;border-radius:3px}.map__visu-title{display:flex;justify-content:space-between;padding:1px 5px 1px 0;font-weight:550;font-size:14px;cursor:grab;--mdc-switch-track-width: 24px;--mdc-switch-track-height: 5px;--mdc-switch-handle-width: 12px;--mdc-switch-state-layer-size: 0;--mat-switch-selected-handle-horizontal-margin: 0 1px}.map__visu-title:hover .map__visu-toggle .map__visu-drag{visibility:visible}.map__visu-title .mdc-switch__handle{--mat-switch-unselected-handle-size: 12px;--mat-switch-selected-handle-size: 12px;--mat-switch-pressed-handle-size: 12px;--mdc-switch-unselected-handle-color: lightgrey;--mdc-switch-unselected-focus-handle-color: lightgrey;--mdc-switch-unselected-hover-handle-color: lightgrey;--mdc-switch-unselected-pressed-handle-color: lightgrey}.map__visu-title-text{color:#333;padding:3px}.map__visu-title-text--disabled{color:#bbb}.map__visu-content{max-height:300px;overflow-y:auto;overflow-x:hidden}.map__visu-layer{background-color:#fff;position:relative;overflow:hidden}.map__visu-layer-drag{position:absolute;top:5px;left:0;display:flex;padding-left:3px}.map__visu-layer-drag mat-icon{font-size:18px;width:18px;height:18px;color:#999}.map__visu-layer:hover .map__visu-layer-drag{cursor:grab;z-index:2}.map__visu-layer:hover .map__visu-layer-drag mat-icon{color:#444}.draw-tooltip--hide{display:none}.draw-tooltip--show{display:block;position:fixed;overflow:hidden;font-size:.8em;background-color:#fff;border-radius:2px;padding:2px;box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}::-webkit-scrollbar{width:3px!important;height:4px!important;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}.cdk-drag-preview{box-sizing:border-box;font-size:.75em;border-radius:3px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-preview .map__visu-layer .map__visu-layer-drag mat-icon{color:#444}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.draw-control-disabled{display:none}\n"], dependencies: [{ kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i7.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon", "disabledInteractive"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { kind: "directive", type: i8.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "directive", type: i9.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i9.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i9.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "directive", type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i11.CoordinatesComponent, selector: "arlas-coordinates", inputs: ["currentLat", "currentLng"], outputs: ["moveToCoordinates$"] }, { kind: "component", type: i12.BasemapComponent, selector: "arlas-basemap", inputs: ["map", "mapSources"], outputs: ["basemapChanged", "blur"] }, { kind: "component", type: i13.LegendComponent, selector: "arlas-legend", inputs: ["layer", "collection", "zoom", "enabled", "legendUpdater", "visibilityUpdater"], outputs: ["visibilityStatus", "downloadSourceEmitter"] }, { kind: "component", type: i14.ArlasDrawComponent, selector: "arlas-draw", inputs: ["map", "emptyData", "drawOption", "drawData", "drawButtonEnabled", "drawPolygonVerticesLimit", "preserveDrawingBuffer"], outputs: ["onAoiChanged", "onAoiEdit"] }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }, { kind: "pipe", type: i15.GetValuePipe, name: "getValue" }, { kind: "pipe", type: i16.GetCollectionPipe, name: "getCollection" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasMapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-map', encapsulation: ViewEncapsulation.None, template: "<div id=\"{{id}}\" class=\"map__container\">\n  <div class=\"map__visu-list\" *ngIf=\"visualisationSetsConfig?.length > 0\">\n    <div class=\"map__legend-button\" [matTooltipPosition]=\"'left'\" matTooltip=\"{{'Manage layers' | translate}}\">\n      <mat-icon (click)=\"legendOpen=!legendOpen\" (keyDown)=\"legendOpen=!legendOpen\">layers</mat-icon>\n    </div>\n    <div [hidden]=\"!legendOpen\" class=\"map__visu-list--container\" cdkDropList\n      (cdkDropListDropped)=\"drop($event)\">\n      <div cdkDrag class=\"map__visu-item\" *ngFor=\"let visu of visualisationSetsConfig\">\n        <div cdkDragHandle class=\"map__visu-title\">\n          <span class=\"map__visu-title-text\" [class.map__visu-title-text--disabled]=\"!visu.enabled\">\n            {{visu.name | translate}}</span>\n          <mat-slide-toggle [checked]=\"visu.enabled\" (change)=\"emitVisualisations(visu.name)\"\n            [matTooltip]=\"'show_layers' | translate\" [hideIcon]=\"true\"></mat-slide-toggle>\n        </div>\n        <div class=\"map__visu-content\" cdkDropList (cdkDropListDropped)=\"dropLayer($event, visu.name)\">\n          <div cdkDrag *ngFor=\"let l of visu.layers\" class=\"map__visu-layer\"\n            [class.cdk-visually-hidden]=\"((visu.name + ':arlas_vset:' + l) | getValue:visibilityStatus) !== true\">\n            <div cdkDragHandle class=\"map__visu-layer-drag\">\n              <mat-icon>drag_indicator</mat-icon>\n            </div>\n            <arlas-legend [collection]=\"l | getCollection: mapService.layersMap \" [enabled]=\"visu.enabled\"\n              [layer]=\"l | getValue: mapService.layersMap \" [zoom]=\"map?.zoom\"\n              (visibilityStatus)=\"emitLegendVisibility(visu.name, l, $event)\" [legendUpdater]=\"legendUpdater\"\n              [visibilityUpdater]=\"visibilityUpdater\"\n              (downloadSourceEmitter)=\"downloadLayerSource($event)\"></arlas-legend>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<arlas-coordinates *ngIf=\"displayCurrentCoordinates\" [currentLat]=\"map?.currentLat\" [currentLng]=\"map?.currentLng\"\n  (moveToCoordinates$)=\"moveToCoordinates($event)\"></arlas-coordinates>\n\n<arlas-basemap *ngIf=\"showBasemapList\" [mapSources]=\"mapSources\" [map]=\"map\" (mouseleave)=\"hideBasemapSwitcher()\"\n  (basemapChanged)=\"onChangeBasemapStyle()\"></arlas-basemap>\n\n\n<arlas-draw #drawComponent *ngIf=\"map\" [map]=\"map\" [emptyData]=\"emptyData\" [drawData]=\"drawData\"\n  [drawButtonEnabled]=\"drawButtonEnabled\" [drawOption]=\"drawOption\"\n  [drawPolygonVerticesLimit]=\"drawPolygonVerticesLimit\" [preserveDrawingBuffer]=\"preserveDrawingBuffer\"\n  (onAoiChanged)=\"onAoiChanged.emit($event)\"\n  (onAoiEdit)=\"onAoiEdit.emit($event)\"></arlas-draw>", styles: ["@charset \"UTF-8\";.map__container{width:100%;height:100%;position:absolute!important}.map__visu-list{position:absolute;display:flex;flex-direction:column;top:220px;right:7px;z-index:1;background:transparent;flex-wrap:wrap-reverse}.map__legend-button{cursor:pointer;margin-bottom:4px;border-radius:3px;background-color:#fff;width:30px;height:30px;padding:3px}.map__legend-button:hover{background-color:#f5f5f5}.map__visu-list--container{padding:1px 1px 3px;border-radius:2px;max-height:calc(100vh - 415px);overflow-y:auto;overflow-x:hidden}.map__visu-item{margin:1px;padding:unset;padding-right:3px;width:225px;border:.8px solid #ddd;background:#fff;border-radius:3px}.map__visu-title{display:flex;justify-content:space-between;padding:1px 5px 1px 0;font-weight:550;font-size:14px;cursor:grab;--mdc-switch-track-width: 24px;--mdc-switch-track-height: 5px;--mdc-switch-handle-width: 12px;--mdc-switch-state-layer-size: 0;--mat-switch-selected-handle-horizontal-margin: 0 1px}.map__visu-title:hover .map__visu-toggle .map__visu-drag{visibility:visible}.map__visu-title .mdc-switch__handle{--mat-switch-unselected-handle-size: 12px;--mat-switch-selected-handle-size: 12px;--mat-switch-pressed-handle-size: 12px;--mdc-switch-unselected-handle-color: lightgrey;--mdc-switch-unselected-focus-handle-color: lightgrey;--mdc-switch-unselected-hover-handle-color: lightgrey;--mdc-switch-unselected-pressed-handle-color: lightgrey}.map__visu-title-text{color:#333;padding:3px}.map__visu-title-text--disabled{color:#bbb}.map__visu-content{max-height:300px;overflow-y:auto;overflow-x:hidden}.map__visu-layer{background-color:#fff;position:relative;overflow:hidden}.map__visu-layer-drag{position:absolute;top:5px;left:0;display:flex;padding-left:3px}.map__visu-layer-drag mat-icon{font-size:18px;width:18px;height:18px;color:#999}.map__visu-layer:hover .map__visu-layer-drag{cursor:grab;z-index:2}.map__visu-layer:hover .map__visu-layer-drag mat-icon{color:#444}.draw-tooltip--hide{display:none}.draw-tooltip--show{display:block;position:fixed;overflow:hidden;font-size:.8em;background-color:#fff;border-radius:2px;padding:2px;box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}::-webkit-scrollbar{width:3px!important;height:4px!important;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}.cdk-drag-preview{box-sizing:border-box;font-size:.75em;border-radius:3px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-preview .map__visu-layer .map__visu-layer-drag mat-icon{color:#444}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.draw-control-disabled{display:none}\n"] }]
        }], ctorParameters: () => [{ type: i1.MapboxAoiDrawService }, { type: i2.BasemapService }, { type: i3.TranslateService }, { type: i4.ArlasMapFrameworkService }, { type: i5.AbstractArlasMapService }], propDecorators: { drawComponent: [{
                type: ViewChild,
                args: ['drawComponent', { static: false }]
            }], id: [{
                type: Input
            }], offset: [{
                type: Input
            }], mapLayers: [{
                type: Input
            }], displayScale: [{
                type: Input
            }], maxWidthScale: [{
                type: Input
            }], unitScale: [{
                type: Input
            }], displayCurrentCoordinates: [{
                type: Input
            }], wrapLatLng: [{
                type: Input
            }], defaultBasemapStyle: [{
                type: Input
            }], basemapStyles: [{
                type: Input
            }], initZoom: [{
                type: Input
            }], maxZoom: [{
                type: Input
            }], minZoom: [{
                type: Input
            }], initCenter: [{
                type: Input
            }], boundsToFit: [{
                type: Input
            }], fitBoundsOffSet: [{
                type: Input
            }], fitBoundsPadding: [{
                type: Input
            }], fitBoundsMaxZoom: [{
                type: Input
            }], margePanForLoad: [{
                type: Input
            }], margePanForTest: [{
                type: Input
            }], transformRequest: [{
                type: Input
            }], featureToHightLight: [{
                type: Input
            }], featuresToSelect: [{
                type: Input
            }], mapSources: [{
                type: Input
            }], redrawSource: [{
                type: Input
            }], dataSources: [{
                type: Input
            }], drawOption: [{
                type: Input
            }], drawData: [{
                type: Input
            }], drawButtonEnabled: [{
                type: Input
            }], drawPolygonVerticesLimit: [{
                type: Input
            }], preserveDrawingBuffer: [{
                type: Input
            }], mapAttributionPosition: [{
                type: Input
            }], icons: [{
                type: Input
            }], legendUpdater: [{
                type: Input
            }], visibilityUpdater: [{
                type: Input
            }], visualisationSetsConfig: [{
                type: Input
            }], onMapLoaded: [{
                type: Output
            }], onMapClosed: [{
                type: Output
            }], onMove: [{
                type: Output
            }], visualisations: [{
                type: Output
            }], onFeatureClick: [{
                type: Output
            }], onFeatureHover: [{
                type: Output
            }], onAoiChanged: [{
                type: Output
            }], onAoiEdit: [{
                type: Output
            }], onBasemapChanged: [{
                type: Output
            }], legendVisibiltyStatus: [{
                type: Output
            }], downloadSourceEmitter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJsYXMtbWFwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FybGFzLW1hcC9zcmMvbGliL2FybGFzLW1hcC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1tYXAvc3JjL2xpYi9hcmxhcy1tYXAuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBRUgsT0FBTyxFQUFlLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWlCLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9ELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sS0FBSyxhQUFhLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUzRCxPQUFPLEVBR0wsa0JBQWtCLEVBRWxCLGFBQWEsRUFDYixPQUFPLEVBQUUsUUFBUSxFQUNsQixNQUFNLDBCQUEwQixDQUFDO0FBSWxDLE9BQU8sRUFBRSxVQUFVLEVBQWtCLFlBQVksRUFBYSxNQUFNLG9CQUFvQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXekY7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQTRMNUIsWUFBb0MsV0FBaUMsRUFDbEQsY0FBdUMsRUFBbUIsU0FBMkIsRUFDNUYsbUJBQXNELEVBQ3RELFVBQTRDO1FBSHBCLGdCQUFXLEdBQVgsV0FBVyxDQUFzQjtRQUNsRCxtQkFBYyxHQUFkLGNBQWMsQ0FBeUI7UUFBbUIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDNUYsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFtQztRQUN0RCxlQUFVLEdBQVYsVUFBVSxDQUFrQztRQTNMeEQsa0RBQWtEO1FBQzNDLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDekIscUNBQXFDO1FBQzlCLGNBQVMsR0FBd0M7WUFDdEQsTUFBTSxFQUFFLG1CQUFtQjtZQUMzQixVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7UUFFRiw2Q0FBNkM7UUFDdEMsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFFL0Isb0RBQW9EO1FBQzdDLHFCQUFnQixHQUFHLElBQUksR0FBRyxFQUFtQixDQUFDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQU10RCxxQkFBcUI7UUFFckIsNkVBQTZFO1FBQzdELE9BQUUsR0FBRyxPQUFPLENBQUM7UUFDN0Isc0dBQXNHO1FBQ3RHLDhFQUE4RTtRQUM5RCxXQUFNLEdBQW1CLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBT2xGLDhCQUE4QjtRQUU5Qix1REFBdUQ7UUFDdkMsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDcEMsMEVBQTBFO1FBQzFELGtCQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3BDLG1EQUFtRDtRQUNuQyxjQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ3JDLGlGQUFpRjtRQUNqRSw4QkFBeUIsR0FBRyxLQUFLLENBQUM7UUFDbEQscUZBQXFGO1FBQ3JFLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFNbEMsK0NBQStDO1FBQy9CLGtCQUFhLEdBQUcsSUFBSSxLQUFLLEVBQWdCLENBQUM7UUFFMUQsbURBQW1EO1FBRW5ELDBEQUEwRDtRQUMxQyxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLHdDQUF3QztRQUN4QixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQzdCLHdDQUF3QztRQUN4QixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLDJFQUEyRTtRQUMzRCxlQUFVLEdBQXFCLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQU94Riw2SEFBNkg7UUFDN0gsOENBQThDO1FBQzlCLG9CQUFlLEdBQXFCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNELDhGQUE4RjtRQUM5RSxxQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDdEMsK0VBQStFO1FBQy9ELHFCQUFnQixHQUFHLEVBQUUsQ0FBQztRQXVCdEMsb0hBQW9IO1FBQ3BHLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQTBELENBQUM7UUFJckcsZUFBZTtRQUVmLDZIQUE2SDtRQUM3RyxlQUFVLEdBQVEsRUFBRSxDQUFDO1FBQ3JDLHFEQUFxRDtRQUNyQyxhQUFRLEdBQXdDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZGLHlEQUF5RDtRQUN6QyxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFHMUMsMkRBQTJEO1FBQzNELDJHQUEyRztRQUMzRiwwQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFFOUMsc0JBQXNCO1FBRXRCLG9EQUFvRDtRQUNwQywyQkFBc0IsR0FBb0IsY0FBYyxDQUFDO1FBT3pFLG9DQUFvQztRQUVwQyxzR0FBc0c7UUFDdEcsNkRBQTZEO1FBQzdDLGtCQUFhLEdBQWtELElBQUksT0FBTyxFQUFFLENBQUM7UUFDN0YsdUZBQXVGO1FBQ3ZGLDBEQUEwRDtRQUMxQyxzQkFBaUIsR0FBa0MsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQU1qRixzQkFBc0I7UUFFdEIsMEZBQTBGO1FBQ3pFLGdCQUFXLEdBQXFCLElBQUksT0FBTyxFQUFXLENBQUM7UUFFeEUsa0ZBQWtGO1FBQ2pFLGdCQUFXLEdBQTRCLElBQUksWUFBWSxFQUFhLENBQUM7UUFFdEY7OzhEQUVzRDtRQUNyQyxXQUFNLEdBQStCLElBQUksWUFBWSxFQUFnQixDQUFDO1FBRXZGLCtEQUErRDtRQUM5QyxtQkFBYyxHQUE4QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWhGLDREQUE0RDtRQUMzQyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFvRixDQUFDO1FBRXZJLHlEQUF5RDtRQUN4QyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUF5RixDQUFDO1FBRTVJLG1FQUFtRTtRQUNsRCxpQkFBWSxHQUFzRCxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXRHLHFGQUFxRjtRQUNwRSxjQUFTLEdBQWdDLElBQUksWUFBWSxFQUFFLENBQUM7UUFFN0UsaUZBQWlGO1FBQ2hFLHFCQUFnQixHQUFxQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRXBFLGdFQUFnRTtRQUMvQywwQkFBcUIsR0FBa0MsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUV0RixnRkFBZ0Y7UUFDL0QsMEJBQXFCLEdBTWpDLElBQUksT0FBTyxFQUFFLENBQUM7UUFFVCxvQkFBZSxHQUFHLGVBQWUsQ0FBQztRQU14QyxJQUFJLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2FBQ25FLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sZUFBZTtRQUNwQixrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDcEIsQ0FBQztRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNwQixDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUVqQyxlQUFlO1FBQ2YsSUFBSSxJQUFJLENBQUMsbUJBQW1CLElBQUksT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ3ZGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQztRQUNwRSxDQUFDO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDOUIsSUFBSSxPQUFPLEVBQUUsQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFLENBQUM7Z0JBQ3JDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFO2FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7YUFDdkMsU0FBUyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN4RCxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDekMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFlBQVksQ0FBQztnQkFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFO29CQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtvQkFDOUIsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlO2lCQUM3QixDQUFDLENBQUM7WUFDTCxDQUFDO1lBQ0QsSUFBSSxPQUFPLENBQUMscUJBQXFCLENBQUMsS0FBSyxTQUFTO21CQUMzQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ2xHLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsWUFBWSxDQUFDO2dCQUN4RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM3QyxDQUFDO1lBQ0QsSUFBSSxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxTQUFTO21CQUN4QyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQzVGLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsWUFBWSxDQUFDO2dCQUNsRSxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDeEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsNEdBQTRHO0lBQ3JHLG9CQUFvQjtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQzdFLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxXQUFXLENBQUMsVUFBeUI7UUFDMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM5QixJQUFJLE9BQWUsQ0FBQztRQUNwQixJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzFCLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDO2FBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsQ0FBQzthQUFNLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNkLENBQUM7YUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZixDQUFDO2FBQU0sSUFBSSxJQUFJLElBQUksRUFBRSxJQUFJLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztZQUNuQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2YsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2YsQ0FBQztRQUNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRyxDQUFDO0lBRUQ7OztPQUdHO0lBQ08sV0FBVyxDQUFDLGtCQUFzQztRQUMxRCxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3JILElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCO2VBQ3BFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUN2RyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdJLENBQUM7SUFDSCxDQUFDO0lBRUQsd0VBQXdFO0lBQ2pFLFFBQVE7UUFDYixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNsRCxNQUFNLGdCQUFnQixHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQzVGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ2pILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUNsSCxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDcEgsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxVQUFVO1FBQ2YsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUIsTUFBTSxNQUFNLEdBQWlCO1lBQzNCLHlCQUF5QixFQUFFLElBQUksQ0FBQyx5QkFBeUI7WUFDekQsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUN2QyxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDckMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ3JDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixrQkFBa0IsRUFBRTtnQkFDbEIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ25GLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87Z0JBQ3JCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDckIsaUJBQWlCLEVBQUUsSUFBSTtnQkFDdkIscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtnQkFDakQsTUFBTSxFQUFFO29CQUNOLDBCQUEwQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztvQkFDM0QsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO29CQUM3RCxnQ0FBZ0MsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7aUJBQ3hFO2dCQUNELGVBQWUsRUFBRSxLQUFLO2dCQUN0QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO2dCQUN2QyxrQkFBa0IsRUFBRSxLQUFLO2FBQ3JCO1lBQ04sUUFBUSxFQUFFO2dCQUNSLGNBQWMsRUFBRTtvQkFDZCxNQUFNLEVBQUUsSUFBSTtvQkFDWixRQUFRLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtvQkFDckMsTUFBTSxFQUFFO3dCQUNOLE9BQU8sRUFBRSxLQUFLO3FCQUNmO2lCQUNGO2dCQUNELEtBQUssRUFBRTtvQkFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVk7aUJBQzFCO2dCQUNELGlCQUFpQixFQUFFO29CQUNqQixNQUFNLEVBQUUsSUFBSTtpQkFDYjtnQkFDRCxXQUFXLEVBQUU7b0JBQ1gsTUFBTSxFQUFFLElBQUk7b0JBQ1osTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtpQkFDdEQ7YUFDRjtTQUNGLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsU0FBUyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQy9DLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtZQUM5QyxJQUFJLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BGLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0YsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUN6RCxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDbEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM3RixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3RSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDakUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ3ZHLE1BQU0sRUFBRSxtQkFBbUI7b0JBQzNCLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSTtpQkFDcEIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0JBQW9CO1FBQ3pCLHdEQUF3RDtRQUN4RCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEcsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzlDLDhDQUE4QztZQUM5QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQzFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzRix3REFBd0Q7WUFDeEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUMzRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN0RSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLGlCQUFpQixHQUFHO1lBQ3hCLGlDQUFpQztZQUNqQywrQkFBK0I7WUFDL0IsK0JBQStCO1NBQ2hDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO2FBQzdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLDBDQUEwQztRQUMxQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUMxRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUMzRSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQztvQkFDakMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUMvRCxDQUFDO3FCQUFNLENBQUM7b0JBQ04sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RCxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw0RkFBNEY7SUFDckYsYUFBYTtRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCwrQ0FBK0M7SUFDeEMsbUJBQW1CO1FBQ3hCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFRCw0RUFBNEU7SUFDckUsb0JBQW9CO1FBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksb0JBQW9CLENBQUMsYUFBcUIsRUFBRSxDQUFTLEVBQUUsT0FBZ0I7UUFDNUUsOENBQThDO1FBQzlDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxVQUFVLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGtCQUFrQixDQUFDLGlCQUF5QjtRQUNqRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakgsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxTQUFnRDtRQUN6RSxNQUFNLGVBQWUsR0FBRztZQUN0QixPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDM0MsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVU7WUFDL0MsVUFBVSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBZ0I7WUFDNUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxZQUFZO1NBQ3JDLENBQUM7UUFDRixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxzRUFBc0U7SUFDL0QsSUFBSSxDQUFDLEtBQTRCO1FBQ3RDLGVBQWUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCwyREFBMkQ7SUFDcEQsU0FBUyxDQUFDLEtBQTRCLEVBQUUsUUFBZ0I7UUFDN0QsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1FBQzdHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzFGLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBQ00sbUJBQW1CO1FBQ3hCLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFDRDs7O09BR0c7SUFDSSxpQkFBaUIsQ0FBQyxNQUF5QjtRQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRDs7O09BR0c7SUFDSSxpQkFBaUIsQ0FBQyxNQUF3QjtRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBQ0Qsd0ZBQXdGO0lBQ2hGLGdCQUFnQixDQUFDLG1CQUFrRjtRQUN6RyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFDRCxxRkFBcUY7SUFDN0UsY0FBYyxDQUFDLGVBQXlDO1FBQzlELElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBQ0Q7OztNQUdFO0lBQ0ssMEJBQTBCLENBQUMsUUFBa0MsRUFBRSxVQUFrQjtRQUN0RixJQUFJLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0I7UUFDNUIsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUNELGlEQUFpRDtJQUMxQyxXQUFXO1FBQ2hCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQy9CLENBQUM7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCw2Q0FBNkM7SUFDdEMsU0FBUztRQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVTtRQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELHVIQUF1SDtJQUNoSCxrQkFBa0I7UUFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFHRDs7OztPQUlHO0lBQ0ksZ0JBQWdCLENBQUMsSUFBYSxFQUFFLE1BQVk7UUFDakQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHdCQUF3QixDQUFDLE1BQ3NCO1FBQ3BELElBQUksQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGdCQUFnQjtRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxhQUFhLENBQUMsSUFBdUI7UUFDMUMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGtCQUFrQixDQUFDLElBQXVCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDOytHQTNsQlUsaUJBQWlCO21HQUFqQixpQkFBaUIsdXREQzlEOUIsNnNGQTJDb0Q7OzRGRG1CdkMsaUJBQWlCO2tCQVY3QixTQUFTOytCQUNFLFdBQVcsaUJBR04saUJBQWlCLENBQUMsSUFBSTtrT0EwQmlCLGFBQWE7c0JBQWxFLFNBQVM7dUJBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtnQkFNN0IsRUFBRTtzQkFBakIsS0FBSztnQkFHVSxNQUFNO3NCQUFyQixLQUFLO2dCQUtVLFNBQVM7c0JBQXhCLEtBQUs7Z0JBS1UsWUFBWTtzQkFBM0IsS0FBSztnQkFFVSxhQUFhO3NCQUE1QixLQUFLO2dCQUVVLFNBQVM7c0JBQXhCLEtBQUs7Z0JBRVUseUJBQXlCO3NCQUF4QyxLQUFLO2dCQUVVLFVBQVU7c0JBQXpCLEtBQUs7Z0JBS1UsbUJBQW1CO3NCQUFsQyxLQUFLO2dCQUVVLGFBQWE7c0JBQTVCLEtBQUs7Z0JBS1UsUUFBUTtzQkFBdkIsS0FBSztnQkFFVSxPQUFPO3NCQUF0QixLQUFLO2dCQUVVLE9BQU87c0JBQXRCLEtBQUs7Z0JBRVUsVUFBVTtzQkFBekIsS0FBSztnQkFNVSxXQUFXO3NCQUExQixLQUFLO2dCQUdVLGVBQWU7c0JBQTlCLEtBQUs7Z0JBRVUsZ0JBQWdCO3NCQUEvQixLQUFLO2dCQUVVLGdCQUFnQjtzQkFBL0IsS0FBSztnQkFLVSxlQUFlO3NCQUE5QixLQUFLO2dCQUdVLGVBQWU7c0JBQTlCLEtBQUs7Z0JBRVUsZ0JBQWdCO3NCQUEvQixLQUFLO2dCQUtVLG1CQUFtQjtzQkFBbEMsS0FBSztnQkFFVSxnQkFBZ0I7c0JBQS9CLEtBQUs7Z0JBS1UsVUFBVTtzQkFBekIsS0FBSztnQkFFVSxZQUFZO3NCQUEzQixLQUFLO2dCQUVVLFdBQVc7c0JBQTFCLEtBQUs7Z0JBS1UsVUFBVTtzQkFBekIsS0FBSztnQkFFVSxRQUFRO3NCQUF2QixLQUFLO2dCQUVVLGlCQUFpQjtzQkFBaEMsS0FBSztnQkFFVSx3QkFBd0I7c0JBQXZDLEtBQUs7Z0JBR1UscUJBQXFCO3NCQUFwQyxLQUFLO2dCQUtVLHNCQUFzQjtzQkFBckMsS0FBSztnQkFLVSxLQUFLO3NCQUFwQixLQUFLO2dCQU1VLGFBQWE7c0JBQTVCLEtBQUs7Z0JBR1UsaUJBQWlCO3NCQUFoQyxLQUFLO2dCQUdVLHVCQUF1QjtzQkFBdEMsS0FBSztnQkFNVyxXQUFXO3NCQUEzQixNQUFNO2dCQUdVLFdBQVc7c0JBQTNCLE1BQU07Z0JBS1UsTUFBTTtzQkFBdEIsTUFBTTtnQkFHVSxjQUFjO3NCQUE5QixNQUFNO2dCQUdVLGNBQWM7c0JBQTlCLE1BQU07Z0JBR1UsY0FBYztzQkFBOUIsTUFBTTtnQkFHVSxZQUFZO3NCQUE1QixNQUFNO2dCQUdVLFNBQVM7c0JBQXpCLE1BQU07Z0JBR1UsZ0JBQWdCO3NCQUFoQyxNQUFNO2dCQUdVLHFCQUFxQjtzQkFBckMsTUFBTTtnQkFHVSxxQkFBcUI7c0JBQXJDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gR2lzYcOvYSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRS50eHQgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBHaXNhw69hIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2RrRHJhZ0Ryb3AsIG1vdmVJdGVtSW5BcnJheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kcmFnLWRyb3AnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IEZlYXR1cmUsIEZlYXR1cmVDb2xsZWN0aW9uIH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5pbXBvcnQgeyBFbGVtZW50SWRlbnRpZmllciB9IGZyb20gJ2FybGFzLXdlYi1jb21wb25lbnRzJztcbmltcG9ydCB7IGZpbmFsaXplLCBmcm9tRXZlbnQsIFN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXJsYXNNYXBGcmFtZXdvcmtTZXJ2aWNlIH0gZnJvbSAnLi9hcmxhcy1tYXAtZnJhbWV3b3JrLnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgbWFwSnNvblNjaGVtYSBmcm9tICcuL2FybGFzLW1hcC5zY2hlbWEuanNvbic7XG5pbXBvcnQgeyBBYnN0cmFjdEFybGFzTWFwU2VydmljZSB9IGZyb20gJy4vYXJsYXMtbWFwLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmFzZW1hcFN0eWxlIH0gZnJvbSAnLi9iYXNlbWFwcy9iYXNlbWFwLmNvbmZpZyc7XG5pbXBvcnQgeyBCYXNlbWFwU2VydmljZSB9IGZyb20gJy4vYmFzZW1hcHMvYmFzZW1hcC5zZXJ2aWNlJztcbmltcG9ydCB7IEFybGFzQmFzZW1hcHMgfSBmcm9tICcuL2Jhc2VtYXBzL2Jhc2VtYXBzLm1vZGVsJztcbmltcG9ydCB7IEFybGFzRHJhd0NvbXBvbmVudCB9IGZyb20gJy4vZHJhdy9hcmxhcy1kcmF3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBb2lEaW1lbnNpb25zIH0gZnJvbSAnLi9kcmF3L2RyYXcubW9kZWxzJztcbmltcG9ydCB7IE1hcGJveEFvaURyYXdTZXJ2aWNlIH0gZnJvbSAnLi9kcmF3L2RyYXcuc2VydmljZSc7XG5pbXBvcnQgeyBMZWdlbmREYXRhIH0gZnJvbSAnLi9sZWdlbmQvbGVnZW5kLmNvbmZpZyc7XG5pbXBvcnQge1xuICBBYnN0cmFjdEFybGFzTWFwR0wsXG4gIEFybGFzTWFwT2Zmc2V0LFxuICBDUk9TU19MQVlFUl9QUkVGSVgsXG4gIE1hcENvbmZpZyxcbiAgUkVTRVRfQkVBUklORyxcbiAgWk9PTV9JTiwgWk9PTV9PVVRcbn0gZnJvbSAnLi9tYXAvQWJzdHJhY3RBcmxhc01hcEdMJztcbmltcG9ydCB7IENvbnRyb2xQb3NpdGlvbiwgSWNvbkNvbmZpZyB9IGZyb20gJy4vbWFwL21vZGVsL2NvbnRyb2xzJztcbmltcG9ydCB7IE1hcExheWVyTW91c2VFdmVudCwgTWFwTW91c2VFdmVudCB9IGZyb20gJy4vbWFwL21vZGVsL2V2ZW50cyc7XG5pbXBvcnQgeyBNYXBFeHRlbnQgfSBmcm9tICcuL21hcC9tb2RlbC9leHRlbnQnO1xuaW1wb3J0IHsgQVJMQVNfVlNFVCwgQXJsYXNEYXRhTGF5ZXIsIGdldExheWVyTmFtZSwgTWFwTGF5ZXJzIH0gZnJvbSAnLi9tYXAvbW9kZWwvbGF5ZXJzJztcbmltcG9ydCB7IEFybGFzTG5nTGF0Qm91bmRzLCBPbk1vdmVSZXN1bHQgfSBmcm9tICcuL21hcC9tb2RlbC9tYXAnO1xuaW1wb3J0IHsgQXJsYXNNYXBTb3VyY2UgfSBmcm9tICcuL21hcC9tb2RlbC9zb3VyY2VzJztcbmltcG9ydCB7IFZpc3VhbGlzYXRpb25TZXRDb25maWcgfSBmcm9tICcuL21hcC9tb2RlbC92aXN1YWxpc2F0aW9uc2V0cyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FybGFzLW1hcCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9hcmxhcy1tYXAuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9hcmxhcy1tYXAuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbi8qKiBMOiBhIGxheWVyIGNsYXNzL2ludGVyZmFjZS5cbiAqICBTOiBhIHNvdXJjZSBjbGFzcy9pbnRlcmZhY2UuXG4gKiAgTTogYSBNYXAgY29uZmlndXJhdGlvbiBjbGFzcy9pbnRlcmZhY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcmxhc01hcENvbXBvbmVudDxMLCBTLCBNPiB7XG5cbiAgLyoqIE1hcCBpbnN0YW5jZS4gKi9cbiAgcHVibGljIG1hcDogQWJzdHJhY3RBcmxhc01hcEdMO1xuICAvKiogV2hldGhlciB0aGUgbGVnZW5kIGlzIHZpc2libGUgKG9wZW4pIG9yIG5vdC4qL1xuICBwdWJsaWMgbGVnZW5kT3BlbiA9IHRydWU7XG4gIC8qKiBVc2VkIHRvIGNsZWFyIGdlb2pzb24gc291cmNlcy4gKi9cbiAgcHVibGljIGVtcHR5RGF0YTogRmVhdHVyZUNvbGxlY3Rpb248R2VvSlNPTi5HZW9tZXRyeT4gPSB7XG4gICAgJ3R5cGUnOiAnRmVhdHVyZUNvbGxlY3Rpb24nLFxuICAgICdmZWF0dXJlcyc6IFtdXG4gIH07XG5cbiAgLyoqIFdoZXRoZXIgdGhlIGxpc3Qgb2YgYmFzZW1hcHMgaXMgc2hvd24uICovXG4gIHB1YmxpYyBzaG93QmFzZW1hcExpc3QgPSBmYWxzZTtcblxuICAvKiogVmlzaWJpbGl0eSBzdGF0dXMgb2YgZWFjaCB2aXN1YWxpc2F0aW9uIHNldCouICovXG4gIHB1YmxpYyB2aXNpYmlsaXR5U3RhdHVzID0gbmV3IE1hcDxzdHJpbmcsIGJvb2xlYW4+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgX29uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG5cbiAgQFZpZXdDaGlsZCgnZHJhd0NvbXBvbmVudCcsIHsgc3RhdGljOiBmYWxzZSB9KSBwdWJsaWMgZHJhd0NvbXBvbmVudDogQXJsYXNEcmF3Q29tcG9uZW50PEFybGFzRGF0YUxheWVyLCBTLCBNPjtcblxuXG4gIC8qKiBBTkdVTEFSIElOUFVUUyAqL1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gSHRtbCBpZGVudGlmaWVyIGdpdmVuIHRvIHRoZSBtYXAgY29udGFpbmVyIChpdCdzIGEgZGl2IDspKSovXG4gIEBJbnB1dCgpIHB1YmxpYyBpZCA9ICdtYXBnbCc7XG4gIC8qKiBAZGVzY3JpcHRpb24gQW4gb2JqZWN0IHdpdGggbm9ydGgsZWFzdCxzb3V0aCx3ZXN0IHByb3BlcmllcyB3aGljaCByZXByZXNlbnQgYW4gb2Zmc2V0IGluIHBpeGVscyAqL1xuICAvKiogT3JpZ2luIGlzIHRvcC1sZWZ0IGFuZCB4LWF4aXMgaXMgd2VzdCB0byBlYXN0IGFuZCB5LWF4aXMgbm9ydGggdG8gc291dGguKi9cbiAgQElucHV0KCkgcHVibGljIG9mZnNldDogQXJsYXNNYXBPZmZzZXQgPSB7IG5vcnRoOiAwLCBlYXN0OiAwLCBzb3V0aDogMCwgd2VzdDogMCB9O1xuXG4gIC8qKiAtLS0gTEFZRVJTICovXG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBMaXN0IG9mIGNvbmZpZ3VyZWQgKGJ5IHRoZSBidWlsZGVyKSBsYXllcnMuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBtYXBMYXllcnM6IE1hcExheWVyczxBcmxhc0RhdGFMYXllcj47XG5cbiAgLyoqIC0tLSBTQ0FMRSAmIENPT1JESU5BVEVTICovXG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBXaGV0aGVyIHRoZSBtYXAgc2NhbGUgaXMgZGlzcGxheWVkLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgZGlzcGxheVNjYWxlID0gdHJ1ZTtcbiAgLyoqIEBkZXNjcmlwdGlvbiBNYXhpbWltIHdpZHRoIGluIHBpeGVscyB0aGF0IHRoZSBtYXAgc2NhbGUgY291bGQgdGFrZS4gKi9cbiAgQElucHV0KCkgcHVibGljIG1heFdpZHRoU2NhbGUgPSAxMDA7XG4gIC8qKiBAZGVzY3JpcHRpb24gVW5pdCBkaXNwbGF5IGZvciB0aGUgbWFwIHNjYWxlLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgdW5pdFNjYWxlID0gJ21ldHJpYyc7XG4gIC8qKiBAZGVzY3JpcHRpb24gV2hldGhlciB0byBkaXNwbGF5IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgbW91c2Ugd2hpbGUgbW92aW5nLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgZGlzcGxheUN1cnJlbnRDb29yZGluYXRlcyA9IGZhbHNlO1xuICAvKiogQGRlc2NyaXB0aW9uIElmIHRydWUsIHRoZSBjb29yZGluYXRlcyB2YWx1ZXMgYXJlIHdyYXBwZWQgYmV0d2VlbiAtMTgwIGFuZCAxODAuICovXG4gIEBJbnB1dCgpIHB1YmxpYyB3cmFwTGF0TG5nID0gdHJ1ZTtcblxuICAvKiogLS0tIEJBU0VNQVBTICovXG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBEZWZhdWx0IGJhc2VtYXAgdG8gZGlzcGxheS4gKi9cbiAgQElucHV0KCkgcHVibGljIGRlZmF1bHRCYXNlbWFwU3R5bGU6IEJhc2VtYXBTdHlsZTtcbiAgLyoqIEBkZXNjcmlwdGlvbiBMaXN0IG9mIGF2YWlsYWJsZSBiYXNlbWFwcy4gKi9cbiAgQElucHV0KCkgcHVibGljIGJhc2VtYXBTdHlsZXMgPSBuZXcgQXJyYXk8QmFzZW1hcFN0eWxlPigpO1xuXG4gIC8qKiAtLS0gSU5JVElBTCBNQVAgVklFVyA6IFpPT01zLCBDRU5URVIsIEJPVU5EUyAqL1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gWm9vbSBvZiB0aGUgbWFwIHdoZW4gaXQncyBpbml0aWFsaXplZC4gKi9cbiAgQElucHV0KCkgcHVibGljIGluaXRab29tID0gMjtcbiAgLyoqIEBkZXNjcmlwdGlvbiBNYXggem9vbSBvZiB0aGUgbWFwLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgbWF4Wm9vbSA9IDIyO1xuICAvKiogQGRlc2NyaXB0aW9uIE1pbiB6b29tIG9mIHRoZSBtYXAuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBtaW5ab29tID0gMDtcbiAgLyoqIEBkZXNjcmlwdGlvbiBDb29yZGluYXRlcyBvZiB0aGUgbWFwJ3MgY2VudGVyIHdoZW4gaXQncyBmaXJzdCBsb2FkZWQuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBpbml0Q2VudGVyOiBbbnVtYmVyLCBudW1iZXJdID0gWzIuMTk3MjY1NjI1MDAwMDAwNCwgNDUuNzA2MTc5Mjg1MzMwODU1XTtcblxuICAvKiogLS0tIEJPVU5EUyBUTyBGSVQgU1RSQVRFR1kgKi9cblxuICAvKiogQGRlc2NyaXB0aW9uIEJvdW5kcyB0aGF0IHRoZSB2aWV3IG1hcCBmaXRzLiBJdCdzIGFuIGFycmF5IG9mIHR3byBjb3JuZXJzLiAqL1xuICAvKiogRWFjaCBjb3JuZXIgaXMgYW4gbGF0LWxvbmcgcG9zaXRpb24uIEZvciBleGFtcGxlOiBib3VuZHNUb0ZpdCA9IFtbMzAuNTEsIC01NC4zXSxbMzAuNTcsIC01NC4yXV0gKi9cbiAgQElucHV0KCkgcHVibGljIGJvdW5kc1RvRml0OiBBcnJheTxBcnJheTxudW1iZXI+PjtcbiAgLyoqIEBkZXNjcmlwdGlvbiBUaGUgcGFkZGluZyBhZGRlZCBpbiB0aGUgdG9wLWxlZnQgYW5kIGJvdHRvbS1yaWdodCBjb3JuZXJzIG9mIGEgbWFwIGNvbnRhaW5lciB0aGF0IHNob3VsZG4ndCBiZSBhY2NvdW50ZWQgKi9cbiAgLyoqIGZvciB3aGVuIHNldHRpbmcgdGhlIHZpZXcgdG8gZml0IGJvdW5kcy4qL1xuICBASW5wdXQoKSBwdWJsaWMgZml0Qm91bmRzT2ZmU2V0OiBbbnVtYmVyLCBudW1iZXJdID0gWzAsIDBdO1xuICAvKiogIEBkZXNjcmlwdGlvbiBQYWRkaW5nIHZhbHVlIGFwcGxpZWQgYXJvdW5kIGEgZml0Qm91bmRzIHRvIGZ1bGx5IHNob3cgdGhlIGFyZWEgdGFyZ2V0ZWQuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBmaXRCb3VuZHNQYWRkaW5nID0gMTA7XG4gIC8qKiBAZGVzY3JpcHRpb24gVGhlIG1heGltdW0gem9vbSBsZXZlbCBzbyB0aGF0IHRoZSBib3VuZHMgZml0IHRoZSBtYXAgdmlldy4gKi9cbiAgQElucHV0KCkgcHVibGljIGZpdEJvdW5kc01heFpvb20gPSAyMjtcblxuICAvKiogLS0tIERBVEEgTE9BRElORyBTVFJBVEVHSUVTICovXG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBNYXJnaW4gYXBwbGllZCB0byB0aGUgbWFwIGV4dGVudC4gRGF0YSB3aWxsIGJlIGZldGNoZWQgaW4gYWxsIHRoaXMgZXh0ZW50LiAqL1xuICBASW5wdXQoKSBwdWJsaWMgbWFyZ2VQYW5Gb3JMb2FkOiBudW1iZXI7XG4gIC8qKiBAZGVzY3JpcHRpb24gTWFyZ2luIGFwcGxpZWQgdG8gdGhlIG1hcCBleHRlbnQuIEJlZm9yZSBsb2FkaW5nIGRhdGEsXG4gICAqIHRoZSBjb21wb25lbnRzIGNoZWNrcyBmaXJzdCBpZiB0aGVyZSBhcmUgZmVhdHVyZXMgYWxyZWFkeSBsb2FkZWQgaW4gdGhpcyBleHRlbnQuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBtYXJnZVBhbkZvclRlc3Q6IG51bWJlcjtcbiAgLyoqIEBkZXNjcmlwdGlvbiBBIGNhbGxiYWNrIHJ1biBiZWZvcmUgdGhlIE1hcCBtYWtlcyBhIHJlcXVlc3QgZm9yIGFuIGV4dGVybmFsIFVSTC8gKi9cbiAgQElucHV0KCkgcHVibGljIHRyYW5zZm9ybVJlcXVlc3Q6IHVua25vd24gLyoqIFRyYW5zZm9ybVJlcXVlc3RGdW5jdGlvbiBvciBSZXF1ZXN0VHJhbnNmb3JtUmVxdWVzdCAqLztcblxuICAvKiogLS0tIE1BUCBJTlRFUkFDVElPTiAqL1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gRmVhdHVyZSB0byBoaWdobGlnaHQuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBmZWF0dXJlVG9IaWdodExpZ2h0OiB7IGlzbGVhdmluZzogYm9vbGVhbjsgZWxlbWVudGlkZW50aWZpZXI6IEVsZW1lbnRJZGVudGlmaWVyOyB9O1xuICAvKiogQGRlc2NyaXB0aW9uIExpc3Qgb2YgZmVhdHVyZXMgdG8gc2VsZWN0LiAqL1xuICBASW5wdXQoKSBwdWJsaWMgZmVhdHVyZXNUb1NlbGVjdDogQXJyYXk8RWxlbWVudElkZW50aWZpZXI+O1xuXG4gIC8qKiAtLS0gU09VUkNFUyAqL1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gTGlzdCBvZiBzb3VyY2VzIHRvIGFkZCB0byB0aGUgbWFwLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgbWFwU291cmNlczogQXJyYXk8QXJsYXNNYXBTb3VyY2U8Uz4+O1xuICAvKiogQGRlc2NyaXB0aW9uIFN1YmplY3QgdG8gd2hpY2ggdGhlIGNvbXBvbmVudCBzdWJzY3JpYmVzIHRvIHJlZHJhdyBvbiB0aGUgbWFwIHRoZSBgZGF0YWAgb2YgdGhlIGdpdmVuIGBzb3VyY2VgLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgcmVkcmF3U291cmNlID0gbmV3IFN1YmplY3Q8eyBzb3VyY2U6IHN0cmluZzsgZGF0YTogRmVhdHVyZTxHZW9KU09OLkdlb21ldHJ5PltdOyB9PigpO1xuICAvKiogQGRlc2NyaXB0aW9uIExpc3Qgb2YgZGF0YSBzb3VyY2VzIG5hbWVzIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBtYXAuIFNvdXJjZXMgc2hvdWxkIGJlIG9mIHR5cGUgYGdlb2pzb25gLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgZGF0YVNvdXJjZXM6IFNldDxzdHJpbmc+O1xuXG4gIC8qKiAtLS0gRFJBVyAqL1xuXG4gIC8qKiAgQGRlc2NyaXB0aW9uIE9wdGlvbnMgb2JqZWN0IGZvciBkcmF3IHRvb2xzIDogaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtZHJhdy9ibG9iL21hc3Rlci9kb2NzL0FQSS5tZCNvcHRpb25zICovXG4gIEBJbnB1dCgpIHB1YmxpYyBkcmF3T3B0aW9uOiBhbnkgPSB7fTtcbiAgLyoqIEBkZXNjcmlwdGlvbiBGZWF0dXJlcyBkcmF3biBhdCBjb21wb25lbnQgc3RhcnQgKi9cbiAgQElucHV0KCkgcHVibGljIGRyYXdEYXRhOiBGZWF0dXJlQ29sbGVjdGlvbjxHZW9KU09OLkdlb21ldHJ5PiA9ICh7IC4uLnRoaXMuZW1wdHlEYXRhfSk7XG4gIC8qKiBAZGVzY3JpcHRpb24gV2hldGhlciB0aGUgZHJhdyB0b29scyBhcmUgYWN0aXZhdGVkLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgZHJhd0J1dHRvbkVuYWJsZWQgPSBmYWxzZTtcbiAgLyoqIEBkZXNjcmlwdGlvbiBNYXhpbXVtIG51bWJlciBvZiB2ZXJ0aWNlcyBhbGxvd2VkIGZvciBhIHBvbHlnb24uICovXG4gIEBJbnB1dCgpIHB1YmxpYyBkcmF3UG9seWdvblZlcnRpY2VzTGltaXQ6IG51bWJlcjtcbiAgLyoqIEBkZXNjcmlwdGlvbiBXaGV0aGVyIHRoZSBkcmF3aW5nIGJ1ZmZlciBpcyBhY3RpdmF0ZWQgKi9cbiAgLyoqIElmIHRydWUsIHRoZSBtYXAncyBjYW52YXMgY2FuIGJlIGV4cG9ydGVkIHRvIGEgUE5HIHVzaW5nIG1hcC5nZXRDYW52YXMoKS50b0RhdGFVUkwoKS4gRGVmYXVsdDogZmFsc2UgKi9cbiAgQElucHV0KCkgcHVibGljIHByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IGZhbHNlO1xuXG4gIC8qKiAtLS0gQVRUUklCVVRJT04gKi9cblxuICAvKiogQGRlc2NyaXB0aW9uIFBvc2l0aW9uIG9mIHRoZSBtYXAgYXR0cmlidXRpb24uICovXG4gIEBJbnB1dCgpIHB1YmxpYyBtYXBBdHRyaWJ1dGlvblBvc2l0aW9uOiBDb250cm9sUG9zaXRpb24gPSAnYm90dG9tLXJpZ2h0JztcblxuICAvKiogLS0tIE1BUCBJQ09OUyAqL1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gTGlzdCBvZiBpY29ucyB0byBhZGQgdG8gdGhlIG1hcCBhbmQgdGhhdCBjYW4gYmUgdXNlZCBpbiBsYXllcnMuICovXG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uczogQXJyYXk8SWNvbkNvbmZpZz47XG5cbiAgLyoqIC0tLSBMRUdFTkQgQU5EIFZJU1VBTElTQVRJT05TICovXG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBTdWJqZWN0IG9mIFtjb2xsZWN0aW9uLCBbZmllbGQsIGxlZ2VuZERhdGFdXSBtYXAuIFRoZSBtYXAgc3Vic2NyaWJlcyB0byBpdCB0byBrZWVwICovXG4gIC8qKiB0aGUgbGVnZW5kIHVwZGF0ZWQgd2l0aCB0aGUgZGF0YSBkaXNwbGF5ZWQgb24gdGhlIG1hcC4gKi9cbiAgQElucHV0KCkgcHVibGljIGxlZ2VuZFVwZGF0ZXI6IFN1YmplY3Q8TWFwPHN0cmluZywgTWFwPHN0cmluZywgTGVnZW5kRGF0YT4+PiA9IG5ldyBTdWJqZWN0KCk7XG4gIC8qKiBAZGVzY3JpcHRpb24gU3ViamVjdCBvZiBbbGF5ZXJJZCwgYm9vbGVhbl0gbWFwLiBUaGUgbWFwIHN1YnNjcmliZXMgdG8gaXQgdG8ga2VlcCAqL1xuICAvKiogdGhlIGxlZ2VuZCB1cGRhdGVkIHdpdGggdGhlIHZpc2liaWxpdHkgb2YgdGhlIGxheWVyLiovXG4gIEBJbnB1dCgpIHB1YmxpYyB2aXNpYmlsaXR5VXBkYXRlcjogU3ViamVjdDxNYXA8c3RyaW5nLCBib29sZWFuPj4gPSBuZXcgU3ViamVjdCgpO1xuICAvKiogQGRlc2NyaXB0aW9uIExpc3Qgb2YgdmlzdWFsaXNhdGlvbiBzZXRzLiBBIFZpc3VhbGlzYXRpb24gc2V0IGlzIGFuIGVudGl0eSB3aGVyZSBsYXllcnMgYXJlIGdyb3VwZWQgdG9nZXRoZXIuICovXG4gIC8qKiBJZiBhIHZpc3VhbGlzYXRpb24gc2V0IGlzIGVuYWJsZWQsIGFsbCB0aGUgbGF5ZXJzIGluIGl0IGNhbiBiZSBkaXNwbGF5ZWQgb24gdGhlIG1hcCwgb3RoZXJ3aXNlIHRoZSBsYXllcnMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgbWFwLiAqL1xuICBASW5wdXQoKSBwdWJsaWMgdmlzdWFsaXNhdGlvblNldHNDb25maWc6IEFycmF5PFZpc3VhbGlzYXRpb25TZXRDb25maWc+O1xuXG5cbiAgLyoqIEFOR1VMQVIgT1VUUFVUUyAqL1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gRW1pdHMgdHJ1ZSBhZnRlciB0aGUgbWFwIGlzIGxvYWRlZCBhbmQgYWxsIHNvdXJjZXMgJiBsYXllcnMgYXJlIGFkZGVkLiAqL1xuICBAT3V0cHV0KCkgcHVibGljIG9uTWFwTG9hZGVkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAvKiogQGRlc2NyaXB0aW9uIEVtaXRzIHRoZSBtYXAgZXh0ZW50IHdoZW4gdGhlIGJyb3dzZXIgdGFiIGlzIGNsb3NlZC9yZWZyZXNoZWQuICovXG4gIEBPdXRwdXQoKSBwdWJsaWMgb25NYXBDbG9zZWQ6IEV2ZW50RW1pdHRlcjxNYXBFeHRlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBFeHRlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBkZXNjcmlwdGlvbiAgRW1pdHMgdGhlIGV2ZW50IG9mIG1vdmluZyB0aGUgbWFwLiAqL1xuICBAT3V0cHV0KCkgcHVibGljIG9uTW92ZTogRXZlbnRFbWl0dGVyPE9uTW92ZVJlc3VsdD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9uTW92ZVJlc3VsdD4oKTtcblxuICAvKiogQGRlc2NyaXB0aW9uIEVtaXRzIHRoZSB2aXNpYmxlIHZpc3VhbGlzYXRpb24gc2V0cycgbmFtZXMgKi9cbiAgQE91dHB1dCgpIHB1YmxpYyB2aXN1YWxpc2F0aW9uczogRXZlbnRFbWl0dGVyPFNldDxzdHJpbmc+PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKiogQGRlc2NyaXB0aW9uIEVtaXRzIHRoZSBmZWF0dXJlcyB0aGF0IHdlcmUgY2xpY2tlZCBvbi4gKi9cbiAgQE91dHB1dCgpIHB1YmxpYyBvbkZlYXR1cmVDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8eyBmZWF0dXJlczogQXJyYXk8R2VvSlNPTi5GZWF0dXJlPEdlb0pTT04uR2VvbWV0cnk+PjsgcG9pbnQ6IFtudW1iZXIsIG51bWJlcl07IH0+KCk7XG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBFbWl0cyB0aGUgZmVhdHVyZXMgdGhhdCB3ZXJlIGhvdmVyZWQuICovXG4gIEBPdXRwdXQoKSBwdWJsaWMgb25GZWF0dXJlSG92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHsgZmVhdHVyZXM6IEFycmF5PEdlb0pTT04uRmVhdHVyZTxHZW9KU09OLkdlb21ldHJ5Pj47IHBvaW50OiBbbnVtYmVyLCBudW1iZXJdOyB9IHwge30+KCk7XG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBFbWl0cyB0aGUgZ2VvanNvbiBvZiBhbGwgYW9pcyBhZGRlZCB0byB0aGUgbWFwLiAqL1xuICBAT3V0cHV0KCkgcHVibGljIG9uQW9pQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEZlYXR1cmVDb2xsZWN0aW9uPEdlb0pTT04uR2VvbWV0cnk+PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKiogQGRlc2NyaXB0aW9uIEVtaXRzIHRoZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgcG9seWdvbi9iYm94IHRoYXQgaXMgYmVpbmcgZHJhd24uICovXG4gIEBPdXRwdXQoKSBwdWJsaWMgb25Bb2lFZGl0OiBFdmVudEVtaXR0ZXI8QW9pRGltZW5zaW9ucz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBFbWl0cyBhbiBldmVudCB3aGVuIHRoZSBiYXNlbWFwIGhhcyBiZWVuIGNoYW5nZWQgYnkgdGhlIHVzZXIuICovXG4gIEBPdXRwdXQoKSBwdWJsaWMgb25CYXNlbWFwQ2hhbmdlZDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBFbWl0cyB3aGljaCBsYXllcnMgYXJlIGRpc3BsYXllZCBvbiB0aGUgbWFwLiAqL1xuICBAT3V0cHV0KCkgcHVibGljIGxlZ2VuZFZpc2liaWx0eVN0YXR1czogU3ViamVjdDxNYXA8c3RyaW5nLCBib29sZWFuPj4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gIE5vdGlmaWVzIHRoYXQgdGhlIHVzZXIgd2FudHMgdG8gZG93bmxvYWQgdGhlIHNlbGVjdGVkIGxheWVyICovXG4gIEBPdXRwdXQoKSBwdWJsaWMgZG93bmxvYWRTb3VyY2VFbWl0dGVyOiBTdWJqZWN0PHtcbiAgICBsYXllcklkOiBzdHJpbmc7XG4gICAgbGF5ZXJOYW1lOiBzdHJpbmc7XG4gICAgY29sbGVjdGlvbjogc3RyaW5nO1xuICAgIHNvdXJjZU5hbWU6IHN0cmluZztcbiAgICBkb3dubG9hZFR5cGU6IHN0cmluZztcbiAgfT4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIHByb3RlY3RlZCBJQ09OU19CQVNFX1BBVEggPSAnYXNzZXRzL2ljb25zLyc7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZHJhd1NlcnZpY2U6IE1hcGJveEFvaURyYXdTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFzZW1hcFNlcnZpY2U6IEJhc2VtYXBTZXJ2aWNlPEwsIFMsIE0+LCBwcml2YXRlIHJlYWRvbmx5IHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgbWFwRnJhbWV3b3JrU2VydmljZTogQXJsYXNNYXBGcmFtZXdvcmtTZXJ2aWNlPEwsIFMsIE0+LFxuICAgIHByb3RlY3RlZCBtYXBTZXJ2aWNlOiBBYnN0cmFjdEFybGFzTWFwU2VydmljZTxMLCBTLCBNPikge1xuICAgICAgdGhpcy5iYXNlbWFwU2VydmljZS5wcm90b21hcEJhc2VtYXBBZGRlZCQucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQoKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5yZW9yZGVyTGF5ZXJzKCkpO1xuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvKiogaW5pdCB2YWx1ZXMgKi9cbiAgICBpZiAoIXRoaXMuaW5pdENlbnRlcikge1xuICAgICAgdGhpcy5pbml0Q2VudGVyID0gWzAsIDBdO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbml0Wm9vbSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuaW5pdFpvb20gPT09IG51bGwpIHtcbiAgICAgIHRoaXMuaW5pdFpvb20gPSAzO1xuICAgIH1cbiAgICBpZiAodGhpcy5tYXhab29tID09PSB1bmRlZmluZWQgfHwgdGhpcy5tYXhab29tID09PSBudWxsKSB7XG4gICAgICB0aGlzLm1heFpvb20gPSAyMztcbiAgICB9XG4gICAgdGhpcy5taW5ab29tID0gdGhpcy5taW5ab29tID8/IDA7XG5cbiAgICAvKiogQkFTRU1BUFMgKi9cbiAgICBpZiAodGhpcy5kZWZhdWx0QmFzZW1hcFN0eWxlICYmIHR5cGVvZiB0aGlzLmRlZmF1bHRCYXNlbWFwU3R5bGUuc3R5bGVGaWxlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5kZWZhdWx0QmFzZW1hcFN0eWxlLnVybCA9IHRoaXMuZGVmYXVsdEJhc2VtYXBTdHlsZS5zdHlsZUZpbGU7XG4gICAgfVxuICAgIHRoaXMuYmFzZW1hcFN0eWxlcy5mb3JFYWNoKGJtID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYm0uc3R5bGVGaWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICBibS51cmwgPSAoYm0uc3R5bGVGaWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmJhc2VtYXBTZXJ2aWNlLnNldEJhc2VtYXBzKG5ldyBBcmxhc0Jhc2VtYXBzKHRoaXMuZGVmYXVsdEJhc2VtYXBTdHlsZSwgdGhpcy5iYXNlbWFwU3R5bGVzKSk7XG4gICAgdGhpcy5iYXNlbWFwU2VydmljZS5mZXRjaFNvdXJjZXMkKClcbiAgICAgIC5waXBlKGZpbmFsaXplKCgpID0+IHRoaXMuZGVjbGFyZU1hcCgpKSlcbiAgICAgIC5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubWFwICYmIHRoaXMubWFwLmdldE1hcFByb3ZpZGVyKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNoYW5nZXNbJ2JvdW5kc1RvRml0J10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBuZXdCb3VuZHNUb0ZpdCA9IGNoYW5nZXNbJ2JvdW5kc1RvRml0J10uY3VycmVudFZhbHVlO1xuICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMobmV3Qm91bmRzVG9GaXQsIHtcbiAgICAgICAgICBtYXhab29tOiB0aGlzLmZpdEJvdW5kc01heFpvb20sXG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLmZpdEJvdW5kc09mZlNldFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VzWydmZWF0dXJlVG9IaWdodExpZ2h0J10gIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiBjaGFuZ2VzWydmZWF0dXJlVG9IaWdodExpZ2h0J10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWydmZWF0dXJlVG9IaWdodExpZ2h0J10ucHJldmlvdXNWYWx1ZSkge1xuICAgICAgICBjb25zdCBmZWF0dXJlVG9IaWdodExpZ2h0ID0gY2hhbmdlc1snZmVhdHVyZVRvSGlnaHRMaWdodCddLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRGZWF0dXJlKGZlYXR1cmVUb0hpZ2h0TGlnaHQpO1xuICAgICAgfVxuICAgICAgaWYgKGNoYW5nZXNbJ2ZlYXR1cmVzVG9TZWxlY3QnXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICYmIGNoYW5nZXNbJ2ZlYXR1cmVzVG9TZWxlY3QnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2ZlYXR1cmVzVG9TZWxlY3QnXS5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzVG9TZWxlY3QgPSBjaGFuZ2VzWydmZWF0dXJlc1RvU2VsZWN0J10uY3VycmVudFZhbHVlO1xuICAgICAgICB0aGlzLnNlbGVjdEZlYXR1cmVzKGZlYXR1cmVzVG9TZWxlY3QpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBJZiB0cmFuc2Zvcm1SZXF1ZXN0JyBASW5wdXQgd2FzIG5vdCBzZXQsIHNldCBhIGRlZmF1bHQgdmFsdWUgOiBhIGZ1bmN0aW9uIHRoYXQgbWFpbnRhaW5zIHRoZSBzYW1lIHVybCAqL1xuICBwdWJsaWMgaW5pdFRyYW5zZm9ybVJlcXVlc3QoKSB7XG4gICAgaWYgKCF0aGlzLnRyYW5zZm9ybVJlcXVlc3QpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtUmVxdWVzdCA9IHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5nZXRJbml0VHJhbnNmb3JtUmVxdWVzdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBab29tcyBvbiBjbGlja2VkIGZlYXR1cmUgZnJvbSBtYXAgbW91c2UgZXZlbnQgZS5cbiAgICogQHBhcmFtIG1vdXNlRXZlbnQgTWFwIG1vdXNlIGV2ZW50IHByb3ZpZGVkIGJ5IHRoZSBtYXAgaW5zdGFuY2UuXG4gICAqL1xuICBwdWJsaWMgem9vbU9uQ2xpY2sobW91c2VFdmVudDogTWFwTW91c2VFdmVudCkge1xuICAgIGNvbnN0IHpvb20gPSB0aGlzLm1hcC5nZXRab29tKCk7XG4gICAgICBsZXQgbmV3Wm9vbTogbnVtYmVyO1xuICAgICAgaWYgKHpvb20gPj0gMCAmJiB6b29tIDwgMykge1xuICAgICAgICBuZXdab29tID0gNDtcbiAgICAgIH0gZWxzZSBpZiAoem9vbSA+PSAzICYmIHpvb20gPCA1KSB7XG4gICAgICAgIG5ld1pvb20gPSA1O1xuICAgICAgfSBlbHNlIGlmICh6b29tID49IDUgJiYgem9vbSA8IDcpIHtcbiAgICAgICAgbmV3Wm9vbSA9IDc7XG4gICAgICB9IGVsc2UgaWYgKHpvb20gPj0gNyAmJiB6b29tIDwgMTApIHtcbiAgICAgICAgbmV3Wm9vbSA9IDEwO1xuICAgICAgfSBlbHNlIGlmICh6b29tID49IDEwICYmIHpvb20gPCAxMSkge1xuICAgICAgICBuZXdab29tID0gMTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdab29tID0gMTI7XG4gICAgICB9XG4gICAgICB0aGlzLm1hcEZyYW1ld29ya1NlcnZpY2UuZmx5VG8obW91c2VFdmVudC5sbmdMYXQubGF0LCBtb3VzZUV2ZW50LmxuZ0xhdC5sbmcsIG5ld1pvb20sIHRoaXMubWFwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIGFsbCByZW5kZXJlZCBmZWF0dXJlcyBvbiB0aGUgcG9zaXRpb24gdGhhdCB3YXMgY2xpY2tlZCBvbiwgb24gYSBsYXllcjsgYW5kIGVtaXRzIHRob3NlIGZlYXR1cmVzLlxuICAgKiBAcGFyYW0gbWFwTGF5ZXJNb3VzZUV2ZW50IE1hcCBtb3VzZSBldmVudCBwcm92aWRlZCBieSBhIGxheWVyIGluc3RhbmNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHF1ZXJ5UmVuZGVyKG1hcExheWVyTW91c2VFdmVudDogTWFwTGF5ZXJNb3VzZUV2ZW50KSB7XG4gICAgY29uc3QgaGFzQ3Jvc3NPckRyYXdMYXllciA9IHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5xdWVyeUZlYXR1cmVzKG1hcExheWVyTW91c2VFdmVudCwgdGhpcy5tYXAsIENST1NTX0xBWUVSX1BSRUZJWCk7XG4gICAgaWYgKCF0aGlzLmRyYXdTZXJ2aWNlLmlzRHJhd2luZ0Jib3ggJiYgIXRoaXMuZHJhd1NlcnZpY2UuaXNEcmF3aW5nUG9seWdvblxuICAgICAgJiYgIXRoaXMuZHJhd1NlcnZpY2UuaXNEcmF3aW5nQ2lyY2xlICYmICF0aGlzLmRyYXdTZXJ2aWNlLmlzSW5TaW1wbGVEcmF3TW9kZSAmJiAhaGFzQ3Jvc3NPckRyYXdMYXllcikge1xuICAgICAgdGhpcy5vbkZlYXR1cmVDbGljay5uZXh0KHsgZmVhdHVyZXM6IG1hcExheWVyTW91c2VFdmVudC5mZWF0dXJlcywgcG9pbnQ6IFttYXBMYXllck1vdXNlRXZlbnQubG5nTGF0LmxuZywgbWFwTGF5ZXJNb3VzZUV2ZW50LmxuZ0xhdC5sYXRdIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAZGVzY3JpcHRpb24gQWRkcyB0aGUgY3VzdG9tIGljb25zIGdpdmVuIGluIHRoZSBjb21wb25lbnQncyBpbnB1dCAqL1xuICBwdWJsaWMgYWRkSWNvbnMoKSB7XG4gICAgaWYgKHRoaXMuaWNvbnMpIHtcbiAgICAgIHRoaXMuaWNvbnMuZm9yRWFjaChpY29uID0+IHtcbiAgICAgICAgY29uc3QgaWNvbk5hbWUgPSBpY29uLnBhdGguc3BsaXQoJy4nKVswXTtcbiAgICAgICAgY29uc3QgaWNvblBhdGggPSB0aGlzLklDT05TX0JBU0VfUEFUSCArIGljb24ucGF0aDtcbiAgICAgICAgY29uc3QgaWNvbkVycm9yTWVzc2FnZSA9ICdUaGUgaWNvbiBcIicgKyB0aGlzLklDT05TX0JBU0VfUEFUSCArIGljb24ucGF0aCArICdcIiBpcyBub3QgZm91bmQnO1xuICAgICAgICB0aGlzLm1hcEZyYW1ld29ya1NlcnZpY2UuYWRkSW1hZ2UoaWNvbk5hbWUsIGljb25QYXRoLCB0aGlzLm1hcCwgaWNvbkVycm9yTWVzc2FnZSwgeyAnc2RmJzogaWNvbi5yZWNvbG9yYWJsZSB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5hZGRJbWFnZSgncm90YXRlJywgdGhpcy5JQ09OU19CQVNFX1BBVEggKyAncm90YXRlLzAxLnBuZycsIHRoaXMubWFwLCAnUm90YXRlIG5vdCBmb3VuZCcpO1xuICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5hZGRJbWFnZSgncmVzaXplJywgdGhpcy5JQ09OU19CQVNFX1BBVEggKyAncmVzaXplLzAxLnBuZycsIHRoaXMubWFwLCAnUmVzaXplIG5vdCBmb3VuZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBDcmVhdGVzIHRoZSBtYXAgaW5zdGFuY2UgYW5kIGFkZHMgdGhlIGJhc2VtYXAsIGFybGFzIGRhdGFcbiAgICogYW5kIHN0YXJ0cyBsaXN0ZW5pbmcgdG8gYXJsYXMgZGF0YSBjaGFuZ2VzIGFuZCBsYXllcnMgdmlzaWJpbGl0eSB1cGRhdGVzLlxuICAgKiBJdCBhbHNvIHN0YXJ0cyBlbWl0aW5nIG1hcCBtb3ZlZW5kIGV2ZW50LlxuICAgKi9cbiAgcHVibGljIGRlY2xhcmVNYXAoKSB7XG4gICAgdGhpcy5pbml0VHJhbnNmb3JtUmVxdWVzdCgpO1xuICAgIGNvbnN0IGNvbmZpZzogTWFwQ29uZmlnPE0+ID0ge1xuICAgICAgZGlzcGxheUN1cnJlbnRDb29yZGluYXRlczogdGhpcy5kaXNwbGF5Q3VycmVudENvb3JkaW5hdGVzLFxuICAgICAgZml0Qm91bmRzUGFkZGluZzogdGhpcy5maXRCb3VuZHNQYWRkaW5nLFxuICAgICAgbWFyZ2VQYW5Gb3JMb2FkOiB0aGlzLm1hcmdlUGFuRm9yTG9hZCxcbiAgICAgIG1hcmdlUGFuRm9yVGVzdDogdGhpcy5tYXJnZVBhbkZvclRlc3QsXG4gICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgd3JhcExhdExuZzogdGhpcy53cmFwTGF0TG5nLFxuICAgICAgbWF4V2lkdGhTY2FsZTogdGhpcy5tYXhXaWR0aFNjYWxlLFxuICAgICAgdW5pdFNjYWxlOiB0aGlzLnVuaXRTY2FsZSxcbiAgICAgIG1hcFByb3ZpZGVyT3B0aW9uczoge1xuICAgICAgICBjb250YWluZXI6IHRoaXMuaWQsXG4gICAgICAgIHN0eWxlOiB0aGlzLmJhc2VtYXBTZXJ2aWNlLmdldEluaXRTdHlsZSh0aGlzLmJhc2VtYXBTZXJ2aWNlLmJhc2VtYXBzLmdldFNlbGVjdGVkKCkpLFxuICAgICAgICBjZW50ZXI6IHRoaXMuaW5pdENlbnRlcixcbiAgICAgICAgem9vbTogdGhpcy5pbml0Wm9vbSxcbiAgICAgICAgbWF4Wm9vbTogdGhpcy5tYXhab29tLFxuICAgICAgICBtaW5ab29tOiB0aGlzLm1pblpvb20sXG4gICAgICAgIHJlbmRlcldvcmxkQ29waWVzOiB0cnVlLFxuICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRoaXMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICBsb2NhbGU6IHtcbiAgICAgICAgICAnTmF2aWdhdGlvbkNvbnRyb2wuWm9vbUluJzogdGhpcy50cmFuc2xhdGUuaW5zdGFudChaT09NX0lOKSxcbiAgICAgICAgICAnTmF2aWdhdGlvbkNvbnRyb2wuWm9vbU91dCc6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoWk9PTV9PVVQpLFxuICAgICAgICAgICdOYXZpZ2F0aW9uQ29udHJvbC5SZXNldEJlYXJpbmcnOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KFJFU0VUX0JFQVJJTkcpXG4gICAgICAgIH0sXG4gICAgICAgIHBpdGNoV2l0aFJvdGF0ZTogZmFsc2UsXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IHRoaXMudHJhbnNmb3JtUmVxdWVzdCxcbiAgICAgICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZSxcbiAgICAgIH0gYXMgTSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIG1hcEF0dHJpYnV0aW9uOiB7XG4gICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLm1hcEF0dHJpYnV0aW9uUG9zaXRpb24sXG4gICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICBjb21wYWN0OiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICBlbmFibGU6IHRoaXMuZGlzcGxheVNjYWxlXG4gICAgICAgIH0sXG4gICAgICAgIG5hdmlnYXRpb25Db250cm9sOiB7XG4gICAgICAgICAgZW5hYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHBpdGNoVG9nZ2xlOiB7XG4gICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZzogeyBiZWFyaW5nOiAtMjAsIHBpdGNoOiA3MCwgbWlucGl0Y2h6b29tOiAxMSB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMubWFwID0gdGhpcy5tYXBGcmFtZXdvcmtTZXJ2aWNlLmNyZWF0ZU1hcChjb25maWcpO1xuICAgIGZyb21FdmVudCh3aW5kb3csICdiZWZvcmV1bmxvYWQnKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5vbk1hcENsb3NlZC5uZXh0KHRoaXMubWFwLmdldE1hcEV4dGVuZCgpKTtcbiAgICB9KTtcblxuICAgIHRoaXMubWFwLm9uQ3VzdG9tRXZlbnQoJ2JlZm9yZU9uTG9hZEluaXQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmJhc2VtYXBTZXJ2aWNlLmRlY2xhcmVQcm90b21hcFByb3RvY29sKHRoaXMubWFwKTtcbiAgICAgIHRoaXMuYmFzZW1hcFNlcnZpY2UuYWRkUHJvdG9tYXBCYXNlbWFwKHRoaXMubWFwKTtcbiAgICAgIHRoaXMuYWRkSWNvbnMoKTtcbiAgICAgIHRoaXMubWFwU2VydmljZS5kZWNsYXJlQXJsYXNEYXRhU291cmNlcyh0aGlzLmRhdGFTb3VyY2VzLCB0aGlzLmVtcHR5RGF0YSwgdGhpcy5tYXApO1xuICAgICAgdGhpcy5tYXBTZXJ2aWNlLmRlY2xhcmVCYXNlbWFwU291cmNlcyh0aGlzLm1hcFNvdXJjZXMsIHRoaXMubWFwKTtcbiAgICAgIHRoaXMubWFwU2VydmljZS5hZGRBcmxhc0RhdGFMYXllcnModGhpcy52aXN1YWxpc2F0aW9uU2V0c0NvbmZpZywgdGhpcy5tYXBMYXllcnMsIHRoaXMubWFwKTtcbiAgICAgIHRoaXMubGlzdGVuVG9MYXllcnNFdmVudHMoKTtcbiAgICB9KTtcblxuICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5vbk1hcEV2ZW50KCdsb2FkJywgdGhpcy5tYXAsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLm1hcExheWVycyAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnZpc2liaWxpdHlVcGRhdGVyLnN1YnNjcmliZSh2aXNpYmlsaXR5U3RhdHVzID0+IHtcbiAgICAgICAgICB0aGlzLm1hcFNlcnZpY2UudXBkYXRlVmlzaWJpbGl0eSh2aXNpYmlsaXR5U3RhdHVzLCB0aGlzLnZpc3VhbGlzYXRpb25TZXRzQ29uZmlnLCB0aGlzLm1hcCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5vbk1hcExvYWRlZC5uZXh0KHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5tYXAub25Nb3ZlRW5kKHRoaXMubWFwU2VydmljZS52aXN1YWxpc2F0aW9uc1NldHMpLnN1YnNjcmliZSgobW92ZVJlc3VsdCA9PiB7XG4gICAgICB0aGlzLm9uTW92ZS5uZXh0KG1vdmVSZXN1bHQpO1xuICAgIH0pKTtcblxuICAgIGlmICh0aGlzLnJlZHJhd1NvdXJjZSkge1xuICAgICAgdGhpcy5yZWRyYXdTb3VyY2UucGlwZSh0YWtlVW50aWwodGhpcy5fb25EZXN0cm95JCkpLnN1YnNjcmliZShzZCA9PiB7XG4gICAgICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5zZXREYXRhVG9HZW9qc29uU291cmNlKHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5nZXRTb3VyY2Uoc2Quc291cmNlLCB0aGlzLm1hcCksIHtcbiAgICAgICAgICAndHlwZSc6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgJ2ZlYXR1cmVzJzogc2QuZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gTGlzdGVucyB0byBldmVudHMgb24gbWFwTGF5ZXJzIGlucHV0IChjb25maWd1cmVkIGxheWVycykuXG4gICAqL1xuICBwdWJsaWMgbGlzdGVuVG9MYXllcnNFdmVudHMoKSB7XG4gICAgLyoqIFpvb21zIG9uIHRoZSBjbGlja2VkIGZlYXR1cmUgb2YgdGhlIGdpdmVuIGxheWVycy4gKi9cbiAgICB0aGlzLm1hcExheWVycy5ldmVudHMuem9vbU9uQ2xpY2suZm9yRWFjaChsYXllcklkID0+IHtcbiAgICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5vbkxheWVyRXZlbnQoJ2NsaWNrJywgdGhpcy5tYXAsIGxheWVySWQsIChlKSA9PiB0aGlzLnpvb21PbkNsaWNrKGUpKTtcbiAgICB9KTtcbiAgICB0aGlzLm1hcExheWVycy5ldmVudHMub25Ib3Zlci5mb3JFYWNoKGxheWVySWQgPT4ge1xuICAgICAgLyoqIEVtaXRzIHRoZSBob3ZlcmVkIGZlYXR1cmUgb24gbW91c2Vtb3ZlLiAqL1xuICAgICAgdGhpcy5tYXBGcmFtZXdvcmtTZXJ2aWNlLm9uTGF5ZXJFdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5tYXAsIGxheWVySWQsIChlKSA9PlxuICAgICAgICB0aGlzLm9uRmVhdHVyZUhvdmVyLm5leHQoeyBmZWF0dXJlczogZS5mZWF0dXJlcywgcG9pbnQ6IFtlLmxuZ0xhdC5sbmcsIGUubG5nTGF0LmxhdF0gfSkpO1xuICAgICAgLyoqIEVtaXRzIGFuIGVtcHR5IG9iamVjdCBvbiBtb3VzZSBsZWF2aW5nIGEgZmVhdHVyZS4gKi9cbiAgICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5vbkxheWVyRXZlbnQoJ21vdXNlbGVhdmUnLCB0aGlzLm1hcCwgbGF5ZXJJZCwgKGUpID0+XG4gICAgICAgIHRoaXMub25GZWF0dXJlSG92ZXIubmV4dCh7fSkpO1xuICAgIH0pO1xuICAgIC8qKiBFbWl0cyB0aGUgY2xpY2tlZCBvbiBmZWF0dXJlLiAqL1xuICAgIHRoaXMubWFwTGF5ZXJzLmV2ZW50cy5lbWl0T25DbGljay5mb3JFYWNoKGxheWVySWQgPT4ge1xuICAgICAgdGhpcy5tYXBGcmFtZXdvcmtTZXJ2aWNlLm9uTGF5ZXJFdmVudCgnY2xpY2snLCB0aGlzLm1hcCwgbGF5ZXJJZCwgKGUpID0+XG4gICAgICAgIHRoaXMucXVlcnlSZW5kZXIoZSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IGRyYXdQb2x5Z29uTGF5ZXJzID0gW1xuICAgICAgJ2dsLWRyYXctcG9seWdvbi1zdHJva2UtaW5hY3RpdmUnLFxuICAgICAgJ2dsLWRyYXctcG9seWdvbi1zdHJva2UtYWN0aXZlJyxcbiAgICAgICdnbC1kcmF3LXBvbHlnb24tc3Ryb2tlLXN0YXRpYydcbiAgICBdLm1hcChsYXllciA9PiBbJy5jb2xkJywgJy5ob3QnXVxuICAgICAgLm1hcChpZCA9PiBsYXllci5jb25jYXQoaWQpKSlcbiAgICAgIC5yZWR1Y2UoKHAsIGFjKSA9PiBhYy5jb25jYXQocCksIFtdKTtcbiAgICAvKiogU2V0cyBtb3VzZSBjdXJzb3Igb24gZHJhd24gZmVhdHVyZXMgKi9cbiAgICBkcmF3UG9seWdvbkxheWVycy5mb3JFYWNoKGxheWVySWQgPT4ge1xuICAgICAgdGhpcy5tYXBGcmFtZXdvcmtTZXJ2aWNlLm9uTGF5ZXJFdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5tYXAsIGxheWVySWQsIChlKSA9PlxuICAgICAgICB0aGlzLm1hcEZyYW1ld29ya1NlcnZpY2Uuc2V0TWFwQ3Vyc29yKHRoaXMubWFwLCAncG9pbnRlcicpKTtcbiAgICAgIHRoaXMubWFwRnJhbWV3b3JrU2VydmljZS5vbkxheWVyRXZlbnQoJ21vdXNlbGVhdmUnLCB0aGlzLm1hcCwgbGF5ZXJJZCwgKGUpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZHJhd1NlcnZpY2UuaXNEcmF3aW5nKCkpIHtcbiAgICAgICAgICB0aGlzLm1hcEZyYW1ld29ya1NlcnZpY2Uuc2V0TWFwQ3Vyc29yKHRoaXMubWFwLCAnY3Jvc3NoYWlyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXBGcmFtZXdvcmtTZXJ2aWNlLnNldE1hcEN1cnNvcih0aGlzLm1hcCwgJycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBTZXRzIHRoZSBsYXllcnMgb3JkZXIgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IG9yZGVyIG9mIGB2aXN1YWxpc2F0aW9uU2V0c0NvbmZpZ2AgbGlzdCovXG4gIHB1YmxpYyByZW9yZGVyTGF5ZXJzKCkge1xuICAgIHRoaXMubWFwU2VydmljZS5yZW9yZGVyTGF5ZXJzKHRoaXMudmlzdWFsaXNhdGlvblNldHNDb25maWcsIHRoaXMubWFwKTtcbiAgfVxuXG4gIC8qKiBAZGVzY3JpcHRpb24gRGlzcGxheSB0aGUgYmFzZW1hcHN3aXRjaGVyICovXG4gIHB1YmxpYyBzaG93QmFzZW1hcFN3aXRjaGVyKCkge1xuICAgIHRoaXMuc2hvd0Jhc2VtYXBMaXN0ID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBAZGVzY3JpcHRpb24gRW1pdHMgZXZlbnQgbm90aWZpeWluZyB0aGF0IHRoZSBiYXNlbWFwIGhhcyBiZWVuIGNoYW5nZWQgKi9cbiAgcHVibGljIG9uQ2hhbmdlQmFzZW1hcFN0eWxlKCkge1xuICAgIHRoaXMub25CYXNlbWFwQ2hhbmdlZC5uZXh0KHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHZpc2liaWxpdHkgc3RhdHVzIG9mIHRoZSBsYXllciBhbmQgZW1pdHMgdGhhdCB1cGRhdGUuXG4gICAqIEBwYXJhbSB2aXN1YWxpc2F0aW9uIHZpc3VhbGlzYXRpb24gc2V0IG5hbWVcbiAgICogQHBhcmFtIGwgbGF5ZXIgaWRcbiAgICogQHBhcmFtIHZpc2libGUgd2hldGhlciB0aGUgbGF5ZXIgaXMgZW5hYmxlZCBhbmQgdmlzaWJsZSBpbiB0aGUgdmlzdWFsaXNhdGlvbiBzZXRcbiAgICovXG4gIHB1YmxpYyBlbWl0TGVnZW5kVmlzaWJpbGl0eSh2aXN1YWxpc2F0aW9uOiBzdHJpbmcsIGw6IHN0cmluZywgdmlzaWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgIC8vIENvcHkgdGhlIG1hcCBzbyB0aGUgcGlwZSB1cGRhdGVzIHRoZSB2YWx1ZXNcbiAgICB0aGlzLnZpc2liaWxpdHlTdGF0dXMgPSBuZXcgTWFwKHRoaXMudmlzaWJpbGl0eVN0YXR1cyk7XG4gICAgdGhpcy52aXNpYmlsaXR5U3RhdHVzLnNldCh2aXN1YWxpc2F0aW9uICsgQVJMQVNfVlNFVCArIGwsIHZpc2libGUpO1xuICAgIHRoaXMubGVnZW5kVmlzaWJpbHR5U3RhdHVzLm5leHQodGhpcy52aXNpYmlsaXR5U3RhdHVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gRW1pdHMgdGhlIHZpc2libGUgdmlzdWFsaXNhdGlvbiBzZXRcbiAgICogQHBhcmFtIHZpc3VhbGlzYXRpb25OYW1lIE5hbWUgb2YgdGhlIHZpc3VhbGlzYXRpb24uXG4gICAqL1xuICBwdWJsaWMgZW1pdFZpc3VhbGlzYXRpb25zKHZpc3VhbGlzYXRpb25OYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsYXllcnMgPSB0aGlzLm1hcFNlcnZpY2UudXBkYXRlTGF5b3V0VmlzaWJpbGl0eSh2aXN1YWxpc2F0aW9uTmFtZSwgdGhpcy52aXN1YWxpc2F0aW9uU2V0c0NvbmZpZywgdGhpcy5tYXApO1xuICAgIHRoaXMudmlzdWFsaXNhdGlvbnMuZW1pdChsYXllcnMpO1xuICAgIHRoaXMucmVvcmRlckxheWVycygpO1xuICB9XG5cbiAgcHVibGljIGRvd25sb2FkTGF5ZXJTb3VyY2UoZG93bmFsb2FkOiB7IGxheWVyOiBhbnk7IGRvd25sb2FkVHlwZTogc3RyaW5nOyB9KTogdm9pZCB7XG4gICAgY29uc3QgZG93bmxvZGVkU291cmNlID0ge1xuICAgICAgbGF5ZXJJZDogZG93bmFsb2FkLmxheWVyLmlkLFxuICAgICAgbGF5ZXJOYW1lOiBnZXRMYXllck5hbWUoZG93bmFsb2FkLmxheWVyLmlkKSxcbiAgICAgIGNvbGxlY3Rpb246IGRvd25hbG9hZC5sYXllci5tZXRhZGF0YS5jb2xsZWN0aW9uLFxuICAgICAgc291cmNlTmFtZTogZG93bmFsb2FkLmxheWVyLnNvdXJjZSBhcyBzdHJpbmcsXG4gICAgICBkb3dubG9hZFR5cGU6IGRvd25hbG9hZC5kb3dubG9hZFR5cGVcbiAgICB9O1xuICAgIHRoaXMuZG93bmxvYWRTb3VyY2VFbWl0dGVyLm5leHQoZG93bmxvZGVkU291cmNlKTtcbiAgfVxuXG4gIC8qKiBwdXRzIHRoZSB2aXN1YWxpc2F0aW9uIHNldCBsaXN0IGluIHRoZSBuZXcgb3JkZXIgYWZ0ZXIgZHJvcHBpbmcgKi9cbiAgcHVibGljIGRyb3AoZXZlbnQ6IENka0RyYWdEcm9wPHN0cmluZ1tdPikge1xuICAgIG1vdmVJdGVtSW5BcnJheSh0aGlzLnZpc3VhbGlzYXRpb25TZXRzQ29uZmlnLCBldmVudC5wcmV2aW91c0luZGV4LCBldmVudC5jdXJyZW50SW5kZXgpO1xuICAgIHRoaXMucmVvcmRlckxheWVycygpO1xuICB9XG5cbiAgLyoqIHB1dHMgdGhlIGxheWVycyBsaXN0IGluIHRoZSBuZXcgb3JkZXIgYWZ0ZXIgZHJvcHBpbmcgKi9cbiAgcHVibGljIGRyb3BMYXllcihldmVudDogQ2RrRHJhZ0Ryb3A8c3RyaW5nW10+LCB2aXN1TmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbGF5ZXJzID0gQXJyYXkuZnJvbSh0aGlzLm1hcFNlcnZpY2UuZmluZFZpc3VhbGlzYXRpb25TZXRMYXllcih2aXN1TmFtZSwgdGhpcy52aXN1YWxpc2F0aW9uU2V0c0NvbmZpZykpO1xuICAgIG1vdmVJdGVtSW5BcnJheShsYXllcnMsIGV2ZW50LnByZXZpb3VzSW5kZXgsIGV2ZW50LmN1cnJlbnRJbmRleCk7XG4gICAgdGhpcy5tYXBTZXJ2aWNlLnNldFZpc3VhbGlzYXRpb25TZXRMYXllcnModmlzdU5hbWUsIGxheWVycywgdGhpcy52aXN1YWxpc2F0aW9uU2V0c0NvbmZpZyk7XG4gICAgdGhpcy5yZW9yZGVyTGF5ZXJzKCk7XG4gIH1cbiAgcHVibGljIGhpZGVCYXNlbWFwU3dpdGNoZXIoKSB7XG4gICAgdGhpcy5zaG93QmFzZW1hcExpc3QgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogRml0IHRvIGdpdmVuIGJvdW5kcy4gT3B0aW9ucyBhcmUgZm9yIHBhZGRpbmcuXG4gICAqIEBwYXJhbSBib3VuZHMgQm91bmRzIG9mIHRoZSBtYXAgdG8gZml0IHRvLlxuICAgKi9cbiAgcHVibGljIGZpdFRvUGFkZGVkQm91bmRzKGJvdW5kczogQXJsYXNMbmdMYXRCb3VuZHMpIHtcbiAgICB0aGlzLm1hcC5maXRUb1BhZGRlZEJvdW5kcyhib3VuZHMpO1xuICB9XG4gIC8qKlxuICAgKiBDZW50ZXJzIHRoZSBtYXAgdG8gdGhlIGdpdmVuIGxhdGl0dWRlL2xvbmdpdHVkZSBjb29yZGluYXRlcy5cbiAgICogQHBhcmFtIGxuZ0xhdCBMYXRpdHVkZS9sb25naXR1ZGUgY29vcmRpbmF0ZXMuXG4gICAqL1xuICBwdWJsaWMgbW92ZVRvQ29vcmRpbmF0ZXMobG5nTGF0OiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gICAgdGhpcy5tYXAuc2V0Q2VudGVyKGxuZ0xhdCk7XG4gIH1cbiAgLyoqIEhpZ2hsaWdodHMsIGluIGFsbCBkYXRhIHNvdXJjZXMsdGhlIGZlYXR1cmUocykgaGF2aW5nIHRoZSBnaXZlbiBlbGVtZW50SWRlbnRpZmllciAqL1xuICBwcml2YXRlIGhpZ2hsaWdodEZlYXR1cmUoZmVhdHVyZVRvSGlnaHRMaWdodDogeyBpc2xlYXZpbmc6IGJvb2xlYW47IGVsZW1lbnRpZGVudGlmaWVyOiBFbGVtZW50SWRlbnRpZmllcjsgfSkge1xuICAgIHRoaXMubWFwU2VydmljZS5oaWdobGlnaHRGZWF0dXJlKHRoaXMubWFwTGF5ZXJzLCB0aGlzLm1hcCwgZmVhdHVyZVRvSGlnaHRMaWdodCk7XG4gIH1cbiAgLyoqIFNlbGVjdHMsIGluIGFsbCBkYXRhIHNvdXJjZXMsdGhlIGZlYXR1cmUocykgaGF2aW5nIHRoZSBnaXZlbiBlbGVtZW50SWRlbnRpZmllciAqL1xuICBwcml2YXRlIHNlbGVjdEZlYXR1cmVzKGVsZW1lbnRUb1NlbGVjdDogQXJyYXk8RWxlbWVudElkZW50aWZpZXI+KSB7XG4gICAgdGhpcy5tYXBTZXJ2aWNlLnNlbGVjdEZlYXR1cmVzKHRoaXMubWFwTGF5ZXJzLCB0aGlzLm1hcCwgZWxlbWVudFRvU2VsZWN0KTtcbiAgfVxuICAvKiogU2VsZWN0cywgaW4gYWxsIGRhdGEgc291cmNlcywgYWxsIHRoZSBmZWF0dXJlcyBoYXZpbmcgdGhlIGdpdmVuIGVsZW1lbnRJZGVudGlmaWVycyBhbmQgdW5kZXIgdGhlIGdpdmVuIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSBmZWF0dXJlcyBsaXN0IG9mIGZlYXR1cmVzIGlkZW50aWZpZXJzLlxuICAgKiBAcGFyYW0gY29sbGVjdGlvbiBkYXRhIGNvbGxlY3Rpb24gKG1ldGFkYXRhIG9mIHRoZSBkYXRhIHNvdXJjZSkuXG4gICovXG4gIHB1YmxpYyBzZWxlY3RGZWF0dXJlc0J5Q29sbGVjdGlvbihmZWF0dXJlczogQXJyYXk8RWxlbWVudElkZW50aWZpZXI+LCBjb2xsZWN0aW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1hcFNlcnZpY2Uuc2VsZWN0RmVhdHVyZXNCeUNvbGxlY3Rpb24odGhpcy5tYXBMYXllcnMsIHRoaXMubWFwLCBmZWF0dXJlcywgY29sbGVjdGlvbik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldE1hcEpzb25TY2hlbWEoKTogT2JqZWN0IHtcbiAgICByZXR1cm4gbWFwSnNvblNjaGVtYTtcbiAgfVxuICAvKiogRGVzdHJveXMgYWxsIHRoZSBjb21wb25lbnRzIHN1YnNjcmlwdGlvbnMuICovXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tYXApIHtcbiAgICAgIHRoaXMubWFwLnVuc3Vic2NyaWJlRXZlbnRzKCk7XG4gICAgfVxuICAgIHRoaXMuX29uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICB0aGlzLl9vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICAvKiogQGRlc2NyaXB0aW9uIEVuYWJsZXMgYmJveCBkcmF3aW5nIG1vZGUuKi9cbiAgcHVibGljIGFkZEdlb0JveCgpIHtcbiAgICB0aGlzLmRyYXdDb21wb25lbnQuYWRkR2VvQm94KCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgYWxsIHRoZSBhb2lzIGlmIG5vbmUgb2YgdGhlbSBpcyBzZWxlY3RlZC4gT3RoZXJ3aXNlIGl0IHJlbW92ZXMgdGhlIHNlbGVjdGVkIG9uZSBvbmx5XG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlQW9pcygpIHtcbiAgICB0aGlzLmRyYXdDb21wb25lbnQucmVtb3ZlQW9pcygpO1xuICB9XG5cbiAgLyoqIEBkZXNjcmlwdGlvbiBEZWxldGVzIHRoZSBzZWxlY3RlZCBkcmF3biBnZW9tZXRyeS4gSWYgbm8gZHJhd24gZ2VvbWV0cnkgaXMgc2VsZWN0ZWQsIGFsbCBnZW9tZXRyaWVzIGFyZSBkZXRlbGV0ZWQgKi9cbiAgcHVibGljIGRlbGV0ZVNlbGVjdGVkSXRlbSgpIHtcbiAgICB0aGlzLmRyYXdDb21wb25lbnQuZGVsZXRlU2VsZWN0ZWRJdGVtKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gU3dpdGNoZXMgdG8gYSBkcmF3aW5nIG1vZGUgb2YgYSBEUkFXX1BPTFlHT04sIERSQVdfQ0lSQ0xFIG9yIERSQVdfUkFESVVTX0NJUkNMRS5cbiAgICogQHBhcmFtIG1vZGUgRHJhdyBtb2RlIChEUkFXX1BPTFlHT04sIERSQVdfQ0lSQ0xFIG9yIERSQVdfUkFESVVTX0NJUkNMRSkuIERlZmF1bHQgdG8gRFJBV19QT0xZR09OXG4gICAqIEBwYXJhbSBvcHRpb24gTWFwYm94ZHJhdyBvcHRpb24uXG4gICAqL1xuICBwdWJsaWMgc3dpdGNoVG9EcmF3TW9kZShtb2RlPzogc3RyaW5nLCBvcHRpb24/OiBhbnkpIHtcbiAgICB0aGlzLmRyYXdDb21wb25lbnQuc3dpdGNoVG9EcmF3TW9kZShtb2RlLCBvcHRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBTd2l0Y2hlcyB0byBkaXJlY3Rfc2VsZWN0IG1vZGUuXG4gICAqIEBwYXJhbSBvcHRpb24gTWFwYm94ZHJhdyBvcHRpb24uXG4gICAqL1xuICBwdWJsaWMgc3dpdGNoVG9EaXJlY3RTZWxlY3RNb2RlKG9wdGlvbj86IHsgZmVhdHVyZUlkczogQXJyYXk8c3RyaW5nPjsgYWxsb3dDaXJjbGVSZXNpemU6IGJvb2xlYW47IH1cbiAgICB8IHsgZmVhdHVyZUlkOiBzdHJpbmc7IGFsbG93Q2lyY2xlUmVzaXplOiBib29sZWFuOyB9KSB7XG4gICAgdGhpcy5kcmF3Q29tcG9uZW50LnN3aXRjaFRvRGlyZWN0U2VsZWN0TW9kZShvcHRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBTd2l0Y2hlcyB0byBzaW1wbGVfc2VsZWN0IG1vZGUuXG4gICAqIEBwYXJhbSBvcHRpb24gTWFwYm94ZHJhdyBvcHRpb24uXG4gICAqL1xuICBwdWJsaWMgc3dpdGNoVG9FZGl0TW9kZSgpIHtcbiAgICB0aGlzLmRyYXdDb21wb25lbnQuc3dpdGNoVG9FZGl0TW9kZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGFsbCB0aGUgZHJhd24gcG9seWdvbnMgYXMgd2t0IG9yIGdlb2pzb24uXG4gICAqIEBwYXJhbSBtb2RlICd3a3QnIHwgJ2dlb2pzb24nXG4gICAqIEByZXR1cm5zIFdrdCBzdHJpbmcgb3IgR2VvanNvbiBvYmplY3QuXG4gICAqL1xuICBwdWJsaWMgZ2V0QWxsUG9seWdvbihtb2RlOiAnd2t0JyB8ICdnZW9qc29uJykge1xuICAgIHJldHVybiB0aGlzLmRyYXdDb21wb25lbnQuZ2V0QWxsUG9seWdvbihtb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gcmV0dXJucyB0aGUgc2VsZWN0ZWQgcG9seWdvbiBnZW9tZXRyeSBpbiBXS1Qgb3IgR2VvSnNvbiBnaXZlbiB0aGUgbW9kZVxuICAgKiBAcGFyYW0gbW9kZSA6ICd3a3QnIHwgJ2dlb2pzb24nXG4gICAqIEByZXR1cm5zIFdrdCBzdHJpbmcgb3IgR2VvanNvbiBvYmplY3QuXG4gICAqL1xuICBwdWJsaWMgZ2V0U2VsZWN0ZWRQb2x5Z29uKG1vZGU6ICd3a3QnIHwgJ2dlb2pzb24nKSB7XG4gICAgcmV0dXJuIHRoaXMuZHJhd0NvbXBvbmVudC5nZXRTZWxlY3RlZFBvbHlnb24obW9kZSk7XG4gIH1cbn1cbiIsIjxkaXYgaWQ9XCJ7e2lkfX1cIiBjbGFzcz1cIm1hcF9fY29udGFpbmVyXCI+XG4gIDxkaXYgY2xhc3M9XCJtYXBfX3Zpc3UtbGlzdFwiICpuZ0lmPVwidmlzdWFsaXNhdGlvblNldHNDb25maWc/Lmxlbmd0aCA+IDBcIj5cbiAgICA8ZGl2IGNsYXNzPVwibWFwX19sZWdlbmQtYnV0dG9uXCIgW21hdFRvb2x0aXBQb3NpdGlvbl09XCInbGVmdCdcIiBtYXRUb29sdGlwPVwie3snTWFuYWdlIGxheWVycycgfCB0cmFuc2xhdGV9fVwiPlxuICAgICAgPG1hdC1pY29uIChjbGljayk9XCJsZWdlbmRPcGVuPSFsZWdlbmRPcGVuXCIgKGtleURvd24pPVwibGVnZW5kT3Blbj0hbGVnZW5kT3BlblwiPmxheWVyczwvbWF0LWljb24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBbaGlkZGVuXT1cIiFsZWdlbmRPcGVuXCIgY2xhc3M9XCJtYXBfX3Zpc3UtbGlzdC0tY29udGFpbmVyXCIgY2RrRHJvcExpc3RcbiAgICAgIChjZGtEcm9wTGlzdERyb3BwZWQpPVwiZHJvcCgkZXZlbnQpXCI+XG4gICAgICA8ZGl2IGNka0RyYWcgY2xhc3M9XCJtYXBfX3Zpc3UtaXRlbVwiICpuZ0Zvcj1cImxldCB2aXN1IG9mIHZpc3VhbGlzYXRpb25TZXRzQ29uZmlnXCI+XG4gICAgICAgIDxkaXYgY2RrRHJhZ0hhbmRsZSBjbGFzcz1cIm1hcF9fdmlzdS10aXRsZVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWFwX192aXN1LXRpdGxlLXRleHRcIiBbY2xhc3MubWFwX192aXN1LXRpdGxlLXRleHQtLWRpc2FibGVkXT1cIiF2aXN1LmVuYWJsZWRcIj5cbiAgICAgICAgICAgIHt7dmlzdS5uYW1lIHwgdHJhbnNsYXRlfX08L3NwYW4+XG4gICAgICAgICAgPG1hdC1zbGlkZS10b2dnbGUgW2NoZWNrZWRdPVwidmlzdS5lbmFibGVkXCIgKGNoYW5nZSk9XCJlbWl0VmlzdWFsaXNhdGlvbnModmlzdS5uYW1lKVwiXG4gICAgICAgICAgICBbbWF0VG9vbHRpcF09XCInc2hvd19sYXllcnMnIHwgdHJhbnNsYXRlXCIgW2hpZGVJY29uXT1cInRydWVcIj48L21hdC1zbGlkZS10b2dnbGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX192aXN1LWNvbnRlbnRcIiBjZGtEcm9wTGlzdCAoY2RrRHJvcExpc3REcm9wcGVkKT1cImRyb3BMYXllcigkZXZlbnQsIHZpc3UubmFtZSlcIj5cbiAgICAgICAgICA8ZGl2IGNka0RyYWcgKm5nRm9yPVwibGV0IGwgb2YgdmlzdS5sYXllcnNcIiBjbGFzcz1cIm1hcF9fdmlzdS1sYXllclwiXG4gICAgICAgICAgICBbY2xhc3MuY2RrLXZpc3VhbGx5LWhpZGRlbl09XCIoKHZpc3UubmFtZSArICc6YXJsYXNfdnNldDonICsgbCkgfCBnZXRWYWx1ZTp2aXNpYmlsaXR5U3RhdHVzKSAhPT0gdHJ1ZVwiPlxuICAgICAgICAgICAgPGRpdiBjZGtEcmFnSGFuZGxlIGNsYXNzPVwibWFwX192aXN1LWxheWVyLWRyYWdcIj5cbiAgICAgICAgICAgICAgPG1hdC1pY29uPmRyYWdfaW5kaWNhdG9yPC9tYXQtaWNvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGFybGFzLWxlZ2VuZCBbY29sbGVjdGlvbl09XCJsIHwgZ2V0Q29sbGVjdGlvbjogbWFwU2VydmljZS5sYXllcnNNYXAgXCIgW2VuYWJsZWRdPVwidmlzdS5lbmFibGVkXCJcbiAgICAgICAgICAgICAgW2xheWVyXT1cImwgfCBnZXRWYWx1ZTogbWFwU2VydmljZS5sYXllcnNNYXAgXCIgW3pvb21dPVwibWFwPy56b29tXCJcbiAgICAgICAgICAgICAgKHZpc2liaWxpdHlTdGF0dXMpPVwiZW1pdExlZ2VuZFZpc2liaWxpdHkodmlzdS5uYW1lLCBsLCAkZXZlbnQpXCIgW2xlZ2VuZFVwZGF0ZXJdPVwibGVnZW5kVXBkYXRlclwiXG4gICAgICAgICAgICAgIFt2aXNpYmlsaXR5VXBkYXRlcl09XCJ2aXNpYmlsaXR5VXBkYXRlclwiXG4gICAgICAgICAgICAgIChkb3dubG9hZFNvdXJjZUVtaXR0ZXIpPVwiZG93bmxvYWRMYXllclNvdXJjZSgkZXZlbnQpXCI+PC9hcmxhcy1sZWdlbmQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjxhcmxhcy1jb29yZGluYXRlcyAqbmdJZj1cImRpc3BsYXlDdXJyZW50Q29vcmRpbmF0ZXNcIiBbY3VycmVudExhdF09XCJtYXA/LmN1cnJlbnRMYXRcIiBbY3VycmVudExuZ109XCJtYXA/LmN1cnJlbnRMbmdcIlxuICAobW92ZVRvQ29vcmRpbmF0ZXMkKT1cIm1vdmVUb0Nvb3JkaW5hdGVzKCRldmVudClcIj48L2FybGFzLWNvb3JkaW5hdGVzPlxuXG48YXJsYXMtYmFzZW1hcCAqbmdJZj1cInNob3dCYXNlbWFwTGlzdFwiIFttYXBTb3VyY2VzXT1cIm1hcFNvdXJjZXNcIiBbbWFwXT1cIm1hcFwiIChtb3VzZWxlYXZlKT1cImhpZGVCYXNlbWFwU3dpdGNoZXIoKVwiXG4gIChiYXNlbWFwQ2hhbmdlZCk9XCJvbkNoYW5nZUJhc2VtYXBTdHlsZSgpXCI+PC9hcmxhcy1iYXNlbWFwPlxuXG5cbjxhcmxhcy1kcmF3ICNkcmF3Q29tcG9uZW50ICpuZ0lmPVwibWFwXCIgW21hcF09XCJtYXBcIiBbZW1wdHlEYXRhXT1cImVtcHR5RGF0YVwiIFtkcmF3RGF0YV09XCJkcmF3RGF0YVwiXG4gIFtkcmF3QnV0dG9uRW5hYmxlZF09XCJkcmF3QnV0dG9uRW5hYmxlZFwiIFtkcmF3T3B0aW9uXT1cImRyYXdPcHRpb25cIlxuICBbZHJhd1BvbHlnb25WZXJ0aWNlc0xpbWl0XT1cImRyYXdQb2x5Z29uVmVydGljZXNMaW1pdFwiIFtwcmVzZXJ2ZURyYXdpbmdCdWZmZXJdPVwicHJlc2VydmVEcmF3aW5nQnVmZmVyXCJcbiAgKG9uQW9pQ2hhbmdlZCk9XCJvbkFvaUNoYW5nZWQuZW1pdCgkZXZlbnQpXCJcbiAgKG9uQW9pRWRpdCk9XCJvbkFvaUVkaXQuZW1pdCgkZXZlbnQpXCI+PC9hcmxhcy1kcmF3PiJdfQ==