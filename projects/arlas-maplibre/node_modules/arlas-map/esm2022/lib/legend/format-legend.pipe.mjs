/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Pipe } from '@angular/core';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import { CollectionService } from 'arlas-web-components';
import * as i0 from "@angular/core";
import * as i1 from "arlas-web-components";
export class FormatLegendPipe {
    constructor(collectionService) {
        this.collectionService = collectionService;
        this.metrics = [
            'avg',
            'sum',
            'min',
            'max',
            'cardinality',
            'count'
        ];
    }
    transform(field) {
        let params = {
            translateKey: this.collectionService.getDisplayFieldName(field),
            format: 'original'
        };
        if (!field) {
            return null;
        }
        const parts = field.split(':');
        // Regular normalized
        const containsNormalizedPartOrMetric = parts.length === 2
            // Normalized by key
            || parts.length === 3
            // Metric
            || (parts.length === 1 && this.containsMetrics(parts[0]));
        if (containsNormalizedPartOrMetric) {
            const valueSplit = parts[0].split('_');
            if (valueSplit.length === 0) {
                return params;
            }
            const hasExtraEmptyValue = valueSplit[valueSplit.length - 1] === '';
            if (hasExtraEmptyValue) {
                valueSplit.splice(valueSplit.length - 1, 1);
            }
            const metric = this.getMetric(valueSplit);
            const field = this.getField(valueSplit);
            const normalized = parts[1] ?? '';
            const normalizedKey = parts[2] ?? '';
            params = this.buildInterpolatedParams(params, metric, field, normalized, normalizedKey);
        }
        else if (parts[0].endsWith('_arlas__color')) {
            params.translateKey = this.collectionService.getDisplayFieldName(params.translateKey.replace('_arlas__color', ''));
        }
        return params;
    }
    buildInterpolatedParams(params, metric, field, normalized, normalizedKey) {
        const legendParams = {
            ...params,
            field: this.collectionService.getDisplayFieldName(field),
            normalized: '',
            metric,
        };
        if (!metric) {
            legendParams.format = 'noMetric';
            legendParams.translateKey = marker('legend without metric');
        }
        else if (field && normalized) {
            legendParams.format = 'full';
            legendParams.translateKey = marker('legend');
        }
        else if (field) {
            legendParams.format = 'metricField';
            legendParams.translateKey = marker('legend without normalized');
        }
        else if (normalized) {
            legendParams.format = 'metricNormalised';
            legendParams.translateKey = marker('legend without field');
        }
        if (normalized) {
            if (normalizedKey) {
                legendParams.normalized = marker('normalized by key');
                legendParams.normalizedKey = normalizedKey;
            }
            else {
                legendParams.normalized = marker('normalized');
            }
        }
        return legendParams;
    }
    getMetric(valueSplit) {
        if (this.isMetrics(valueSplit[valueSplit.length - 1])) {
            return valueSplit[valueSplit.length - 1];
        }
    }
    getField(valueSplit) {
        // If last split is a metric, then exclude it
        if (this.isMetrics(valueSplit[valueSplit.length - 1])) {
            return valueSplit.slice(0, valueSplit.length - 1).join('_');
        }
        return valueSplit.join('_');
    }
    isMetrics(metrics) {
        return this.metrics.includes(metrics);
    }
    containsMetrics(value) {
        for (const metric of this.metrics) {
            if (value.includes(metric)) {
                return true;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FormatLegendPipe, deps: [{ token: i1.CollectionService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: FormatLegendPipe, name: "formatLegend" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FormatLegendPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'formatLegend'
                }]
        }], ctorParameters: () => [{ type: i1.CollectionService }] });
//# sourceMappingURL=data:application/json;base64,