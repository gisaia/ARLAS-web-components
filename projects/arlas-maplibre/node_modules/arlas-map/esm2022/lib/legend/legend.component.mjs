/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, computed, Input, Output, signal, ViewChild } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { ArlasColorService } from 'arlas-web-components';
import { scaleLinear } from 'd3-scale';
import { select } from 'd3-selection';
import { area, curveLinear, line } from 'd3-shape';
import { Subject, takeUntil } from 'rxjs';
import { ARLAS_ID, FILLSTROKE_LAYER_PREFIX, HOVER_LAYER_PREFIX, SELECT_LAYER_PREFIX } from '../map/model/layers';
import { PROPERTY_SELECTOR_SOURCE } from './legend.config';
import { LegendService } from './legend.service';
import { MAX_LINE_WIDTH } from './legend.tools';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "arlas-web-components";
import * as i3 from "./legend.service";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/menu";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "./legend-icon/layer-icon.component";
import * as i8 from "./legend-item/legend-item.component";
import * as i9 from "@colsen1991/ngx-translate-extract-marker/extras";
import * as i10 from "./layer-name.pipe";
export class LegendComponent {
    constructor(translate, colorService, legendService) {
        this.translate = translate;
        this.colorService = colorService;
        this.legendService = legendService;
        /**
         * @Input : Angular
         * @description Subject of [collection, [field, legendData]] map. The map subscribes to it to keep
         * the legend updated with the data displayed on the map.
         */
        this.legendUpdater = new Subject();
        /**
         * @Input : Angular
         * @description Subject of [field, boolean] map. The map subscribes to it to keep
         * the legend updated with the visibility of the layer.
         */
        this.visibilityUpdater = new Subject();
        /**
         * @Output : Angular
         * @description Notifies the parent component that this layer is visible or not
         */
        this.visibilityStatus = new Subject();
        /**
         * @Output : Angular
         * @description Notifies the parent component that the user wants to download the layer
         */
        this.downloadSourceEmitter = new Subject();
        this.colorLegend = signal({});
        this.hasColorLegend = computed(() => this.colorLegend().type !== undefined && this.colorLegend().type !== 'Fix');
        this.strokeColorLegend = signal({});
        this.hasStrokeLegend = computed(() => this.strokeColorLegend().type !== undefined && this.strokeColorLegend().type !== 'Fix');
        this.widthLegend = signal({});
        this.hasWidthLegend = computed(() => this.widthLegend().type !== undefined && this.widthLegend().type !== 'Fix');
        this.radiusLegend = signal({});
        this.hasRadiusLegend = computed(() => this.radiusLegend().type !== undefined && this.radiusLegend().type !== 'Fix');
        this.displayLegendDetailToggle = computed(() => this.hasColorLegend() || this.hasStrokeLegend() || this.hasWidthLegend() || this.hasRadiusLegend());
        this.detail = false;
        this.visibleMode = false;
        this.PROPERTY_SELECTOR_SOURCE = PROPERTY_SELECTOR_SOURCE;
        this.legendData = new Map();
        this.colorPalette = '';
        this.strokeColorPalette = '';
        this.MAX_CIRLE_RADIUS = 7;
        this.LEGEND_WIDTH = 210;
        this._onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.legendUpdater
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(legendDataPerCollection => {
            this.legendData = legendDataPerCollection.get(this.collection);
            if (this.layer) {
                this.drawLegends(this.visibleMode);
            }
        });
        this.visibilityUpdater
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(visibilityUpdater => {
            /** check legend visibility according to Data source status (mapcontirbutor) */
            if (this.layer) {
                /** if the visibility updater contains the layer we pick the visibility status otherwise we keep it unchaged */
                this.visibleMode = visibilityUpdater.get(this.layer.id) !== undefined ? visibilityUpdater.get(this.layer.id) : this.visibleMode;
            }
            else {
                this.visibleMode = false;
            }
            /** check legend visibility according to VisibilityRules */
            if (this.visibleMode && this.layer && !!this.layer.minzoom && !!this.layer.maxzoom) {
                this.visibleMode = (this.zoom <= this.layer.maxzoom && this.zoom >= this.layer.minzoom);
            }
            /** check legend visibility according to legend enabled or not */
            if (!this.enabled) {
                this.visibleMode = false;
            }
            if (!this.visibleMode) {
                this.detail = this.visibleMode;
            }
            /** check legend visibility for external layers that are not set by config nor map contributors */
            if (this.layer && !this.layer.id.startsWith(ARLAS_ID) &&
                !this.layer.id.startsWith(FILLSTROKE_LAYER_PREFIX) && !this.layer.id.startsWith(HOVER_LAYER_PREFIX)
                && !this.layer.id.startsWith(SELECT_LAYER_PREFIX)) {
                this.visibleMode = this.enabled;
                if (!!this.layer.metadata && this.layer.metadata.showLegend === false) {
                    this.visibleMode = false;
                }
            }
            if (this.layer) {
                this.drawLegends(this.visibleMode);
            }
            this.visibilityStatus.next(this.visibleMode);
        });
    }
    ngAfterViewInit() {
        if (this.layer) {
            this.drawLegends(this.visibleMode);
        }
    }
    ngOnChanges(changes) {
        if (changes['layer'] !== undefined) {
            if (this.layer) {
                this.drawLegends(this.visibleMode);
            }
        }
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    downloadLayerSource(layer, downloadType) {
        const download = {
            layer,
            downloadType
        };
        this.downloadSourceEmitter.next(download);
    }
    showDetail(event) {
        this.detail = !this.detail;
        event.stopPropagation();
    }
    /** Parses the `paint` attribute of a layer and draws the legend elements such as
     * - color palette
     * - line width evolution
     * - circle radius evolution
     */
    drawLegends(visibileMode) {
        const type = this.layer.type;
        const paint = this.layer.paint;
        switch (type) {
            case 'circle': {
                const circleLegend = this.legendService.getCircleLegend(paint, visibileMode, this.legendData, this.layer);
                this.colorLegend.set(circleLegend.color);
                // For circle-heatmap layer the stroke can't be configured, so hide it
                if (this.layer.metadata?.hiddenProps?.geomType !== 'circle-heatmap') {
                    this.strokeColorLegend.set(circleLegend.strokeColor);
                }
                this.colorPalette = circleLegend.colorPalette;
                this.strokeColorPalette = circleLegend.strokeColorPalette;
                this.radiusLegend.set(circleLegend.radius);
                if (this.circleRadiusLegend?.interpolatedElement) {
                    const circleRadiusEvolution = circleLegend.radius.histogram;
                    drawCircleSupportLine(this.circleRadiusLegend.interpolatedElement.nativeElement, circleRadiusEvolution, this.colorLegend(), this.LEGEND_WIDTH, Math.min(this.MAX_CIRLE_RADIUS, getMax(circleRadiusEvolution)) * 2);
                }
                break;
            }
            case 'line': {
                const lineLegend = this.legendService.getLineLegend(paint, visibileMode, this.legendData, this.layer);
                this.lineDasharray = lineLegend.dashes;
                this.colorLegend.set(lineLegend.color);
                this.colorPalette = lineLegend.colorPalette;
                this.widthLegend.set(lineLegend.width);
                if (this.lineWidthLegend?.interpolatedElement) {
                    const lineWidthEvolution = lineLegend.width.histogram;
                    drawLineWidth(this.lineWidthLegend.interpolatedElement.nativeElement, lineWidthEvolution, this.colorLegend(), this.LEGEND_WIDTH, MAX_LINE_WIDTH);
                }
                break;
            }
            case 'fill': {
                const fillLegend = this.legendService.getFillLegend(paint, visibileMode, this.legendData, this.layer);
                this.colorLegend.set(fillLegend.color);
                this.colorPalette = fillLegend.colorPalette;
                this.strokeColorLegend.set(fillLegend?.strokeColor);
                this.strokeColorPalette = fillLegend?.strokeColorPalette;
                break;
            }
            case 'heatmap': {
                const heatmapLegend = this.legendService.getHeatmapLegend(paint, visibileMode, this.legendData, this.layer);
                this.colorLegend.set(heatmapLegend.color);
                this.colorPalette = heatmapLegend.colorPalette;
                this.radiusLegend.set(heatmapLegend.radius);
                if (this.circleRadiusLegend?.interpolatedElement) {
                    const heatmapRadiusEvolution = heatmapLegend.radius.histogram;
                    drawCircleSupportLine(this.circleRadiusLegend.interpolatedElement.nativeElement, heatmapRadiusEvolution, this.colorLegend(), this.LEGEND_WIDTH, Math.min(this.MAX_CIRLE_RADIUS, getMax(heatmapRadiusEvolution)) * 2);
                }
                break;
            }
            case 'symbol': {
                const symbolLegend = this.legendService.getLabelLegend(paint, visibileMode, this.legendData, this.layer);
                this.colorLegend.set(symbolLegend.color);
                this.colorPalette = symbolLegend.colorPalette;
                this.widthLegend.set(symbolLegend.size);
                if (!!this.lineWidthLegend && !!this.lineWidthLegend.interpolatedElement) {
                    const lineWidthEvolution = symbolLegend.size.histogram;
                    drawLineWidth(this.lineWidthLegend.interpolatedElement.nativeElement, lineWidthEvolution, this.colorLegend(), this.LEGEND_WIDTH, MAX_LINE_WIDTH);
                }
                break;
            }
        }
        if (!this.colorLegend().fixValue) {
            this.colorLegend().fixValue = visibileMode ? '#444' : '#d3d3d3';
        }
        const layer = { ...this.layer };
        this.layer = null;
        this.layer = { ...layer };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LegendComponent, deps: [{ token: i1.TranslateService }, { token: i2.ArlasColorService }, { token: i3.LegendService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: LegendComponent, selector: "arlas-legend", inputs: { layer: "layer", collection: "collection", zoom: "zoom", enabled: "enabled", legendUpdater: "legendUpdater", visibilityUpdater: "visibilityUpdater" }, outputs: { visibilityStatus: "visibilityStatus", downloadSourceEmitter: "downloadSourceEmitter" }, viewQueries: [{ propertyName: "lineWidthLegend", first: true, predicate: ["width_legend"], descendants: true }, { propertyName: "circleRadiusLegend", first: true, predicate: ["radius_legend"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "\n<div class=\"layer_wrapper\">\n    <div class=collection_color [matTooltip]=\"'Collection:' | translate: {collection: (collection | getCollectionDisplayName)}\"\n      [style.backgroundColor]=\"!!collection ? (collection | getColor) : 'transparent'\"></div>\n    <div class=\"layer_container\" >\n      <div class=\"layer_icon_container\">\n        <div class=\"layer_icon\" >\n          <arlas-layer-icon [layer]=\"layer\" [colorLegend]=\"colorLegend()\" [strokeColorLegend]=\"strokeColorLegend()\"\n            [lineDasharray]=\"lineDasharray\" [widthLegend]=\"widthLegend()\" [radiusLegend]=\"radiusLegend()\"></arlas-layer-icon>\n        </div>\n        <div class=\"layer_name\" [style.color]=\"visibleMode ? '#444': '#d3d3d3'\">\n          {{layer?.id | layerIdToName | translate}}\n        </div>\n      </div>\n      <div class=\"layer_detail\">\n        <div class=\"download_button\">\n          <mat-icon class=\"download_icon\" [matMenuTriggerFor]=\"menu\" [matTooltip]=\"'Download the layer\\'s data' | translate\">file_download</mat-icon>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"downloadLayerSource(layer, 'csv')\">\n              {{'CSV' | translate}}\n            </button>\n            <button mat-menu-item (click)=\"downloadLayerSource(layer, 'geojson')\">\n              {{'GeoJson' | translate}}\n            </button>\n          </mat-menu>\n        </div>\n\n        @if (displayLegendDetailToggle()) {\n          <div class=\"detail_button\" (click)=\"showDetail($event)\" (keyDown)=\"showDetail($event)\">\n            <mat-icon class=\"detail_icon\">{{ detail ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}</mat-icon>\n          </div>\n        }\n      </div>\n    </div>\n\n    <div [hidden]=\"!detail\" class=\"legend-wrapper\">\n      <arlas-legend-item [hidden]=\"!hasColorLegend()\" [legend]=\"colorLegend()\" [layer]=\"layer\"\n        [title]=\"'Fill:' | marker\" [colorPalette]=\"colorPalette\"></arlas-legend-item>\n\n      <arlas-legend-item [hidden]=\"!hasStrokeLegend()\" [legend]=\"strokeColorLegend()\" [layer]=\"layer\"\n        [title]=\"'Stroke:' | marker\" [colorPalette]=\"colorPalette\"></arlas-legend-item>\n\n      <arlas-legend-item [hidden]=\"!hasWidthLegend()\" #width_legend [legend]=\"widthLegend()\" [layer]=\"layer\"\n        [title]=\"'Width:' | marker\"></arlas-legend-item>\n\n      <arlas-legend-item [hidden]=\"!hasRadiusLegend()\" #radius_legend [legend]=\"radiusLegend()\" [layer]=\"layer\"\n        [title]=\"'Radius:' | marker\"></arlas-legend-item>\n    </div>\n  </div>\n", styles: ["@charset \"UTF-8\";.layer_name{font-size:14px}.layer_wrapper{border-top:.4px #eaeaea solid}.collection_color{width:4px;background-color:transparent;height:100%;position:absolute;cursor:pointer;z-index:1000}.layer_container{display:flex;position:relative;justify-content:space-between;padding-left:15px;padding-top:2.5px;padding-bottom:2.5px}.layer_icon_container{display:flex;padding-left:5px}.layer_detail{display:flex}.detail_button,.download_button{background-color:#fff;height:20px;width:20px;cursor:pointer}.detail_icon,.download_icon{color:#555;font-size:16px;width:20px;height:20px;display:flex;align-items:center;justify-content:center}.layer_icon{margin-right:5px;display:flex}.legend-wrapper{width:210px;padding-left:10px}\n"], dependencies: [{ kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i5.MatMenu, selector: "mat-menu", inputs: ["backdropClass", "aria-label", "aria-labelledby", "aria-describedby", "xPosition", "yPosition", "overlapTrigger", "hasBackdrop", "class", "classList"], outputs: ["closed", "close"], exportAs: ["matMenu"] }, { kind: "component", type: i5.MatMenuItem, selector: "[mat-menu-item]", inputs: ["role", "disabled", "disableRipple"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i5.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", inputs: ["mat-menu-trigger-for", "matMenuTriggerFor", "matMenuTriggerData", "matMenuTriggerRestoreFocus"], outputs: ["menuOpened", "onMenuOpen", "menuClosed", "onMenuClose"], exportAs: ["matMenuTrigger"] }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "component", type: i7.LayerIconComponent, selector: "arlas-layer-icon", inputs: ["layer", "colorLegend", "strokeColorLegend", "widthLegend", "radiusLegend", "lineDasharray"] }, { kind: "component", type: i8.LegendItemComponent, selector: "arlas-legend-item", inputs: ["legend", "title", "layer", "colorPalette"] }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }, { kind: "pipe", type: i2.GetCollectionDisplayNamePipe, name: "getCollectionDisplayName" }, { kind: "pipe", type: i2.GetColorPipe, name: "getColor" }, { kind: "pipe", type: i9.MarkerPipe, name: "marker" }, { kind: "pipe", type: i10.LayerIdToName, name: "layerIdToName" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LegendComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-legend', template: "\n<div class=\"layer_wrapper\">\n    <div class=collection_color [matTooltip]=\"'Collection:' | translate: {collection: (collection | getCollectionDisplayName)}\"\n      [style.backgroundColor]=\"!!collection ? (collection | getColor) : 'transparent'\"></div>\n    <div class=\"layer_container\" >\n      <div class=\"layer_icon_container\">\n        <div class=\"layer_icon\" >\n          <arlas-layer-icon [layer]=\"layer\" [colorLegend]=\"colorLegend()\" [strokeColorLegend]=\"strokeColorLegend()\"\n            [lineDasharray]=\"lineDasharray\" [widthLegend]=\"widthLegend()\" [radiusLegend]=\"radiusLegend()\"></arlas-layer-icon>\n        </div>\n        <div class=\"layer_name\" [style.color]=\"visibleMode ? '#444': '#d3d3d3'\">\n          {{layer?.id | layerIdToName | translate}}\n        </div>\n      </div>\n      <div class=\"layer_detail\">\n        <div class=\"download_button\">\n          <mat-icon class=\"download_icon\" [matMenuTriggerFor]=\"menu\" [matTooltip]=\"'Download the layer\\'s data' | translate\">file_download</mat-icon>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"downloadLayerSource(layer, 'csv')\">\n              {{'CSV' | translate}}\n            </button>\n            <button mat-menu-item (click)=\"downloadLayerSource(layer, 'geojson')\">\n              {{'GeoJson' | translate}}\n            </button>\n          </mat-menu>\n        </div>\n\n        @if (displayLegendDetailToggle()) {\n          <div class=\"detail_button\" (click)=\"showDetail($event)\" (keyDown)=\"showDetail($event)\">\n            <mat-icon class=\"detail_icon\">{{ detail ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}</mat-icon>\n          </div>\n        }\n      </div>\n    </div>\n\n    <div [hidden]=\"!detail\" class=\"legend-wrapper\">\n      <arlas-legend-item [hidden]=\"!hasColorLegend()\" [legend]=\"colorLegend()\" [layer]=\"layer\"\n        [title]=\"'Fill:' | marker\" [colorPalette]=\"colorPalette\"></arlas-legend-item>\n\n      <arlas-legend-item [hidden]=\"!hasStrokeLegend()\" [legend]=\"strokeColorLegend()\" [layer]=\"layer\"\n        [title]=\"'Stroke:' | marker\" [colorPalette]=\"colorPalette\"></arlas-legend-item>\n\n      <arlas-legend-item [hidden]=\"!hasWidthLegend()\" #width_legend [legend]=\"widthLegend()\" [layer]=\"layer\"\n        [title]=\"'Width:' | marker\"></arlas-legend-item>\n\n      <arlas-legend-item [hidden]=\"!hasRadiusLegend()\" #radius_legend [legend]=\"radiusLegend()\" [layer]=\"layer\"\n        [title]=\"'Radius:' | marker\"></arlas-legend-item>\n    </div>\n  </div>\n", styles: ["@charset \"UTF-8\";.layer_name{font-size:14px}.layer_wrapper{border-top:.4px #eaeaea solid}.collection_color{width:4px;background-color:transparent;height:100%;position:absolute;cursor:pointer;z-index:1000}.layer_container{display:flex;position:relative;justify-content:space-between;padding-left:15px;padding-top:2.5px;padding-bottom:2.5px}.layer_icon_container{display:flex;padding-left:5px}.layer_detail{display:flex}.detail_button,.download_button{background-color:#fff;height:20px;width:20px;cursor:pointer}.detail_icon,.download_icon{color:#555;font-size:16px;width:20px;height:20px;display:flex;align-items:center;justify-content:center}.layer_icon{margin-right:5px;display:flex}.legend-wrapper{width:210px;padding-left:10px}\n"] }]
        }], ctorParameters: () => [{ type: i1.TranslateService }, { type: i2.ArlasColorService }, { type: i3.LegendService }], propDecorators: { layer: [{
                type: Input
            }], collection: [{
                type: Input
            }], zoom: [{
                type: Input
            }], enabled: [{
                type: Input
            }], legendUpdater: [{
                type: Input
            }], visibilityUpdater: [{
                type: Input
            }], visibilityStatus: [{
                type: Output
            }], downloadSourceEmitter: [{
                type: Output
            }], lineWidthLegend: [{
                type: ViewChild,
                args: ['width_legend', { static: false }]
            }], circleRadiusLegend: [{
                type: ViewChild,
                args: ['radius_legend', { static: false }]
            }] } });
/**
 * draws the line width legend
 * @param svgNode SVG element on which we append the line using d3.
 * @param lineWidths List of {key, linewidth}
 * @param cLegend Color legend, to give the drawn legend lines the same color on the map
 * @param legendWidth The width that the svg will take to draw the legend
 * @param legendHeight The height that the svg will take to draw the legend
 */
export function drawLineWidth(svgNode, lineWidths, cLegend, legendWidth, legendHeight) {
    const maxHeight = getMax(lineWidths);
    const xDomain = (scaleLinear()).range([0, legendWidth]);
    const xDomainExtent = [lineWidths[0].key, lineWidths[lineWidths.length - 1].key];
    xDomain.domain(xDomainExtent);
    const yDomain = scaleLinear().range([maxHeight, 0]);
    yDomain.domain([0, maxHeight]);
    const svg = select(svgNode).attr('width', legendWidth).attr('height', legendHeight);
    svg.selectAll('g').remove();
    const context = svg.append('g').attr('class', 'context');
    const ar = area()
        .curve(curveLinear)
        .x((d) => xDomain(d.key))
        .y0(maxHeight)
        .y1((d) => yDomain(d.value));
    const widthLineColor = getMiddleColor(cLegend);
    context.append('path')
        .datum(lineWidths)
        .style('fill', widthLineColor)
        .style('fill-opacity', 0.6)
        .style('stroke', widthLineColor)
        .style('stroke-opacity', 0.6)
        .style('stroke-width', 0.5)
        .attr('d', ar);
}
export function getMiddleColor(colorLegend) {
    let color = '';
    if (colorLegend.type === PROPERTY_SELECTOR_SOURCE.fix) {
        color = colorLegend.fixValue;
    }
    else if (colorLegend.type === PROPERTY_SELECTOR_SOURCE.interpolated) {
        const iv = colorLegend.interpolatedValues;
        if (iv.length === 1 || iv.length === 2) {
            color = iv[0];
        }
        else if (iv.length >= 3) {
            color = iv[Math.trunc(iv.length / 2)];
        }
    }
    else if (colorLegend.type === PROPERTY_SELECTOR_SOURCE.manual || colorLegend.type === PROPERTY_SELECTOR_SOURCE.generated
        || colorLegend.type === PROPERTY_SELECTOR_SOURCE.provided) {
        const iv = colorLegend.manualValues;
        if (iv) {
            if (iv.size === 1) {
                color = iv.keys().next().value;
            }
            else if (iv.size >= 2) {
                color = Array.from(iv.values())[Math.trunc(Array.from(iv.keys()).length / 2)];
            }
        }
    }
    return color;
}
/**
 * draws the circle radius legend
 * @param svgNode SVG element on which we append the circles using d3.
 * @param circlesRadiuses List of {key, circleradius}
 * @param cLegend Color legend, to give the drawn legend circles the same color on the map
 * @param legendWidth The width that the svg will take to draw the legend
 * @param legendHeight The height that the svg will take to draw the legend
 */
export function drawCircleSupportLine(svgNode, circlesRadiuses, cLegend, legendWidth, legendHeight) {
    const circleDiameters = [];
    circlesRadiuses.forEach(cr => circleDiameters.push({ key: cr.key, value: cr.value * 2 }));
    const maxHeight = getMax(circleDiameters);
    const firstRadius = circlesRadiuses[0].value;
    const lastRadius = circlesRadiuses[circlesRadiuses.length - 1].value;
    const xDomain = (scaleLinear()).range([0, legendWidth - firstRadius - lastRadius]);
    const xDomainExtent = [circleDiameters[0].key, circleDiameters[circleDiameters.length - 1].key];
    xDomain.domain(xDomainExtent);
    const yDomain = scaleLinear().range([maxHeight, 0]);
    yDomain.domain([0, maxHeight]);
    const svg = select(svgNode).attr('width', legendWidth).attr('height', legendHeight);
    svg.selectAll('g').remove();
    const context = svg.append('g').attr('class', 'context');
    const l = line()
        .x((d) => xDomain(d.key))
        .y((d) => yDomain(d.value));
    context.append('path')
        .datum(circleDiameters)
        .attr('fill', 'none')
        .attr('stroke', '#eaeaea')
        .attr('stroke-width', 0.8)
        .attr('transform', 'translate(' + firstRadius + ', 0)')
        .attr('d', l);
    context.append('g').append('line')
        .attr('x1', 0).attr('y1', maxHeight)
        .attr('x2', legendWidth - firstRadius - lastRadius).attr('y2', maxHeight)
        .attr('cx', 2).attr('cy', 2).attr('fill', 'none')
        .attr('stroke', '#eaeaea')
        .attr('stroke-width', 0.8)
        .attr('transform', 'translate(' + firstRadius + ', 0)');
    const circles = [circlesRadiuses[0], circlesRadiuses[circlesRadiuses.length - 1]];
    const circleColor = getMiddleColor(cLegend);
    context.append('g')
        .selectAll('dot').data(circles).enter().append('circle')
        .attr('r', (d) => d.value)
        .attr('cx', (d) => xDomain(d.key))
        .attr('cy', (d) => maxHeight - d.value)
        .attr('transform', 'translate(' + firstRadius + ', 0)')
        .style('fill', circleColor)
        .style('fill-opacity', 0.6)
        .style('stroke', circleColor)
        .style('stroke-width', 0.5);
}
export function getMax(data) {
    return Math.max(...data.map(hd => +hd.value));
}
//# sourceMappingURL=data:application/json;base64,