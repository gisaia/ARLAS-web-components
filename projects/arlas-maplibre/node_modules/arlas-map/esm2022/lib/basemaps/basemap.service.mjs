/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { ArlasMapFrameworkService } from '../arlas-map-framework.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../arlas-map-framework.service";
/** L: a layer class/interface.
 *  S: a source class/interface.
 *  M: a Map configuration class/interface.
 */
export class BasemapService {
    constructor(http, mapFrameworkService) {
        this.http = http;
        this.mapFrameworkService = mapFrameworkService;
        this.POWERED_BY_ARLAS = ' Powered by ARLAS.';
        this.LOCAL_STORAGE_BASEMAPS = 'arlas_last_base_map';
        this.basemapChangedSource = new Subject();
        this.basemapChanged$ = this.basemapChangedSource.asObservable();
        this.protomapBasemapAddedSource = new Subject();
        this.protomapBasemapAdded$ = this.protomapBasemapAddedSource.asObservable();
    }
    setBasemaps(basemaps) {
        this.basemaps = basemaps;
    }
    addPMtilesToSource(map, pmtilesSource) {
        /* eslint-disable max-len */
        pmtilesSource['attribution'] = '<a href="https://protomaps.com/" target="_blank">Protomaps</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap</a>';
        pmtilesSource['attribution'] = pmtilesSource['attribution'] + this.POWERED_BY_ARLAS;
        this.mapFrameworkService.setSource('arlas_protomaps_source', pmtilesSource, map);
    }
    addProtomapLayerToMap(map, styleFile) {
        styleFile.layers.forEach(l => {
            this.mapFrameworkService.removeLayer(map, l.id);
            this.mapFrameworkService.addLayer(map, l);
        });
    }
    notifyProtomapAddition() {
        this.protomapBasemapAddedSource.next(true);
    }
    cloneStyleFile(selected) {
        return { ...selected.styleFile };
    }
    buildInitStyle(clonedStyleFile) {
        clonedStyleFile.sources = {
            protomaps_attribution: {
                'type': 'vector',
                // eslint-disable-next-line max-len
                'attribution': '<a href="https://protomaps.com/" target="_blank">Protomaps</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap</a>' + this.POWERED_BY_ARLAS
            }
        };
        clonedStyleFile.layers = [{
                id: 'backgrounds',
                type: 'background',
                source: 'protomaps_attribution',
                paint: {
                    'background-color': 'rgba(0,0,0,0)'
                }
            }];
        return clonedStyleFile;
    }
    ;
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BasemapService, deps: [{ token: i1.HttpClient }, { token: i2.ArlasMapFrameworkService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BasemapService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BasemapService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.ArlasMapFrameworkService }] });
//# sourceMappingURL=data:application/json;base64,