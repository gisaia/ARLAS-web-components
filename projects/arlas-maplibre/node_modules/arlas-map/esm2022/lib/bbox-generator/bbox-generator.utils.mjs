/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { FormGroup } from '@angular/forms';
import { Coordinate, PointFormGroup } from './coordinates.tools';
export class BboxFormGroup extends FormGroup {
    constructor(corner) {
        const firstCorner = new PointFormGroup(corner.lat - 0.5, corner.lng - 0.5);
        const secondCorner = new PointFormGroup(corner.lat + 0.5, corner.lng + 0.5);
        super({
            firstCorner,
            secondCorner
        });
        this.latitudeErrors = false;
        this.subscriptions = new Array();
        this.firstCorner = firstCorner;
        this.secondCorner = secondCorner;
        const latSub = this.firstCorner.latitude.valueChanges.subscribe(v => {
            this.firstCornerLatitude = v;
            this.secondCornerLatitude = this.secondCorner.latitude.value;
            if (this.secondCornerLatitude !== undefined) {
                if (Coordinate.parse(this.firstCornerLatitude) === Coordinate.parse(this.secondCornerLatitude)) {
                    this.latitudeErrors = true;
                }
                else {
                    this.latitudeErrors = false;
                }
            }
        });
        this.subscriptions.push(latSub);
        const lonSub = this.secondCorner.latitude.valueChanges.subscribe(v => {
            this.secondCornerLatitude = v;
            this.firstCornerLatitude = this.firstCorner.latitude.value;
            if (this.firstCornerLatitude !== undefined) {
                if (Coordinate.parse(this.firstCornerLatitude) === Coordinate.parse(this.secondCornerLatitude)) {
                    this.latitudeErrors = true;
                }
                else {
                    this.latitudeErrors = false;
                }
            }
        });
        this.subscriptions.push(lonSub);
    }
    getFirstCorner() {
        return {
            lat: Coordinate.parse(this.firstCorner.latitude.value),
            lng: Coordinate.parse(this.firstCorner.longitude.value)
        };
    }
    getSecondCorner() {
        return {
            lat: Coordinate.parse(this.secondCorner.latitude.value),
            lng: Coordinate.parse(this.secondCorner.longitude.value)
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmJveC1nZW5lcmF0b3IudXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1tYXAvc3JjL2xpYi9iYm94LWdlbmVyYXRvci9iYm94LWdlbmVyYXRvci51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUtqRSxNQUFNLE9BQU8sYUFBYyxTQUFRLFNBQVM7SUFVMUMsWUFBbUIsTUFBYztRQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDNUUsS0FBSyxDQUFDO1lBQ0osV0FBVztZQUNYLFlBQVk7U0FDYixDQUFDLENBQUM7UUFWRSxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixrQkFBYSxHQUFHLElBQUksS0FBSyxFQUFnQixDQUFDO1FBUy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRWpDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQzdELElBQUksSUFBSSxDQUFDLG9CQUFvQixLQUFLLFNBQVMsRUFBRSxDQUFDO2dCQUM1QyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDO29CQUMvRixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDN0IsQ0FBQztxQkFBTSxDQUFDO29CQUNOLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDM0QsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEtBQUssU0FBUyxFQUFFLENBQUM7Z0JBQzNDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUM7b0JBQy9GLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixDQUFDO3FCQUFNLENBQUM7b0JBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7Z0JBQzlCLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sY0FBYztRQUNuQixPQUFPO1lBQ0wsR0FBRyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ3RELEdBQUcsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUN4RCxDQUFDO0lBQ0osQ0FBQztJQUVNLGVBQWU7UUFDcEIsT0FBTztZQUNMLEdBQUcsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUN2RCxHQUFHLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7U0FDekQsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBHaXNhw69hIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFLnR4dCBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEdpc2HDr2EgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb29yZGluYXRlLCBQb2ludEZvcm1Hcm91cCB9IGZyb20gJy4vY29vcmRpbmF0ZXMudG9vbHMnO1xuaW1wb3J0IHsgQ29ybmVyIH0gZnJvbSAnLi4vZHJhdy9kcmF3Lm1vZGVscyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuXG5leHBvcnQgY2xhc3MgQmJveEZvcm1Hcm91cCBleHRlbmRzIEZvcm1Hcm91cCB7XG5cbiAgcHJpdmF0ZSBmaXJzdENvcm5lckxhdGl0dWRlOiBzdHJpbmc7XG4gIHByaXZhdGUgc2Vjb25kQ29ybmVyTGF0aXR1ZGU6IHN0cmluZztcbiAgcHVibGljIGZpcnN0Q29ybmVyOiBQb2ludEZvcm1Hcm91cDtcbiAgcHVibGljIHNlY29uZENvcm5lcjogUG9pbnRGb3JtR3JvdXA7XG4gIHB1YmxpYyBsYXRpdHVkZUVycm9ycyA9IGZhbHNlO1xuXG4gIHB1YmxpYyBzdWJzY3JpcHRpb25zID0gbmV3IEFycmF5PFN1YnNjcmlwdGlvbj4oKTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoY29ybmVyOiBDb3JuZXIpIHtcbiAgICBjb25zdCBmaXJzdENvcm5lciA9IG5ldyBQb2ludEZvcm1Hcm91cChjb3JuZXIubGF0IC0gMC41LCBjb3JuZXIubG5nIC0gMC41KTtcbiAgICBjb25zdCBzZWNvbmRDb3JuZXIgPSBuZXcgUG9pbnRGb3JtR3JvdXAoY29ybmVyLmxhdCArIDAuNSwgY29ybmVyLmxuZyArIDAuNSk7XG4gICAgc3VwZXIoe1xuICAgICAgZmlyc3RDb3JuZXIsXG4gICAgICBzZWNvbmRDb3JuZXJcbiAgICB9KTtcbiAgICB0aGlzLmZpcnN0Q29ybmVyID0gZmlyc3RDb3JuZXI7XG4gICAgdGhpcy5zZWNvbmRDb3JuZXIgPSBzZWNvbmRDb3JuZXI7XG5cbiAgICBjb25zdCBsYXRTdWIgPSB0aGlzLmZpcnN0Q29ybmVyLmxhdGl0dWRlLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUodiA9PiB7XG4gICAgICB0aGlzLmZpcnN0Q29ybmVyTGF0aXR1ZGUgPSB2O1xuICAgICAgdGhpcy5zZWNvbmRDb3JuZXJMYXRpdHVkZSA9IHRoaXMuc2Vjb25kQ29ybmVyLmxhdGl0dWRlLnZhbHVlO1xuICAgICAgaWYgKHRoaXMuc2Vjb25kQ29ybmVyTGF0aXR1ZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoQ29vcmRpbmF0ZS5wYXJzZSh0aGlzLmZpcnN0Q29ybmVyTGF0aXR1ZGUpID09PSBDb29yZGluYXRlLnBhcnNlKHRoaXMuc2Vjb25kQ29ybmVyTGF0aXR1ZGUpKSB7XG4gICAgICAgICAgdGhpcy5sYXRpdHVkZUVycm9ycyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5sYXRpdHVkZUVycm9ycyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2gobGF0U3ViKTtcblxuICAgIGNvbnN0IGxvblN1YiA9IHRoaXMuc2Vjb25kQ29ybmVyLmxhdGl0dWRlLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUodiA9PiB7XG4gICAgICB0aGlzLnNlY29uZENvcm5lckxhdGl0dWRlID0gdjtcbiAgICAgIHRoaXMuZmlyc3RDb3JuZXJMYXRpdHVkZSA9IHRoaXMuZmlyc3RDb3JuZXIubGF0aXR1ZGUudmFsdWU7XG4gICAgICBpZiAodGhpcy5maXJzdENvcm5lckxhdGl0dWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKENvb3JkaW5hdGUucGFyc2UodGhpcy5maXJzdENvcm5lckxhdGl0dWRlKSA9PT0gQ29vcmRpbmF0ZS5wYXJzZSh0aGlzLnNlY29uZENvcm5lckxhdGl0dWRlKSkge1xuICAgICAgICAgIHRoaXMubGF0aXR1ZGVFcnJvcnMgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGF0aXR1ZGVFcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGxvblN1Yik7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rmlyc3RDb3JuZXIoKTogQ29ybmVyIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGF0OiBDb29yZGluYXRlLnBhcnNlKHRoaXMuZmlyc3RDb3JuZXIubGF0aXR1ZGUudmFsdWUpLFxuICAgICAgbG5nOiBDb29yZGluYXRlLnBhcnNlKHRoaXMuZmlyc3RDb3JuZXIubG9uZ2l0dWRlLnZhbHVlKVxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZ2V0U2Vjb25kQ29ybmVyKCk6IENvcm5lciB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhdDogQ29vcmRpbmF0ZS5wYXJzZSh0aGlzLnNlY29uZENvcm5lci5sYXRpdHVkZS52YWx1ZSksXG4gICAgICBsbmc6IENvb3JkaW5hdGUucGFyc2UodGhpcy5zZWNvbmRDb3JuZXIubG9uZ2l0dWRlLnZhbHVlKVxuICAgIH07XG4gIH1cbn1cblxuXG4iXX0=