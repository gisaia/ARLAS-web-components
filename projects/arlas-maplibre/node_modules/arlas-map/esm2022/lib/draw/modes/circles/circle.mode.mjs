/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import MapboxDraw from '@mapbox/mapbox-gl-draw';
import circle from '@turf/circle';
export const circleMode = { ...MapboxDraw.modes.draw_polygon };
const DEFAULT_RADIUS_IN_KM = 2;
circleMode.onSetup = function (opts) {
    const polygon = this.newFeature({
        type: MapboxDraw.constants.geojsonTypes.FEATURE,
        properties: {
            isFixedRadius: opts.isFixedRadius !== undefined ? opts.isFixedRadius : false,
            isCircle: true,
            center: opts.center !== undefined ? opts.center : []
        },
        geometry: {
            type: MapboxDraw.constants.geojsonTypes.POLYGON,
            coordinates: [[]]
        }
    });
    this.addFeature(polygon);
    this.clearSelectedFeatures();
    MapboxDraw.lib.doubleClickZoom.disable(this);
    this.updateUIClasses({ mouse: MapboxDraw.constants.cursors.ADD });
    this.activateUIButton(MapboxDraw.constants.types.POLYGON);
    this.setActionableState({
        trash: true
    });
    return {
        initialRadiusInKm: opts.initialRadiusInKm || DEFAULT_RADIUS_IN_KM,
        steps: opts.steps || 64,
        units: opts.units || 'kilometers',
        polygon,
        currentVertexPosition: 0
    };
};
circleMode.clickAnywhere = function (state, e) {
    if (state.currentVertexPosition === 0) {
        state.currentVertexPosition++;
        const center = [e.lngLat.lng, e.lngLat.lat];
        const options = { steps: state.steps, units: state.units };
        const circleFeature = circle(center, state.initialRadiusInKm, options);
        state.polygon.incomingCoords(circleFeature.geometry.coordinates);
        state.polygon.properties.center = center;
        state.polygon.properties.radiusInKm = state.initialRadiusInKm;
    }
    return this.changeMode(MapboxDraw.constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });
};
export default circleMode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLm1vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1tYXAvc3JjL2xpYi9kcmF3L21vZGVzL2NpcmNsZXMvY2lyY2xlLm1vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBRUgsT0FBTyxVQUFVLE1BQU0sd0JBQXdCLENBQUM7QUFDaEQsT0FBTyxNQUFNLE1BQU0sY0FBYyxDQUFDO0FBR2xDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMvRCxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQztBQUUvQixVQUFVLENBQUMsT0FBTyxHQUFHLFVBQVUsSUFBSTtJQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzVCLElBQUksRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPO1FBQy9DLFVBQVUsRUFBRTtZQUNSLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSztZQUM1RSxRQUFRLEVBQUUsSUFBSTtZQUNkLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtTQUN2RDtRQUNELFFBQVEsRUFBRTtZQUNOLElBQUksRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPO1lBQy9DLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNwQjtLQUNKLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFekIsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDN0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ3BCLEtBQUssRUFBRSxJQUFJO0tBQ2QsQ0FBQyxDQUFDO0lBRUgsT0FBTztRQUNILGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxvQkFBb0I7UUFDakUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN2QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxZQUFZO1FBQ2pDLE9BQU87UUFDUCxxQkFBcUIsRUFBRSxDQUFDO0tBQzNCLENBQUM7QUFDTixDQUFDLENBQUM7QUFHRixVQUFVLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFLENBQUM7SUFDekMsSUFBSSxLQUFLLENBQUMscUJBQXFCLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDcEMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDOUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sT0FBTyxHQUFJLEVBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUMsQ0FBQztRQUMxRCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pFLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDekMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztJQUNsRSxDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pHLENBQUMsQ0FBQztBQUVGLGVBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBNYXBib3hEcmF3IGZyb20gJ0BtYXBib3gvbWFwYm94LWdsLWRyYXcnO1xuaW1wb3J0IGNpcmNsZSBmcm9tICdAdHVyZi9jaXJjbGUnO1xuXG5cbmV4cG9ydCBjb25zdCBjaXJjbGVNb2RlID0geyAuLi5NYXBib3hEcmF3Lm1vZGVzLmRyYXdfcG9seWdvbiB9O1xuY29uc3QgREVGQVVMVF9SQURJVVNfSU5fS00gPSAyO1xuXG5jaXJjbGVNb2RlLm9uU2V0dXAgPSBmdW5jdGlvbiAob3B0cykge1xuICAgIGNvbnN0IHBvbHlnb24gPSB0aGlzLm5ld0ZlYXR1cmUoe1xuICAgICAgICB0eXBlOiBNYXBib3hEcmF3LmNvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgaXNGaXhlZFJhZGl1czogb3B0cy5pc0ZpeGVkUmFkaXVzICE9PSB1bmRlZmluZWQgPyBvcHRzLmlzRml4ZWRSYWRpdXMgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQ2lyY2xlOiB0cnVlLFxuICAgICAgICAgICAgY2VudGVyOiBvcHRzLmNlbnRlciAhPT0gdW5kZWZpbmVkID8gb3B0cy5jZW50ZXIgOiBbXVxuICAgICAgICB9LFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgICAgdHlwZTogTWFwYm94RHJhdy5jb25zdGFudHMuZ2VvanNvblR5cGVzLlBPTFlHT04sXG4gICAgICAgICAgICBjb29yZGluYXRlczogW1tdXVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZEZlYXR1cmUocG9seWdvbik7XG5cbiAgICB0aGlzLmNsZWFyU2VsZWN0ZWRGZWF0dXJlcygpO1xuICAgIE1hcGJveERyYXcubGliLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKHRoaXMpO1xuICAgIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IE1hcGJveERyYXcuY29uc3RhbnRzLmN1cnNvcnMuQUREIH0pO1xuICAgIHRoaXMuYWN0aXZhdGVVSUJ1dHRvbihNYXBib3hEcmF3LmNvbnN0YW50cy50eXBlcy5QT0xZR09OKTtcbiAgICB0aGlzLnNldEFjdGlvbmFibGVTdGF0ZSh7XG4gICAgICAgIHRyYXNoOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0aWFsUmFkaXVzSW5LbTogb3B0cy5pbml0aWFsUmFkaXVzSW5LbSB8fCBERUZBVUxUX1JBRElVU19JTl9LTSxcbiAgICAgICAgc3RlcHM6IG9wdHMuc3RlcHMgfHwgNjQsXG4gICAgICAgIHVuaXRzOiBvcHRzLnVuaXRzIHx8ICdraWxvbWV0ZXJzJyxcbiAgICAgICAgcG9seWdvbixcbiAgICAgICAgY3VycmVudFZlcnRleFBvc2l0aW9uOiAwXG4gICAgfTtcbn07XG5cblxuY2lyY2xlTW9kZS5jbGlja0FueXdoZXJlID0gZnVuY3Rpb24gKHN0YXRlLCBlKSB7XG4gICAgaWYgKHN0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiA9PT0gMCkge1xuICAgICAgICBzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24rKztcbiAgICAgICAgY29uc3QgY2VudGVyID0gW2UubG5nTGF0LmxuZywgZS5sbmdMYXQubGF0XTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9ICB7c3RlcHM6IHN0YXRlLnN0ZXBzLCB1bml0czogc3RhdGUudW5pdHN9O1xuICAgICAgICBjb25zdCBjaXJjbGVGZWF0dXJlID0gY2lyY2xlKGNlbnRlciwgc3RhdGUuaW5pdGlhbFJhZGl1c0luS20sIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5wb2x5Z29uLmluY29taW5nQ29vcmRzKGNpcmNsZUZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xuICAgICAgICBzdGF0ZS5wb2x5Z29uLnByb3BlcnRpZXMuY2VudGVyID0gY2VudGVyO1xuICAgICAgICBzdGF0ZS5wb2x5Z29uLnByb3BlcnRpZXMucmFkaXVzSW5LbSA9IHN0YXRlLmluaXRpYWxSYWRpdXNJbkttO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VNb2RlKE1hcGJveERyYXcuY29uc3RhbnRzLm1vZGVzLlNJTVBMRV9TRUxFQ1QsIHsgZmVhdHVyZUlkczogW3N0YXRlLnBvbHlnb24uaWRdIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2lyY2xlTW9kZTtcbiJdfQ==