/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
export function createDrawVertex(parentId, coordinates, path, selected) {
    return {
        type: 'Feature',
        properties: {
            meta: 'vertex',
            parent: parentId,
            coord_path: path,
            active: selected ? 'true' : 'false',
        },
        geometry: {
            type: 'Point',
            coordinates,
        },
    };
}
export function displayFeatures(state, geojson, display) {
    const isActiveLine = geojson.properties.id === state.line.id;
    geojson.properties.active = isActiveLine ? 'true' : 'false';
    if (!isActiveLine) {
        if (!geojson.geometry.coordinates[0][0]) {
            return null;
        }
        return display(geojson);
    }
    // Only render the line if it has at least one real coordinate
    if (geojson.geometry.coordinates.length < 2) {
        return null;
    }
    geojson.properties.meta = 'feature';
    // displays center vertex as a point feature
    display(createDrawVertex(state.line.id, geojson.geometry.coordinates[state.direction === 'forward'
        ? geojson.geometry.coordinates.length - 2
        : 1], `${state.direction === 'forward'
        ? geojson.geometry.coordinates.length - 2
        : 1}`, false));
    // displays the line as it is drawn
    display(geojson);
}
export function updateCoordinates(state, e) {
    if (state.direction === 'forward') {
        state.currentVertexPosition += 1; // eslint-disable-line
        state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);
    }
    else {
        state.line.addCoordinate(0, e.lngLat.lng, e.lngLat.lat);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1tYXAvc3JjL2xpYi9kcmF3L21vZGVzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxRQUFRO0lBQ3BFLE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUztRQUNmLFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxRQUFRO1lBQ2QsTUFBTSxFQUFFLFFBQVE7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPO1NBQ3BDO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLE9BQU87WUFDYixXQUFXO1NBQ1o7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUNELE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPO0lBQ3JELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQzdELE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDNUQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3hDLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCw4REFBOEQ7SUFDOUQsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0lBRXBDLDRDQUE0QztJQUM1QyxPQUFPLENBQ0wsZ0JBQWdCLENBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQ2IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQzVCLEtBQUssQ0FBQyxTQUFTLEtBQUssU0FBUztRQUMzQixDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUMsQ0FDSixFQUNELEdBQUcsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTO1FBQzlCLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FDSixFQUFFLEVBQ0YsS0FBSyxDQUNOLENBQ0YsQ0FBQztJQUVGLG1DQUFtQztJQUNuQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFbkIsQ0FBQztBQUdELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QyxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDbEMsS0FBSyxDQUFDLHFCQUFxQixJQUFJLENBQUMsQ0FBQyxDQUFDLHNCQUFzQjtRQUN4RCxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUN6QixLQUFLLENBQUMscUJBQXFCLEVBQzNCLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUNaLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUNiLENBQUM7SUFDSixDQUFDO1NBQU0sQ0FBQztRQUNOLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFELENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEcmF3VmVydGV4KHBhcmVudElkLCBjb29yZGluYXRlcywgcGF0aCwgc2VsZWN0ZWQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgbWV0YTogJ3ZlcnRleCcsXG4gICAgICBwYXJlbnQ6IHBhcmVudElkLFxuICAgICAgY29vcmRfcGF0aDogcGF0aCxcbiAgICAgIGFjdGl2ZTogc2VsZWN0ZWQgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgIH0sXG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICBjb29yZGluYXRlcyxcbiAgICB9LFxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlGZWF0dXJlcyhzdGF0ZSwgZ2VvanNvbiwgZGlzcGxheSkge1xuICBjb25zdCBpc0FjdGl2ZUxpbmUgPSBnZW9qc29uLnByb3BlcnRpZXMuaWQgPT09IHN0YXRlLmxpbmUuaWQ7XG4gIGdlb2pzb24ucHJvcGVydGllcy5hY3RpdmUgPSBpc0FjdGl2ZUxpbmUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICBpZiAoIWlzQWN0aXZlTGluZSkge1xuICAgIGlmICghZ2VvanNvbi5nZW9tZXRyeS5jb29yZGluYXRlc1swXVswXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkaXNwbGF5KGdlb2pzb24pO1xuICB9XG5cbiAgLy8gT25seSByZW5kZXIgdGhlIGxpbmUgaWYgaXQgaGFzIGF0IGxlYXN0IG9uZSByZWFsIGNvb3JkaW5hdGVcbiAgaWYgKGdlb2pzb24uZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGdlb2pzb24ucHJvcGVydGllcy5tZXRhID0gJ2ZlYXR1cmUnO1xuXG4gIC8vIGRpc3BsYXlzIGNlbnRlciB2ZXJ0ZXggYXMgYSBwb2ludCBmZWF0dXJlXG4gIGRpc3BsYXkoXG4gICAgY3JlYXRlRHJhd1ZlcnRleChcbiAgICAgIHN0YXRlLmxpbmUuaWQsXG4gICAgICBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzW1xuICAgICAgc3RhdGUuZGlyZWN0aW9uID09PSAnZm9yd2FyZCdcbiAgICAgICAgPyBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCAtIDJcbiAgICAgICAgOiAxXG4gICAgICBdLFxuICAgICAgYCR7c3RhdGUuZGlyZWN0aW9uID09PSAnZm9yd2FyZCdcbiAgICAgICAgPyBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCAtIDJcbiAgICAgICAgOiAxXG4gICAgICB9YCxcbiAgICAgIGZhbHNlXG4gICAgKVxuICApO1xuXG4gIC8vIGRpc3BsYXlzIHRoZSBsaW5lIGFzIGl0IGlzIGRyYXduXG4gIGRpc3BsYXkoZ2VvanNvbik7XG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29vcmRpbmF0ZXMoc3RhdGUsIGUpIHtcbiAgaWYgKHN0YXRlLmRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgc3RhdGUuY3VycmVudFZlcnRleFBvc2l0aW9uICs9IDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBzdGF0ZS5saW5lLnVwZGF0ZUNvb3JkaW5hdGUoXG4gICAgICBzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24sXG4gICAgICBlLmxuZ0xhdC5sbmcsXG4gICAgICBlLmxuZ0xhdC5sYXRcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxpbmUuYWRkQ29vcmRpbmF0ZSgwLCBlLmxuZ0xhdC5sbmcsIGUubG5nTGF0LmxhdCk7XG4gIH1cbn1cbiJdfQ==