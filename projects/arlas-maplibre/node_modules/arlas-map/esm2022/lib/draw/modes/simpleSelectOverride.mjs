/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import MapboxDraw from '@mapbox/mapbox-gl-draw';
import { createSupplementaryPointsForCircle } from './circles/utils';
export const simpleSelectModeOverride = MapboxDraw.modes.simple_select;
simpleSelectModeOverride.dragMove = function (state, e) {
    // Dragging when drag move is enabled
    state.dragMoving = true;
    e.originalEvent.stopPropagation();
    const delta = {
        lng: e.lngLat.lng - state.dragMoveLocation.lng,
        lat: e.lngLat.lat - state.dragMoveLocation.lat
    };
    MapboxDraw.lib.moveFeatures(this.getSelected(), delta);
    this.getSelected()
        .filter(feature => feature.properties.isCircle)
        .map(circle => circle.properties.center)
        .forEach(center => {
        center[0] += delta.lng;
        center[1] += delta.lat;
    });
    state.dragMoveLocation = e.lngLat;
};
simpleSelectModeOverride.toDisplayFeatures = function (state, geojson, display) {
    geojson.properties.active = (this.isSelected(geojson.properties.id)) ?
        MapboxDraw.constants.activeStates.ACTIVE : MapboxDraw.constants.activeStates.INACTIVE;
    display(geojson);
    this.fireActionable();
    if (geojson.properties.active !== MapboxDraw.constants.activeStates.ACTIVE ||
        geojson.geometry.type === MapboxDraw.constants.geojsonTypes.POINT) {
        return;
    }
    const supplementaryPoints = geojson.properties.user_isCircle ?
        createSupplementaryPointsForCircle(geojson) : MapboxDraw.lib.createSupplementaryPoints(geojson);
    supplementaryPoints.forEach(display);
};
export default simpleSelectModeOverride;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlU2VsZWN0T3ZlcnJpZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1tYXAvc3JjL2xpYi9kcmF3L21vZGVzL3NpbXBsZVNlbGVjdE92ZXJyaWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILE9BQU8sVUFBVSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3JFLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO0FBRXZFLHdCQUF3QixDQUFDLFFBQVEsR0FBRyxVQUFVLEtBQUssRUFBRSxDQUFDO0lBQ2xELHFDQUFxQztJQUNyQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBRWxDLE1BQU0sS0FBSyxHQUFHO1FBQ1YsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHO1FBQzlDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRztLQUNqRCxDQUFDO0lBRUYsVUFBVSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXZELElBQUksQ0FBQyxXQUFXLEVBQUU7U0FDYixNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztTQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztTQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDZCxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVQLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUVGLHdCQUF3QixDQUFDLGlCQUFpQixHQUFHLFVBQVUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPO0lBQzFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUMxRixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3RCLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsTUFBTTtRQUN0RSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwRSxPQUFPO0lBQ1gsQ0FBQztJQUNELE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMxRCxrQ0FBa0MsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBR0YsZUFBZSx3QkFBd0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBHaXNhw69hIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFLnR4dCBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEdpc2HDr2EgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgTWFwYm94RHJhdyBmcm9tICdAbWFwYm94L21hcGJveC1nbC1kcmF3JztcbmltcG9ydCB7IGNyZWF0ZVN1cHBsZW1lbnRhcnlQb2ludHNGb3JDaXJjbGUgfSBmcm9tICcuL2NpcmNsZXMvdXRpbHMnO1xuXG5cbmV4cG9ydCBjb25zdCBzaW1wbGVTZWxlY3RNb2RlT3ZlcnJpZGUgPSBNYXBib3hEcmF3Lm1vZGVzLnNpbXBsZV9zZWxlY3Q7XG5cbnNpbXBsZVNlbGVjdE1vZGVPdmVycmlkZS5kcmFnTW92ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZSkge1xuICAgIC8vIERyYWdnaW5nIHdoZW4gZHJhZyBtb3ZlIGlzIGVuYWJsZWRcbiAgICBzdGF0ZS5kcmFnTW92aW5nID0gdHJ1ZTtcbiAgICBlLm9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBjb25zdCBkZWx0YSA9IHtcbiAgICAgICAgbG5nOiBlLmxuZ0xhdC5sbmcgLSBzdGF0ZS5kcmFnTW92ZUxvY2F0aW9uLmxuZyxcbiAgICAgICAgbGF0OiBlLmxuZ0xhdC5sYXQgLSBzdGF0ZS5kcmFnTW92ZUxvY2F0aW9uLmxhdFxuICAgIH07XG5cbiAgICBNYXBib3hEcmF3LmxpYi5tb3ZlRmVhdHVyZXModGhpcy5nZXRTZWxlY3RlZCgpLCBkZWx0YSk7XG5cbiAgICB0aGlzLmdldFNlbGVjdGVkKClcbiAgICAgICAgLmZpbHRlcihmZWF0dXJlID0+IGZlYXR1cmUucHJvcGVydGllcy5pc0NpcmNsZSlcbiAgICAgICAgLm1hcChjaXJjbGUgPT4gY2lyY2xlLnByb3BlcnRpZXMuY2VudGVyKVxuICAgICAgICAuZm9yRWFjaChjZW50ZXIgPT4ge1xuICAgICAgICAgICAgY2VudGVyWzBdICs9IGRlbHRhLmxuZztcbiAgICAgICAgICAgIGNlbnRlclsxXSArPSBkZWx0YS5sYXQ7XG4gICAgICAgIH0pO1xuXG4gICAgc3RhdGUuZHJhZ01vdmVMb2NhdGlvbiA9IGUubG5nTGF0O1xufTtcblxuc2ltcGxlU2VsZWN0TW9kZU92ZXJyaWRlLnRvRGlzcGxheUZlYXR1cmVzID0gZnVuY3Rpb24gKHN0YXRlLCBnZW9qc29uLCBkaXNwbGF5KSB7XG4gICAgZ2VvanNvbi5wcm9wZXJ0aWVzLmFjdGl2ZSA9ICh0aGlzLmlzU2VsZWN0ZWQoZ2VvanNvbi5wcm9wZXJ0aWVzLmlkKSkgP1xuICAgICAgICBNYXBib3hEcmF3LmNvbnN0YW50cy5hY3RpdmVTdGF0ZXMuQUNUSVZFIDogTWFwYm94RHJhdy5jb25zdGFudHMuYWN0aXZlU3RhdGVzLklOQUNUSVZFO1xuICAgIGRpc3BsYXkoZ2VvanNvbik7XG4gICAgdGhpcy5maXJlQWN0aW9uYWJsZSgpO1xuICAgIGlmIChnZW9qc29uLnByb3BlcnRpZXMuYWN0aXZlICE9PSBNYXBib3hEcmF3LmNvbnN0YW50cy5hY3RpdmVTdGF0ZXMuQUNUSVZFIHx8XG4gICAgICAgIGdlb2pzb24uZ2VvbWV0cnkudHlwZSA9PT0gTWFwYm94RHJhdy5jb25zdGFudHMuZ2VvanNvblR5cGVzLlBPSU5UKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3VwcGxlbWVudGFyeVBvaW50cyA9IGdlb2pzb24ucHJvcGVydGllcy51c2VyX2lzQ2lyY2xlID9cbiAgICAgICAgY3JlYXRlU3VwcGxlbWVudGFyeVBvaW50c0ZvckNpcmNsZShnZW9qc29uKSA6IE1hcGJveERyYXcubGliLmNyZWF0ZVN1cHBsZW1lbnRhcnlQb2ludHMoZ2VvanNvbik7XG4gICAgc3VwcGxlbWVudGFyeVBvaW50cy5mb3JFYWNoKGRpc3BsYXkpO1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBzaW1wbGVTZWxlY3RNb2RlT3ZlcnJpZGU7XG4iXX0=