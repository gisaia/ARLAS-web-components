/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import MapboxDraw from '@mapbox/mapbox-gl-draw';
export class AbstractDraw {
    constructor(config, enabled, map) {
        const modes = MapboxDraw.modes;
        this.config = JSON.parse(JSON.stringify(config));
        this.config.modes = Object.assign(modes, config.modes);
        this.drawProvider = new MapboxDraw(this.config);
        this.arlasMap = map;
        this.enabled = enabled;
    }
    onAdd(map) {
        const controlContainer = this.drawProvider.onAdd(map);
        if (!this.enabled) {
            controlContainer.className += ' draw-control-disabled';
        }
        return controlContainer;
    }
    onRemove(map) {
        return this.drawProvider.onRemove(map);
    }
    setMode(drawModes, replaceMode) {
        this.drawProvider.modes[drawModes] = replaceMode;
    }
    getAllFeatures() {
        return this.getAll().features;
    }
    onDrawCreate(fn) {
        this.on('draw.create', (e) => {
            fn(e);
        });
    }
    onDrawDelete(fn) {
        this.on('draw.delete', (e) => {
            fn(e);
        });
    }
    onDrawEditSaveInitialFeature(fn) {
        this.on('draw.edit.saveInitialFeature', (e) => {
            fn(e);
        });
    }
    onDrawInvalidGeometry(fn) {
        this.on('draw.invalidGeometry', (e) => {
            fn(e);
        });
    }
    onDrawModeChange(fn) {
        this.on('draw.modechange', (e) => {
            fn(e);
        });
    }
    onDrawOnClick(fn) {
        this.on('draw.onClick', (e) => {
            fn(e);
        });
    }
    onDrawOnStart(fn) {
        this.on('draw.onStart', (e) => {
            fn(e);
        });
    }
    onDrawOnStop(fn) {
        this.on('draw.onStop', (e) => {
            fn(e);
        });
    }
    onDrawSelectionchange(fn) {
        this.on('draw.selectionchange', (e) => {
            fn(e);
        });
    }
    onDrawUpdate(fn) {
        this.on('draw.update', (e) => {
            fn(e);
        });
    }
    getMode(modes) {
        return this.drawProvider.modes[modes];
    }
    on(event, func) {
        this.arlasMap.on(event, func);
    }
    add(feature) {
        this.drawProvider.add(feature);
    }
    get(featureId) {
        return this.drawProvider.get(featureId);
    }
    delete(ids) {
        this.drawProvider.delete(ids);
        return this;
    }
    deleteAll() {
        this.drawProvider.deleteAll();
        return this;
    }
    set(featureCollection) {
        return this.drawProvider.set(featureCollection);
    }
    trash() {
        this.drawProvider.trash();
        return this;
    }
    combineFeatures() {
        this.drawProvider.combineFeatures();
        return this;
    }
    uncombineFeatures() {
        this.drawProvider.uncombineFeatures();
        return this;
    }
    getCurrentMode() {
        return this.drawProvider.getMode();
    }
    getFeatureIdsAt(point) {
        return this.drawProvider.getFeatureIdsAt(point);
    }
    getSelectedIds() {
        return this.drawProvider.getSelectedIds();
    }
    getSelected() {
        return this.drawProvider.getSelected();
    }
    getAll() {
        return this.drawProvider.getAll();
    }
    getSelectedFeatures() {
        return this.getSelected().features;
    }
    setFeatureProperty(featureId, property, value) {
        this.drawProvider.setFeatureProperty(featureId, property, value);
        return this;
    }
    changeMode(mode, opt) {
        this.drawProvider.changeMode(mode, opt);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,