/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Output } from '@angular/core';
import { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import { Subject, takeUntil } from 'rxjs';
import { ArlasColorService } from 'arlas-web-components';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "arlas-web-components";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/button";
import * as i9 from "@ngx-translate/core";
export var GeoQueryOperator;
(function (GeoQueryOperator) {
    GeoQueryOperator["WITHIN"] = "within";
    GeoQueryOperator["NOT_WITHIN"] = "notwithin";
    GeoQueryOperator["INTERSECTS"] = "intersects";
    GeoQueryOperator["NOT_INTERSECTS"] = "notintersects";
})(GeoQueryOperator || (GeoQueryOperator = {}));
export class SelectFormControl extends UntypedFormControl {
    constructor(formState, label, options) {
        super(formState, Validators.required);
        this.syncOptions = [];
        this.setValue(formState);
        this.setSyncOptions(options);
    }
    setSyncOptions(newOptions) {
        this.syncOptions = newOptions;
        this.filteredOptions = newOptions;
    }
}
export class MapSettingsDialogComponent {
    constructor(dialogRef, colorGeneratorLoader) {
        this.dialogRef = dialogRef;
        this.colorGeneratorLoader = colorGeneratorLoader;
        /**
         * @Output : Angular
         * Emits the geo-query to apply. A geo-query is defined by
         * - the operation ("within", "intersects", "notwithin", "notintersects")
         * - the geometry field to query
         */
        this.geoQueryEmitter = new Subject();
        this.emittedGeoQueries = new Map();
        /** Constants */
        this.GEO_QUERIES_DESCRIPTION = marker('Draw a bbox or a polygon that');
        this.geoQueriesFormGroups = new Array();
        this.collectionsColors = new Array();
        this.selectionsSnapshot = new Map();
        this._onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    /** Emits the geo-query to apply */
    emitGeoFilter() {
        this.geoQueryEmitter.next(this.emittedGeoQueries);
    }
    /** Closes the dialog */
    onClose() {
        this.dialogRef.close();
    }
    createGeoQueryForm(collectionName, displayCollectionName, filterGeometries, operationsSelectModel) {
        /** geometry */
        const geometryPaths = filterGeometries.map(fg => fg.path);
        const selectedGeometry = filterGeometries.find(fg => fg.selected);
        const selectedGeometryPath = !!selectedGeometry ? selectedGeometry.path : '';
        /** operation */
        const operations = operationsSelectModel.map(osm => osm.operation);
        const selectedOperationSelectModel = operationsSelectModel.find(osm => osm.selected);
        const selectedOperation = !!selectedOperationSelectModel ? selectedOperationSelectModel.operation : GeoQueryOperator.INTERSECTS;
        const geoQueryControls = {
            a_operation: new SelectFormControl(selectedOperation, '', operations),
            b_geometryPath: new SelectFormControl(selectedGeometryPath, '', geometryPaths),
            c_collection: new UntypedFormControl(collectionName),
            d_displayCollectionName: new UntypedFormControl(displayCollectionName),
        };
        const geoQueryForm = new UntypedFormGroup(geoQueryControls);
        /** snapshot defaultselections */
        this.emittedGeoQueries.clear();
        this.selectionsSnapshot.clear();
        this.selectionsSnapshot.set(collectionName, selectedGeometry + selectedOperation);
        geoQueryForm.valueChanges
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(vc => {
            const selectionSnapShot = vc.b_geometryPath + vc.a_operation;
            /** ignore selection changes if the user go back to initial state of a control */
            const ignoreChange = selectionSnapShot === this.selectionsSnapshot.get(vc.c_collection);
            if (ignoreChange) {
                this.emittedGeoQueries.delete(vc.c_collection);
            }
            else {
                this.emittedGeoQueries.set(vc.c_collection, {
                    geometry_path: vc.b_geometryPath,
                    operation: vc.a_operation
                });
            }
        });
        this.collectionsColors.push((this.colorGeneratorLoader.getColor(collectionName)));
        this.geoQueriesFormGroups.push(geoQueryForm);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapSettingsDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: i2.ArlasColorService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: MapSettingsDialogComponent, selector: "arlas-map-settings-dialog", outputs: { geoQueryEmitter: "geoQueryEmitter" }, ngImport: i0, template: "<h1 mat-dialog-title class=\"mapgl-settings__title\">\n  {{ 'Geo-queries' | translate }}\n</h1>\n\n<div mat-dialog-content class=\"mapgl-settings\">\n  <div class=\"mapgl-settings__description\">\n    {{ GEO_QUERIES_DESCRIPTION | translate }}\n  </div>\n  <div class=\"mapgl-settings__form\" *ngFor=\"let formGroup of geoQueriesFormGroups; let i = index\"\n      [formGroup]=\"formGroup\" [style.borderLeftColor]=\"collectionsColors[i]\">\n    <div class=\"mapgl-settings__form__steps\">\n      <div *ngFor=\"let control of formGroup.controls | keyvalue\" class=\"mapgl-settings__form__steps__item\">\n        <div *ngIf=\"control.key === 'd_displayCollectionName'\">\n          {{ 'of_collection' | translate: { collection: (control.value.value | getCollectionDisplayName | translate) } }}\n        </div>\n        <mat-form-field *ngIf=\"control.key !== 'c_collection' && control.key !== 'color' && control.key !== 'd_displayCollectionName'\">\n          <mat-label>{{ control.key | translate }}</mat-label>\n          <mat-select [formControl]=\"control.value\">\n            <mat-option *ngFor=\"let option of control.value.syncOptions\" [value]=\"option\">\n              {{option | translate}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div mat-dialog-actions class=\"mapgl-settings__actions\">\n  <button mat-button class=\"mapgl-settings__actions--apply\"\n    (click)=\"emitGeoFilter()\">{{ 'Apply geo-queries' | translate }}</button>\n  <button mat-button class=\"mapgl-settings__actions--apply\"\n    (click)=\"emitGeoFilter();onClose()\">{{ 'Set geo-queries' | translate }}</button>\n  <button mat-button class=\"mapgl-settings__actions--cancel\"\n    (click)=\"onClose()\">{{ 'Cancel' | translate}}</button>\n</div>\n\n\n", styles: ["@charset \"UTF-8\";::ng-deep .map-settings-dialog .mdc-dialog__surface{padding:0 15px}.mapgl-settings__title{margin:0 0 20px!important}.mapgl-settings{position:relative;overflow:hidden}.mapgl-settings__description{padding-right:20px;padding-bottom:.65em}.mapgl-settings__form{display:flex;margin-bottom:15px;flex-direction:column;padding:5px 15px 0;justify-content:flex-start;box-shadow:0 2px 1px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f;border-left:3px solid}.mapgl-settings__form__steps{display:flex;justify-content:left;align-items:center}.mapgl-settings__form__steps__item{padding-right:20px;display:flex;justify-content:left;align-items:center;--mdc-filled-text-field-container-color: transparent;--mat-form-field-focus-state-layer-opacity: 0}.mapgl-settings__actions{--mat-dialog-actions-alignment: end}.mapgl-settings__actions--apply{--mdc-text-button-label-text-color: #ff4081;font-weight:bolder;outline:none}.mapgl-settings__actions--cancel{color:#000;margin:2px;outline:none}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i5.MatLabel, selector: "mat-label" }, { kind: "component", type: i6.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i7.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: i8.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "pipe", type: i3.KeyValuePipe, name: "keyvalue" }, { kind: "pipe", type: i9.TranslatePipe, name: "translate" }, { kind: "pipe", type: i2.GetCollectionDisplayNamePipe, name: "getCollectionDisplayName" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapSettingsDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-map-settings-dialog', template: "<h1 mat-dialog-title class=\"mapgl-settings__title\">\n  {{ 'Geo-queries' | translate }}\n</h1>\n\n<div mat-dialog-content class=\"mapgl-settings\">\n  <div class=\"mapgl-settings__description\">\n    {{ GEO_QUERIES_DESCRIPTION | translate }}\n  </div>\n  <div class=\"mapgl-settings__form\" *ngFor=\"let formGroup of geoQueriesFormGroups; let i = index\"\n      [formGroup]=\"formGroup\" [style.borderLeftColor]=\"collectionsColors[i]\">\n    <div class=\"mapgl-settings__form__steps\">\n      <div *ngFor=\"let control of formGroup.controls | keyvalue\" class=\"mapgl-settings__form__steps__item\">\n        <div *ngIf=\"control.key === 'd_displayCollectionName'\">\n          {{ 'of_collection' | translate: { collection: (control.value.value | getCollectionDisplayName | translate) } }}\n        </div>\n        <mat-form-field *ngIf=\"control.key !== 'c_collection' && control.key !== 'color' && control.key !== 'd_displayCollectionName'\">\n          <mat-label>{{ control.key | translate }}</mat-label>\n          <mat-select [formControl]=\"control.value\">\n            <mat-option *ngFor=\"let option of control.value.syncOptions\" [value]=\"option\">\n              {{option | translate}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div mat-dialog-actions class=\"mapgl-settings__actions\">\n  <button mat-button class=\"mapgl-settings__actions--apply\"\n    (click)=\"emitGeoFilter()\">{{ 'Apply geo-queries' | translate }}</button>\n  <button mat-button class=\"mapgl-settings__actions--apply\"\n    (click)=\"emitGeoFilter();onClose()\">{{ 'Set geo-queries' | translate }}</button>\n  <button mat-button class=\"mapgl-settings__actions--cancel\"\n    (click)=\"onClose()\">{{ 'Cancel' | translate}}</button>\n</div>\n\n\n", styles: ["@charset \"UTF-8\";::ng-deep .map-settings-dialog .mdc-dialog__surface{padding:0 15px}.mapgl-settings__title{margin:0 0 20px!important}.mapgl-settings{position:relative;overflow:hidden}.mapgl-settings__description{padding-right:20px;padding-bottom:.65em}.mapgl-settings__form{display:flex;margin-bottom:15px;flex-direction:column;padding:5px 15px 0;justify-content:flex-start;box-shadow:0 2px 1px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f;border-left:3px solid}.mapgl-settings__form__steps{display:flex;justify-content:left;align-items:center}.mapgl-settings__form__steps__item{padding-right:20px;display:flex;justify-content:left;align-items:center;--mdc-filled-text-field-container-color: transparent;--mat-form-field-focus-state-layer-opacity: 0}.mapgl-settings__actions{--mat-dialog-actions-alignment: end}.mapgl-settings__actions--apply{--mdc-text-button-label-text-color: #ff4081;font-weight:bolder;outline:none}.mapgl-settings__actions--cancel{color:#000;margin:2px;outline:none}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }, { type: i2.ArlasColorService }], propDecorators: { geoQueryEmitter: [{
                type: Output
            }] } });
export class MapSettingsComponent {
    constructor(dialog) {
        this.dialog = dialog;
        /**
         * @Output : Angular
         * Emits the geo-query to apply. A geo-query is defined by
         * - the operation ("within", "intersects", "notwithin", "notintersects")
         * - the geometry field to query
         */
        this.geoQueryEmitter = new Subject();
    }
    openDialog(mapSettingsService) {
        this.dialogRef = this.dialog.open(MapSettingsDialogComponent, { data: null, panelClass: 'map-settings-dialog' });
        const mapGeoQueries = mapSettingsService.getGeoQueries();
        if (!!mapGeoQueries) {
            mapGeoQueries.forEach((geoQueries, collection) => {
                this.dialogRef.componentInstance.createGeoQueryForm(collection, geoQueries[2], geoQueries[0], geoQueries[1]);
            });
        }
        this.dialogRef.componentInstance.geoQueryEmitter = this.geoQueryEmitter;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapSettingsComponent, deps: [{ token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: MapSettingsComponent, selector: "arlas-map-settings", outputs: { geoQueryEmitter: "geoQueryEmitter" }, ngImport: i0, template: "\n", styles: ["@charset \"UTF-8\";\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapSettingsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-map-settings', template: "\n", styles: ["@charset \"UTF-8\";\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialog }], propDecorators: { geoQueryEmitter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,