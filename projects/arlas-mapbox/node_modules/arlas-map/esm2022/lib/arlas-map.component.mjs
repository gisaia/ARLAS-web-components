/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TranslateService } from '@ngx-translate/core';
import { finalize, fromEvent, Subject, takeUntil } from 'rxjs';
import { ArlasMapFrameworkService } from './arlas-map-framework.service';
import * as mapJsonSchema from './arlas-map.schema.json';
import { AbstractArlasMapService } from './arlas-map.service';
import { BasemapService } from './basemaps/basemap.service';
import { ArlasBasemaps } from './basemaps/basemaps.model';
import { ArlasDrawComponent } from './draw/arlas-draw.component';
import { MapboxAoiDrawService } from './draw/draw.service';
import { CROSS_LAYER_PREFIX, RESET_BEARING, ZOOM_IN, ZOOM_OUT } from './map/AbstractArlasMapGL';
import { ARLAS_VSET, getLayerName } from './map/model/layers';
import * as i0 from "@angular/core";
import * as i1 from "./draw/draw.service";
import * as i2 from "./basemaps/basemap.service";
import * as i3 from "@ngx-translate/core";
import * as i4 from "./arlas-map-framework.service";
import * as i5 from "./arlas-map.service";
import * as i6 from "@angular/material/icon";
import * as i7 from "@angular/material/slide-toggle";
import * as i8 from "@angular/material/tooltip";
import * as i9 from "@angular/cdk/drag-drop";
import * as i10 from "@angular/common";
import * as i11 from "./coordinates/coordinates.component";
import * as i12 from "./basemaps/basemap.component";
import * as i13 from "./legend/legend.component";
import * as i14 from "./draw/arlas-draw.component";
import * as i15 from "arlas-web-components";
import * as i16 from "./arlas-map.pipe";
/** L: a layer class/interface.
 *  S: a source class/interface.
 *  M: a Map configuration class/interface.
 */
export class ArlasMapComponent {
    constructor(drawService, basemapService, translate, mapFrameworkService, mapService) {
        this.drawService = drawService;
        this.basemapService = basemapService;
        this.translate = translate;
        this.mapFrameworkService = mapFrameworkService;
        this.mapService = mapService;
        /** Whether the legend is visible (open) or not.*/
        this.legendOpen = true;
        /** Used to clear geojson sources. */
        this.emptyData = {
            'type': 'FeatureCollection',
            'features': []
        };
        /** Whether the list of basemaps is shown. */
        this.showBasemapList = false;
        /** Visibility status of each visualisation set*. */
        this.visibilityStatus = new Map();
        this._onDestroy$ = new Subject();
        /** ANGULAR INPUTS */
        /** @description Html identifier given to the map container (it's a div ;))*/
        this.id = 'mapgl';
        /** @description An object with north,east,south,west properies which represent an offset in pixels */
        /** Origin is top-left and x-axis is west to east and y-axis north to south.*/
        this.offset = { north: 0, east: 0, south: 0, west: 0 };
        /** --- SCALE & COORDINATES */
        /** @description Whether the map scale is displayed. */
        this.displayScale = true;
        /** @description Maximim width in pixels that the map scale could take. */
        this.maxWidthScale = 100;
        /** @description Unit display for the map scale. */
        this.unitScale = 'metric';
        /** @description Whether to display the coordinates of the mouse while moving. */
        this.displayCurrentCoordinates = false;
        /** @description If true, the coordinates values are wrapped between -180 and 180. */
        this.wrapLatLng = true;
        /** @description List of available basemaps. */
        this.basemapStyles = new Array();
        /** --- INITIAL MAP VIEW : ZOOMs, CENTER, BOUNDS */
        /** @description Zoom of the map when it's initialized. */
        this.initZoom = 2;
        /** @description Max zoom of the map. */
        this.maxZoom = 22;
        /** @description Min zoom of the map. */
        this.minZoom = 0;
        /** @description Coordinates of the map's center when it's first loaded. */
        this.initCenter = [2.1972656250000004, 45.706179285330855];
        /** @description The padding added in the top-left and bottom-right corners of a map container that shouldn't be accounted */
        /** for when setting the view to fit bounds.*/
        this.fitBoundsOffSet = [0, 0];
        /**  @description Padding value applied around a fitBounds to fully show the area targeted. */
        this.fitBoundsPadding = 10;
        /** @description The maximum zoom level so that the bounds fit the map view. */
        this.fitBoundsMaxZoom = 22;
        /** @description Subject to which the component subscribes to redraw on the map the `data` of the given `source`. */
        this.redrawSource = new Subject();
        /** --- DRAW */
        /**  @description Options object for draw tools : https://github.com/mapbox/mapbox-gl-draw/blob/master/docs/API.md#options */
        this.drawOption = {};
        /** @description Features drawn at component start */
        this.drawData = ({ ...this.emptyData });
        /** @description Whether the draw tools are activated. */
        this.drawButtonEnabled = false;
        /** @description Whether the drawing buffer is activated */
        /** If true, the map's canvas can be exported to a PNG using map.getCanvas().toDataURL(). Default: false */
        this.preserveDrawingBuffer = false;
        /** --- ATTRIBUTION */
        /** @description Position of the map attribution. */
        this.mapAttributionPosition = 'bottom-right';
        /** --- LEGEND AND VISUALISATIONS */
        /** @description Subject of [collection, [field, legendData]] map. The map subscribes to it to keep */
        /** the legend updated with the data displayed on the map. */
        this.legendUpdater = new Subject();
        /** @description Subject of [layerId, boolean] map. The map subscribes to it to keep */
        /** the legend updated with the visibility of the layer.*/
        this.visibilityUpdater = new Subject();
        /** ANGULAR OUTPUTS */
        /** @description Emits true after the map is loaded and all sources & layers are added. */
        this.onMapLoaded = new Subject();
        /** @description Emits the map extent when the browser tab is closed/refreshed. */
        this.onMapClosed = new EventEmitter();
        /**
         * @deprecated
         * @description  Emits the event of moving the map. */
        this.onMove = new EventEmitter();
        /** @description Emits the visible visualisation sets' names */
        this.visualisations = new EventEmitter();
        /** @description Emits the features that were clicked on. */
        this.onFeatureClick = new EventEmitter();
        /** @description Emits the features that were hovered. */
        this.onFeatureHover = new EventEmitter();
        /** @description Emits the geojson of all aois added to the map. */
        this.onAoiChanged = new EventEmitter();
        /** @description Emits the the dimensions of the polygon/bbox that is being drawn. */
        this.onAoiEdit = new EventEmitter();
        /** @description Emits an event when the basemap has been changed by the user. */
        this.onBasemapChanged = new Subject();
        /** @description Emits which layers are displayed on the map. */
        this.legendVisibiltyStatus = new Subject();
        /** @description  Notifies that the user wants to download the selected layer */
        this.downloadSourceEmitter = new Subject();
        this.ICONS_BASE_PATH = 'assets/icons/';
        this.basemapService.protomapBasemapAdded$.pipe(takeUntilDestroyed())
            .subscribe(() => this.reorderLayers());
    }
    ngAfterViewInit() {
        /** init values */
        if (!this.initCenter) {
            this.initCenter = [0, 0];
        }
        if (this.initZoom === undefined || this.initZoom === null) {
            this.initZoom = 3;
        }
        if (this.maxZoom === undefined || this.maxZoom === null) {
            this.maxZoom = 23;
        }
        this.minZoom = this.minZoom ?? 0;
        /** BASEMAPS */
        if (this.defaultBasemapStyle && typeof this.defaultBasemapStyle.styleFile === 'string') {
            this.defaultBasemapStyle.url = this.defaultBasemapStyle.styleFile;
        }
        this.basemapStyles.forEach(bm => {
            if (typeof bm.styleFile === 'string') {
                bm.url = (bm.styleFile);
            }
        });
        this.basemapService.setBasemaps(new ArlasBasemaps(this.defaultBasemapStyle, this.basemapStyles));
        this.basemapService.fetchSources$()
            .pipe(finalize(() => this.declareMap()))
            .subscribe();
    }
    ngOnChanges(changes) {
        if (this.map && this.map.getMapProvider() !== undefined) {
            if (changes['boundsToFit'] !== undefined) {
                const newBoundsToFit = changes['boundsToFit'].currentValue;
                this.map.fitBounds(newBoundsToFit, {
                    maxZoom: this.fitBoundsMaxZoom,
                    offset: this.fitBoundsOffSet
                });
            }
            if (changes['featureToHightLight'] !== undefined
                && changes['featureToHightLight'].currentValue !== changes['featureToHightLight'].previousValue) {
                const featureToHightLight = changes['featureToHightLight'].currentValue;
                this.highlightFeature(featureToHightLight);
            }
            if (changes['featuresToSelect'] !== undefined
                && changes['featuresToSelect'].currentValue !== changes['featuresToSelect'].previousValue) {
                const featuresToSelect = changes['featuresToSelect'].currentValue;
                this.selectFeatures(featuresToSelect);
            }
        }
    }
    /** If transformRequest' @Input was not set, set a default value : a function that maintains the same url */
    initTransformRequest() {
        if (!this.transformRequest) {
            this.transformRequest = this.mapFrameworkService.getInitTransformRequest();
        }
    }
    /** Zooms on clicked feature from map mouse event e.
     * @param mouseEvent Map mouse event provided by the map instance.
     */
    zoomOnClick(mouseEvent) {
        const zoom = this.map.getZoom();
        let newZoom;
        if (zoom >= 0 && zoom < 3) {
            newZoom = 4;
        }
        else if (zoom >= 3 && zoom < 5) {
            newZoom = 5;
        }
        else if (zoom >= 5 && zoom < 7) {
            newZoom = 7;
        }
        else if (zoom >= 7 && zoom < 10) {
            newZoom = 10;
        }
        else if (zoom >= 10 && zoom < 11) {
            newZoom = 11;
        }
        else {
            newZoom = 12;
        }
        this.mapFrameworkService.flyTo(mouseEvent.lngLat.lat, mouseEvent.lngLat.lng, newZoom, this.map);
    }
    /**
     * Queries all rendered features on the position that was clicked on, on a layer; and emits those features.
     * @param mapLayerMouseEvent Map mouse event provided by a layer instance.
     */
    queryRender(mapLayerMouseEvent) {
        const hasCrossOrDrawLayer = this.mapFrameworkService.queryFeatures(mapLayerMouseEvent, this.map, CROSS_LAYER_PREFIX);
        if (!this.drawService.isDrawingBbox && !this.drawService.isDrawingPolygon
            && !this.drawService.isDrawingCircle && !this.drawService.isInSimpleDrawMode && !hasCrossOrDrawLayer) {
            this.onFeatureClick.next({ features: mapLayerMouseEvent.features, point: [mapLayerMouseEvent.lngLat.lng, mapLayerMouseEvent.lngLat.lat] });
        }
    }
    /** @description Adds the custom icons given in the component's input */
    addIcons() {
        if (this.icons) {
            this.icons.forEach(icon => {
                const iconName = icon.path.split('.')[0];
                const iconPath = this.ICONS_BASE_PATH + icon.path;
                const iconErrorMessage = 'The icon "' + this.ICONS_BASE_PATH + icon.path + '" is not found';
                this.mapFrameworkService.addImage(iconName, iconPath, this.map, iconErrorMessage, { 'sdf': icon.recolorable });
            });
        }
        this.mapFrameworkService.addImage('rotate', this.ICONS_BASE_PATH + 'rotate/01.png', this.map, 'Rotate not found');
        this.mapFrameworkService.addImage('resize', this.ICONS_BASE_PATH + 'resize/01.png', this.map, 'Resize not found');
    }
    /**
     * @description Creates the map instance and adds the basemap, arlas data
     * and starts listening to arlas data changes and layers visibility updates.
     * It also starts emiting map moveend event.
     */
    declareMap() {
        this.initTransformRequest();
        const arlasMapOption = {
            container: this.id,
            style: this.basemapService.getInitStyle(this.basemapService.basemaps.getSelected()),
            center: this.initCenter,
            zoom: this.initZoom,
            maxZoom: this.maxZoom,
            minZoom: this.minZoom,
            renderWorldCopies: true,
            preserveDrawingBuffer: this.preserveDrawingBuffer,
            locale: {
                'NavigationControl.ZoomIn': this.translate.instant(ZOOM_IN),
                'NavigationControl.ZoomOut': this.translate.instant(ZOOM_OUT),
                'NavigationControl.ResetBearing': this.translate.instant(RESET_BEARING)
            },
            pitchWithRotate: false,
            transformRequest: this.transformRequest,
            attributionControl: false,
        };
        const mapProviderOptions = this.mapFrameworkService.buildMapProviderOption(arlasMapOption);
        const config = {
            displayCurrentCoordinates: this.displayCurrentCoordinates,
            fitBoundsPadding: this.fitBoundsPadding,
            margePanForLoad: this.margePanForLoad,
            margePanForTest: this.margePanForTest,
            offset: this.offset,
            wrapLatLng: this.wrapLatLng,
            maxWidthScale: this.maxWidthScale,
            unitScale: this.unitScale,
            mapProviderOptions,
            controls: {
                mapAttribution: {
                    enable: true,
                    position: this.mapAttributionPosition,
                    config: {
                        compact: false
                    }
                },
                scale: {
                    enable: this.displayScale
                },
                navigationControl: {
                    enable: true
                },
                pitchToggle: {
                    enable: true,
                    config: { bearing: -20, pitch: 70, minpitchzoom: 11 }
                }
            }
        };
        this.map = this.mapFrameworkService.createMap(config);
        fromEvent(window, 'beforeunload').subscribe(() => {
            this.onMapClosed.next(this.map.getMapExtend());
        });
        this.map.onCustomEvent('beforeOnLoadInit', () => {
            this.basemapService.declareProtomapProtocol(this.map);
            this.basemapService.addProtomapBasemap(this.map);
            this.addIcons();
            this.mapService.declareArlasDataSources(this.dataSources, this.emptyData, this.map);
            this.mapService.declareBasemapSources(this.mapSources, this.map);
            this.mapService.addArlasDataLayers(this.visualisationSetsConfig, this.mapLayers, this.map);
            this.listenToLayersEvents();
        });
        this.mapFrameworkService.onMapEvent('load', this.map, () => {
            if (this.mapLayers !== null) {
                this.visibilityUpdater.subscribe(visibilityStatus => {
                    this.mapService.updateVisibility(visibilityStatus, this.visualisationSetsConfig, this.map);
                });
            }
            this.onMapLoaded.next(true);
        });
        this.map.onMoveEnd(this.mapService.visualisationsSets).subscribe((moveResult => {
            this.onMove.next(moveResult);
        }));
        if (this.redrawSource) {
            this.redrawSource.pipe(takeUntil(this._onDestroy$)).subscribe(sd => {
                this.mapFrameworkService.setDataToGeojsonSource(this.mapFrameworkService.getSource(sd.source, this.map), {
                    'type': 'FeatureCollection',
                    'features': sd.data
                });
            });
        }
    }
    /**
     * @description Listens to events on mapLayers input (configured layers).
     */
    listenToLayersEvents() {
        /** Zooms on the clicked feature of the given layers. */
        this.mapLayers.events.zoomOnClick.forEach(layerId => {
            this.mapFrameworkService.onLayerEvent('click', this.map, layerId, (e) => this.zoomOnClick(e));
        });
        this.mapLayers.events.onHover.forEach(layerId => {
            /** Emits the hovered feature on mousemove. */
            this.mapFrameworkService.onLayerEvent('mousemove', this.map, layerId, (e) => this.onFeatureHover.next({ features: e.features, point: [e.lngLat.lng, e.lngLat.lat] }));
            /** Emits an empty object on mouse leaving a feature. */
            this.mapFrameworkService.onLayerEvent('mouseleave', this.map, layerId, (e) => this.onFeatureHover.next({}));
        });
        /** Emits the clicked on feature. */
        this.mapLayers.events.emitOnClick.forEach(layerId => {
            this.mapFrameworkService.onLayerEvent('click', this.map, layerId, (e) => this.queryRender(e));
        });
        const drawPolygonLayers = [
            'gl-draw-polygon-stroke-inactive',
            'gl-draw-polygon-stroke-active',
            'gl-draw-polygon-stroke-static'
        ].map(layer => ['.cold', '.hot']
            .map(id => layer.concat(id)))
            .reduce((p, ac) => ac.concat(p), []);
        /** Sets mouse cursor on drawn features */
        drawPolygonLayers.forEach(layerId => {
            this.mapFrameworkService.onLayerEvent('mousemove', this.map, layerId, (e) => this.mapFrameworkService.setMapCursor(this.map, 'pointer'));
            this.mapFrameworkService.onLayerEvent('mouseleave', this.map, layerId, (e) => {
                if (this.drawService.isDrawing()) {
                    this.mapFrameworkService.setMapCursor(this.map, 'crosshair');
                }
                else {
                    this.mapFrameworkService.setMapCursor(this.map, '');
                }
            });
        });
    }
    /** Sets the layers order according to the current order of `visualisationSetsConfig` list*/
    reorderLayers() {
        this.mapService.reorderLayers(this.visualisationSetsConfig, this.map);
    }
    /** @description Display the basemapswitcher */
    showBasemapSwitcher() {
        this.showBasemapList = true;
    }
    /** @description Emits event notifiying that the basemap has been changed */
    onChangeBasemapStyle() {
        this.onBasemapChanged.next(true);
    }
    /**
     * Updates the visibility status of the layer and emits that update.
     * @param visualisation visualisation set name
     * @param l layer id
     * @param visible whether the layer is enabled and visible in the visualisation set
     */
    emitLegendVisibility(visualisation, l, visible) {
        // Copy the map so the pipe updates the values
        this.visibilityStatus = new Map(this.visibilityStatus);
        this.visibilityStatus.set(visualisation + ARLAS_VSET + l, visible);
        this.legendVisibiltyStatus.next(this.visibilityStatus);
    }
    /**
     * @description Emits the visible visualisation set
     * @param visualisationName Name of the visualisation.
     */
    emitVisualisations(visualisationName) {
        const layers = this.mapService.updateLayoutVisibility(visualisationName, this.visualisationSetsConfig, this.map);
        this.visualisations.emit(layers);
        this.reorderLayers();
    }
    downloadLayerSource(downaload) {
        const downlodedSource = {
            layerId: downaload.layer.id,
            layerName: getLayerName(downaload.layer.id),
            collection: downaload.layer.metadata.collection,
            sourceName: downaload.layer.source,
            downloadType: downaload.downloadType
        };
        this.downloadSourceEmitter.next(downlodedSource);
    }
    /** puts the visualisation set list in the new order after dropping */
    drop(event) {
        moveItemInArray(this.visualisationSetsConfig, event.previousIndex, event.currentIndex);
        this.reorderLayers();
    }
    /** puts the layers list in the new order after dropping */
    dropLayer(event, visuName) {
        const layers = Array.from(this.mapService.findVisualisationSetLayer(visuName, this.visualisationSetsConfig));
        moveItemInArray(layers, event.previousIndex, event.currentIndex);
        this.mapService.setVisualisationSetLayers(visuName, layers, this.visualisationSetsConfig);
        this.reorderLayers();
    }
    hideBasemapSwitcher() {
        this.showBasemapList = false;
    }
    /**
     * Fit to given bounds. Options are for padding.
     * @param bounds Bounds of the map to fit to.
     */
    fitToPaddedBounds(bounds) {
        this.map.fitToPaddedBounds(bounds);
    }
    /**
     * Centers the map to the given latitude/longitude coordinates.
     * @param lngLat Latitude/longitude coordinates.
     */
    moveToCoordinates(lngLat) {
        this.map.setCenter(lngLat);
    }
    /** Highlights, in all data sources,the feature(s) having the given elementIdentifier */
    highlightFeature(featureToHightLight) {
        this.mapService.highlightFeature(this.mapLayers, this.map, featureToHightLight);
    }
    /** Selects, in all data sources,the feature(s) having the given elementIdentifier */
    selectFeatures(elementToSelect) {
        this.mapService.selectFeatures(this.mapLayers, this.map, elementToSelect);
    }
    /** Selects, in all data sources, all the features having the given elementIdentifiers and under the given collection.
     * @param features list of features identifiers.
     * @param collection data collection (metadata of the data source).
    */
    selectFeaturesByCollection(features, collection) {
        this.mapService.selectFeaturesByCollection(this.mapLayers, this.map, features, collection);
    }
    static getMapJsonSchema() {
        return mapJsonSchema;
    }
    /** Destroys all the components subscriptions. */
    ngOnDestroy() {
        if (this.map) {
            this.map.unsubscribeEvents();
        }
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    /** @description Enables bbox drawing mode.*/
    addGeoBox() {
        this.drawComponent.addGeoBox();
    }
    /**
     * @description Removes all the aois if none of them is selected. Otherwise it removes the selected one only
     */
    removeAois() {
        this.drawComponent.removeAois();
    }
    /** @description Deletes the selected drawn geometry. If no drawn geometry is selected, all geometries are deteleted */
    deleteSelectedItem() {
        this.drawComponent.deleteSelectedItem();
    }
    /**
     * @description Switches to a drawing mode of a DRAW_POLYGON, DRAW_CIRCLE or DRAW_RADIUS_CIRCLE.
     * @param mode Draw mode (DRAW_POLYGON, DRAW_CIRCLE or DRAW_RADIUS_CIRCLE). Default to DRAW_POLYGON
     * @param option Mapboxdraw option.
     */
    switchToDrawMode(mode, option) {
        this.drawComponent.switchToDrawMode(mode, option);
    }
    /**
     * @description Switches to direct_select mode.
     * @param option Mapboxdraw option.
     */
    switchToDirectSelectMode(option) {
        this.drawComponent.switchToDirectSelectMode(option);
    }
    /**
     * @description Switches to simple_select mode.
     * @param option Mapboxdraw option.
     */
    switchToEditMode() {
        this.drawComponent.switchToEditMode();
    }
    /**
     * @description Returns all the drawn polygons as wkt or geojson.
     * @param mode 'wkt' | 'geojson'
     * @returns Wkt string or Geojson object.
     */
    getAllPolygon(mode) {
        return this.drawComponent.getAllPolygon(mode);
    }
    /**
     * @description returns the selected polygon geometry in WKT or GeoJson given the mode
     * @param mode : 'wkt' | 'geojson'
     * @returns Wkt string or Geojson object.
     */
    getSelectedPolygon(mode) {
        return this.drawComponent.getSelectedPolygon(mode);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasMapComponent, deps: [{ token: i1.MapboxAoiDrawService }, { token: i2.BasemapService }, { token: i3.TranslateService }, { token: i4.ArlasMapFrameworkService }, { token: i5.AbstractArlasMapService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: ArlasMapComponent, selector: "arlas-map", inputs: { id: "id", offset: "offset", mapLayers: "mapLayers", displayScale: "displayScale", maxWidthScale: "maxWidthScale", unitScale: "unitScale", displayCurrentCoordinates: "displayCurrentCoordinates", wrapLatLng: "wrapLatLng", defaultBasemapStyle: "defaultBasemapStyle", basemapStyles: "basemapStyles", initZoom: "initZoom", maxZoom: "maxZoom", minZoom: "minZoom", initCenter: "initCenter", boundsToFit: "boundsToFit", fitBoundsOffSet: "fitBoundsOffSet", fitBoundsPadding: "fitBoundsPadding", fitBoundsMaxZoom: "fitBoundsMaxZoom", margePanForLoad: "margePanForLoad", margePanForTest: "margePanForTest", transformRequest: "transformRequest", featureToHightLight: "featureToHightLight", featuresToSelect: "featuresToSelect", mapSources: "mapSources", redrawSource: "redrawSource", dataSources: "dataSources", drawOption: "drawOption", drawData: "drawData", drawButtonEnabled: "drawButtonEnabled", drawPolygonVerticesLimit: "drawPolygonVerticesLimit", preserveDrawingBuffer: "preserveDrawingBuffer", mapAttributionPosition: "mapAttributionPosition", icons: "icons", legendUpdater: "legendUpdater", visibilityUpdater: "visibilityUpdater", visualisationSetsConfig: "visualisationSetsConfig" }, outputs: { onMapLoaded: "onMapLoaded", onMapClosed: "onMapClosed", onMove: "onMove", visualisations: "visualisations", onFeatureClick: "onFeatureClick", onFeatureHover: "onFeatureHover", onAoiChanged: "onAoiChanged", onAoiEdit: "onAoiEdit", onBasemapChanged: "onBasemapChanged", legendVisibiltyStatus: "legendVisibiltyStatus", downloadSourceEmitter: "downloadSourceEmitter" }, viewQueries: [{ propertyName: "drawComponent", first: true, predicate: ["drawComponent"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"map__container\">\n  <div class=\"map__visu-list\" *ngIf=\"visualisationSetsConfig?.length > 0\">\n    <div class=\"map__legend-button\" [matTooltipPosition]=\"'left'\" matTooltip=\"{{'Manage layers' | translate}}\">\n      <mat-icon (click)=\"legendOpen=!legendOpen\" (keyDown)=\"legendOpen=!legendOpen\">layers</mat-icon>\n    </div>\n    <div [hidden]=\"!legendOpen\" class=\"map__visu-list--container\" cdkDropList\n      (cdkDropListDropped)=\"drop($event)\">\n      <div cdkDrag class=\"map__visu-item\" *ngFor=\"let visu of visualisationSetsConfig\">\n        <div cdkDragHandle class=\"map__visu-title\">\n          <span class=\"map__visu-title-text\" [class.map__visu-title-text--disabled]=\"!visu.enabled\">\n            {{visu.name | translate}}</span>\n          <mat-slide-toggle [checked]=\"visu.enabled\" (change)=\"emitVisualisations(visu.name)\"\n            [matTooltip]=\"'show_layers' | translate\" [hideIcon]=\"true\"></mat-slide-toggle>\n        </div>\n        <div class=\"map__visu-content\" cdkDropList (cdkDropListDropped)=\"dropLayer($event, visu.name)\">\n          <div cdkDrag *ngFor=\"let l of visu.layers\" class=\"map__visu-layer\"\n            [class.cdk-visually-hidden]=\"((visu.name + ':arlas_vset:' + l) | getValue:visibilityStatus) !== true\">\n            <div cdkDragHandle class=\"map__visu-layer-drag\">\n              <mat-icon>drag_indicator</mat-icon>\n            </div>\n            <arlas-legend [collection]=\"l | getCollection: mapService.layersMap \" [enabled]=\"visu.enabled\"\n              [layer]=\"l | getValue: mapService.layersMap \" [zoom]=\"map?.zoom\"\n              (visibilityStatus)=\"emitLegendVisibility(visu.name, l, $event)\" [legendUpdater]=\"legendUpdater\"\n              [visibilityUpdater]=\"visibilityUpdater\"\n              (downloadSourceEmitter)=\"downloadLayerSource($event)\"></arlas-legend>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<arlas-coordinates *ngIf=\"displayCurrentCoordinates\" [currentLat]=\"map?.currentLat\" [currentLng]=\"map?.currentLng\"\n  (moveToCoordinates$)=\"moveToCoordinates($event)\"></arlas-coordinates>\n\n<arlas-basemap *ngIf=\"showBasemapList\" [mapSources]=\"mapSources\" [map]=\"map\" (mouseleave)=\"hideBasemapSwitcher()\"\n  (basemapChanged)=\"onChangeBasemapStyle()\"></arlas-basemap>\n\n\n<arlas-draw #drawComponent *ngIf=\"map\" [map]=\"map\" [emptyData]=\"emptyData\" [drawData]=\"drawData\"\n  [drawButtonEnabled]=\"drawButtonEnabled\" [drawOption]=\"drawOption\"\n  [drawPolygonVerticesLimit]=\"drawPolygonVerticesLimit\" [preserveDrawingBuffer]=\"preserveDrawingBuffer\"\n  (onAoiChanged)=\"onAoiChanged.emit($event)\"\n  (onAoiEdit)=\"onAoiEdit.emit($event)\"></arlas-draw>", styles: ["@charset \"UTF-8\";.map__container{width:100%;height:100%;position:absolute!important}.map__visu-list{position:absolute;display:flex;flex-direction:column;top:220px;right:7px;z-index:1;background:transparent;flex-wrap:wrap-reverse}.map__legend-button{cursor:pointer;margin-bottom:4px;border-radius:3px;background-color:#fff;width:30px;height:30px;padding:3px}.map__legend-button:hover{background-color:#f5f5f5}.map__visu-list--container{padding:1px 1px 3px;border-radius:2px;max-height:calc(100vh - 415px);overflow-y:auto;overflow-x:hidden}.map__visu-item{margin:1px;padding:unset;padding-right:3px;width:225px;border:.8px solid #ddd;background:#fff;border-radius:3px}.map__visu-title{display:flex;justify-content:space-between;padding:1px 5px 1px 0;font-weight:550;font-size:14px;cursor:grab;--mdc-switch-track-width: 24px;--mdc-switch-track-height: 5px;--mdc-switch-handle-width: 12px;--mdc-switch-state-layer-size: 0;--mat-switch-selected-handle-horizontal-margin: 0 1px}.map__visu-title:hover .map__visu-toggle .map__visu-drag{visibility:visible}.map__visu-title .mdc-switch__handle{--mat-switch-unselected-handle-size: 12px;--mat-switch-selected-handle-size: 12px;--mat-switch-pressed-handle-size: 12px;--mdc-switch-unselected-handle-color: lightgrey;--mdc-switch-unselected-focus-handle-color: lightgrey;--mdc-switch-unselected-hover-handle-color: lightgrey;--mdc-switch-unselected-pressed-handle-color: lightgrey}.map__visu-title-text{color:#333;padding:3px}.map__visu-title-text--disabled{color:#bbb}.map__visu-content{max-height:300px;overflow-y:auto;overflow-x:hidden}.map__visu-layer{background-color:#fff;position:relative;overflow:hidden}.map__visu-layer-drag{position:absolute;top:5px;left:0;display:flex;padding-left:3px}.map__visu-layer-drag mat-icon{font-size:18px;width:18px;height:18px;color:#999}.map__visu-layer:hover .map__visu-layer-drag{cursor:grab;z-index:2}.map__visu-layer:hover .map__visu-layer-drag mat-icon{color:#444}.draw-tooltip--hide{display:none}.draw-tooltip--show{display:block;position:fixed;overflow:hidden;font-size:.8em;background-color:#fff;border-radius:2px;padding:2px;box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}::-webkit-scrollbar{width:3px!important;height:4px!important;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}.cdk-drag-preview{box-sizing:border-box;font-size:.75em;border-radius:3px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-preview .map__visu-layer .map__visu-layer-drag mat-icon{color:#444}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.draw-control-disabled{display:none}\n"], dependencies: [{ kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i7.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon", "disabledInteractive"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { kind: "directive", type: i8.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "directive", type: i9.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i9.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i9.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "directive", type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i11.CoordinatesComponent, selector: "arlas-coordinates", inputs: ["currentLat", "currentLng"], outputs: ["moveToCoordinates$"] }, { kind: "component", type: i12.BasemapComponent, selector: "arlas-basemap", inputs: ["map", "mapSources"], outputs: ["basemapChanged", "blur"] }, { kind: "component", type: i13.LegendComponent, selector: "arlas-legend", inputs: ["layer", "collection", "zoom", "enabled", "legendUpdater", "visibilityUpdater"], outputs: ["visibilityStatus", "downloadSourceEmitter"] }, { kind: "component", type: i14.ArlasDrawComponent, selector: "arlas-draw", inputs: ["map", "emptyData", "drawOption", "drawData", "drawButtonEnabled", "drawPolygonVerticesLimit", "preserveDrawingBuffer"], outputs: ["onAoiChanged", "onAoiEdit"] }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }, { kind: "pipe", type: i15.GetValuePipe, name: "getValue" }, { kind: "pipe", type: i16.GetCollectionPipe, name: "getCollection" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasMapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-map', encapsulation: ViewEncapsulation.None, template: "<div id=\"{{id}}\" class=\"map__container\">\n  <div class=\"map__visu-list\" *ngIf=\"visualisationSetsConfig?.length > 0\">\n    <div class=\"map__legend-button\" [matTooltipPosition]=\"'left'\" matTooltip=\"{{'Manage layers' | translate}}\">\n      <mat-icon (click)=\"legendOpen=!legendOpen\" (keyDown)=\"legendOpen=!legendOpen\">layers</mat-icon>\n    </div>\n    <div [hidden]=\"!legendOpen\" class=\"map__visu-list--container\" cdkDropList\n      (cdkDropListDropped)=\"drop($event)\">\n      <div cdkDrag class=\"map__visu-item\" *ngFor=\"let visu of visualisationSetsConfig\">\n        <div cdkDragHandle class=\"map__visu-title\">\n          <span class=\"map__visu-title-text\" [class.map__visu-title-text--disabled]=\"!visu.enabled\">\n            {{visu.name | translate}}</span>\n          <mat-slide-toggle [checked]=\"visu.enabled\" (change)=\"emitVisualisations(visu.name)\"\n            [matTooltip]=\"'show_layers' | translate\" [hideIcon]=\"true\"></mat-slide-toggle>\n        </div>\n        <div class=\"map__visu-content\" cdkDropList (cdkDropListDropped)=\"dropLayer($event, visu.name)\">\n          <div cdkDrag *ngFor=\"let l of visu.layers\" class=\"map__visu-layer\"\n            [class.cdk-visually-hidden]=\"((visu.name + ':arlas_vset:' + l) | getValue:visibilityStatus) !== true\">\n            <div cdkDragHandle class=\"map__visu-layer-drag\">\n              <mat-icon>drag_indicator</mat-icon>\n            </div>\n            <arlas-legend [collection]=\"l | getCollection: mapService.layersMap \" [enabled]=\"visu.enabled\"\n              [layer]=\"l | getValue: mapService.layersMap \" [zoom]=\"map?.zoom\"\n              (visibilityStatus)=\"emitLegendVisibility(visu.name, l, $event)\" [legendUpdater]=\"legendUpdater\"\n              [visibilityUpdater]=\"visibilityUpdater\"\n              (downloadSourceEmitter)=\"downloadLayerSource($event)\"></arlas-legend>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<arlas-coordinates *ngIf=\"displayCurrentCoordinates\" [currentLat]=\"map?.currentLat\" [currentLng]=\"map?.currentLng\"\n  (moveToCoordinates$)=\"moveToCoordinates($event)\"></arlas-coordinates>\n\n<arlas-basemap *ngIf=\"showBasemapList\" [mapSources]=\"mapSources\" [map]=\"map\" (mouseleave)=\"hideBasemapSwitcher()\"\n  (basemapChanged)=\"onChangeBasemapStyle()\"></arlas-basemap>\n\n\n<arlas-draw #drawComponent *ngIf=\"map\" [map]=\"map\" [emptyData]=\"emptyData\" [drawData]=\"drawData\"\n  [drawButtonEnabled]=\"drawButtonEnabled\" [drawOption]=\"drawOption\"\n  [drawPolygonVerticesLimit]=\"drawPolygonVerticesLimit\" [preserveDrawingBuffer]=\"preserveDrawingBuffer\"\n  (onAoiChanged)=\"onAoiChanged.emit($event)\"\n  (onAoiEdit)=\"onAoiEdit.emit($event)\"></arlas-draw>", styles: ["@charset \"UTF-8\";.map__container{width:100%;height:100%;position:absolute!important}.map__visu-list{position:absolute;display:flex;flex-direction:column;top:220px;right:7px;z-index:1;background:transparent;flex-wrap:wrap-reverse}.map__legend-button{cursor:pointer;margin-bottom:4px;border-radius:3px;background-color:#fff;width:30px;height:30px;padding:3px}.map__legend-button:hover{background-color:#f5f5f5}.map__visu-list--container{padding:1px 1px 3px;border-radius:2px;max-height:calc(100vh - 415px);overflow-y:auto;overflow-x:hidden}.map__visu-item{margin:1px;padding:unset;padding-right:3px;width:225px;border:.8px solid #ddd;background:#fff;border-radius:3px}.map__visu-title{display:flex;justify-content:space-between;padding:1px 5px 1px 0;font-weight:550;font-size:14px;cursor:grab;--mdc-switch-track-width: 24px;--mdc-switch-track-height: 5px;--mdc-switch-handle-width: 12px;--mdc-switch-state-layer-size: 0;--mat-switch-selected-handle-horizontal-margin: 0 1px}.map__visu-title:hover .map__visu-toggle .map__visu-drag{visibility:visible}.map__visu-title .mdc-switch__handle{--mat-switch-unselected-handle-size: 12px;--mat-switch-selected-handle-size: 12px;--mat-switch-pressed-handle-size: 12px;--mdc-switch-unselected-handle-color: lightgrey;--mdc-switch-unselected-focus-handle-color: lightgrey;--mdc-switch-unselected-hover-handle-color: lightgrey;--mdc-switch-unselected-pressed-handle-color: lightgrey}.map__visu-title-text{color:#333;padding:3px}.map__visu-title-text--disabled{color:#bbb}.map__visu-content{max-height:300px;overflow-y:auto;overflow-x:hidden}.map__visu-layer{background-color:#fff;position:relative;overflow:hidden}.map__visu-layer-drag{position:absolute;top:5px;left:0;display:flex;padding-left:3px}.map__visu-layer-drag mat-icon{font-size:18px;width:18px;height:18px;color:#999}.map__visu-layer:hover .map__visu-layer-drag{cursor:grab;z-index:2}.map__visu-layer:hover .map__visu-layer-drag mat-icon{color:#444}.draw-tooltip--hide{display:none}.draw-tooltip--show{display:block;position:fixed;overflow:hidden;font-size:.8em;background-color:#fff;border-radius:2px;padding:2px;box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}::-webkit-scrollbar{width:3px!important;height:4px!important;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}.cdk-drag-preview{box-sizing:border-box;font-size:.75em;border-radius:3px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-preview .map__visu-layer .map__visu-layer-drag mat-icon{color:#444}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.draw-control-disabled{display:none}\n"] }]
        }], ctorParameters: () => [{ type: i1.MapboxAoiDrawService }, { type: i2.BasemapService }, { type: i3.TranslateService }, { type: i4.ArlasMapFrameworkService }, { type: i5.AbstractArlasMapService }], propDecorators: { drawComponent: [{
                type: ViewChild,
                args: ['drawComponent', { static: false }]
            }], id: [{
                type: Input
            }], offset: [{
                type: Input
            }], mapLayers: [{
                type: Input
            }], displayScale: [{
                type: Input
            }], maxWidthScale: [{
                type: Input
            }], unitScale: [{
                type: Input
            }], displayCurrentCoordinates: [{
                type: Input
            }], wrapLatLng: [{
                type: Input
            }], defaultBasemapStyle: [{
                type: Input
            }], basemapStyles: [{
                type: Input
            }], initZoom: [{
                type: Input
            }], maxZoom: [{
                type: Input
            }], minZoom: [{
                type: Input
            }], initCenter: [{
                type: Input
            }], boundsToFit: [{
                type: Input
            }], fitBoundsOffSet: [{
                type: Input
            }], fitBoundsPadding: [{
                type: Input
            }], fitBoundsMaxZoom: [{
                type: Input
            }], margePanForLoad: [{
                type: Input
            }], margePanForTest: [{
                type: Input
            }], transformRequest: [{
                type: Input
            }], featureToHightLight: [{
                type: Input
            }], featuresToSelect: [{
                type: Input
            }], mapSources: [{
                type: Input
            }], redrawSource: [{
                type: Input
            }], dataSources: [{
                type: Input
            }], drawOption: [{
                type: Input
            }], drawData: [{
                type: Input
            }], drawButtonEnabled: [{
                type: Input
            }], drawPolygonVerticesLimit: [{
                type: Input
            }], preserveDrawingBuffer: [{
                type: Input
            }], mapAttributionPosition: [{
                type: Input
            }], icons: [{
                type: Input
            }], legendUpdater: [{
                type: Input
            }], visibilityUpdater: [{
                type: Input
            }], visualisationSetsConfig: [{
                type: Input
            }], onMapLoaded: [{
                type: Output
            }], onMapClosed: [{
                type: Output
            }], onMove: [{
                type: Output
            }], visualisations: [{
                type: Output
            }], onFeatureClick: [{
                type: Output
            }], onFeatureHover: [{
                type: Output
            }], onAoiChanged: [{
                type: Output
            }], onAoiEdit: [{
                type: Output
            }], onBasemapChanged: [{
                type: Output
            }], legendVisibiltyStatus: [{
                type: Output
            }], downloadSourceEmitter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,