/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { FormControl, FormGroup, Validators } from '@angular/forms';
// eslint-disable-next-line max-len
export const DECIMAL_SEXAGESIMAL_REGEX = '^(?<decimal>[+-]?([0-9]*[.])?[0-9]+)$|^(?<degrees>(-?)[0-9]+)°[ ]*((?<minutes>[0-9]+)\'[ ]*((?<seconds>[0-9]+)\")?)?$';
export class PointFormGroup extends FormGroup {
    constructor(initLat, initLng) {
        const coordinatesRegex = DECIMAL_SEXAGESIMAL_REGEX;
        const latitude = new FormControl(String(initLat), [
            Validators.required,
            Validators.pattern(coordinatesRegex)
        ]);
        const longitude = new FormControl(String(initLng), [
            Validators.required,
            Validators.pattern(coordinatesRegex),
        ]);
        super({
            latitude,
            longitude
        });
        this.latitude = latitude;
        this.longitude = longitude;
    }
}
export class Coordinate {
    /** Parses a coordinate in decimal or sexagesimal degrees and returns the decimal degrees */
    static parse(value) {
        const coordinatesRegex = DECIMAL_SEXAGESIMAL_REGEX;
        const parsedCoordinates = (String(value)).match(coordinatesRegex);
        if (parsedCoordinates && parsedCoordinates.groups) {
            const groups = parsedCoordinates.groups;
            if (groups.decimal) {
                return +groups.decimal;
            }
            else {
                const degrees = +groups.degrees;
                const minutes = +groups.minutes;
                const seconds = +groups.seconds;
                return this.dmsToDd(degrees, minutes, seconds);
            }
        }
    }
    /** DegreeMinutesSeconds to Decimal degree */
    static dmsToDd(degrees, minutes, seconds) {
        const isNegative = (degrees < 0);
        if (!minutes) {
            minutes = 0;
        }
        if (!seconds) {
            seconds = 0;
        }
        const dd = Math.abs(degrees) + minutes / 60 + seconds / 3600;
        return isNegative ? -dd : dd;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29vcmRpbmF0ZXMudG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1tYXAvc3JjL2xpYi9iYm94LWdlbmVyYXRvci9jb29yZGluYXRlcy50b29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRSxtQ0FBbUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsdUhBQXVILENBQUM7QUFDakssTUFBTSxPQUFPLGNBQWUsU0FBUSxTQUFTO0lBUXpDLFlBQW1CLE9BQXdCLEVBQUUsT0FBd0I7UUFDakUsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztRQUNuRCxNQUFNLFFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDOUMsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztTQUN2QyxDQUFDLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0MsVUFBVSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztTQUN2QyxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUM7WUFDRixRQUFRO1lBQ1IsU0FBUztTQUNaLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxVQUFVO0lBQ3JCLDRGQUE0RjtJQUNyRixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWE7UUFDL0IsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztRQUNuRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFRLENBQUM7UUFDekUsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNsRCxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7WUFDeEMsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ3pCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQ2hDLE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztnQkFDaEMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2dCQUNoQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNqRCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCw2Q0FBNkM7SUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFlLEVBQUUsT0FBZSxFQUFFLE9BQWU7UUFDckUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2IsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNkLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDYixPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQzdELE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQy9CLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBHaXNhw69hIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFLnR4dCBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEdpc2HDr2EgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuZXhwb3J0IGNvbnN0IERFQ0lNQUxfU0VYQUdFU0lNQUxfUkVHRVggPSAnXig/PGRlY2ltYWw+WystXT8oWzAtOV0qWy5dKT9bMC05XSspJHxeKD88ZGVncmVlcz4oLT8pWzAtOV0rKcKwWyBdKigoPzxtaW51dGVzPlswLTldKylcXCdbIF0qKCg/PHNlY29uZHM+WzAtOV0rKVxcXCIpPyk/JCc7XG5leHBvcnQgY2xhc3MgUG9pbnRGb3JtR3JvdXAgZXh0ZW5kcyBGb3JtR3JvdXAge1xuXG4gICAgcHVibGljIGxhdGl0dWRlOiBGb3JtQ29udHJvbDtcbiAgICBwdWJsaWMgbG9uZ2l0dWRlOiBGb3JtQ29udHJvbDtcblxuICAgIHB1YmxpYyBsYXRpdHVkZUNoYW5nZXMkOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHVibGljIGxvbmdpdHVkZXNDaGFuZ2VzJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGluaXRMYXQ6IG51bWJlciB8IHN0cmluZywgaW5pdExuZzogbnVtYmVyIHwgc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzUmVnZXggPSBERUNJTUFMX1NFWEFHRVNJTUFMX1JFR0VYO1xuICAgICAgICBjb25zdCBsYXRpdHVkZSA9IG5ldyBGb3JtQ29udHJvbChTdHJpbmcoaW5pdExhdCksIFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnBhdHRlcm4oY29vcmRpbmF0ZXNSZWdleClcbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGxvbmdpdHVkZSA9IG5ldyBGb3JtQ29udHJvbChTdHJpbmcoaW5pdExuZyksIFtcbiAgICAgICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgICAgICBWYWxpZGF0b3JzLnBhdHRlcm4oY29vcmRpbmF0ZXNSZWdleCksXG4gICAgICAgIF0pO1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBsYXRpdHVkZSxcbiAgICAgICAgICAgIGxvbmdpdHVkZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYXRpdHVkZSA9IGxhdGl0dWRlO1xuICAgICAgICB0aGlzLmxvbmdpdHVkZSA9IGxvbmdpdHVkZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb29yZGluYXRlIHtcbiAgLyoqIFBhcnNlcyBhIGNvb3JkaW5hdGUgaW4gZGVjaW1hbCBvciBzZXhhZ2VzaW1hbCBkZWdyZWVzIGFuZCByZXR1cm5zIHRoZSBkZWNpbWFsIGRlZ3JlZXMgKi9cbiAgcHVibGljIHN0YXRpYyBwYXJzZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29vcmRpbmF0ZXNSZWdleCA9IERFQ0lNQUxfU0VYQUdFU0lNQUxfUkVHRVg7XG4gICAgY29uc3QgcGFyc2VkQ29vcmRpbmF0ZXMgPSAoU3RyaW5nKHZhbHVlKSkubWF0Y2goY29vcmRpbmF0ZXNSZWdleCkgYXMgYW55O1xuICAgIGlmIChwYXJzZWRDb29yZGluYXRlcyAmJiBwYXJzZWRDb29yZGluYXRlcy5ncm91cHMpIHtcbiAgICAgIGNvbnN0IGdyb3VwcyA9IHBhcnNlZENvb3JkaW5hdGVzLmdyb3VwcztcbiAgICAgIGlmIChncm91cHMuZGVjaW1hbCkge1xuICAgICAgICByZXR1cm4gK2dyb3Vwcy5kZWNpbWFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZGVncmVlcyA9ICtncm91cHMuZGVncmVlcztcbiAgICAgICAgY29uc3QgbWludXRlcyA9ICtncm91cHMubWludXRlcztcbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9ICtncm91cHMuc2Vjb25kcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZG1zVG9EZChkZWdyZWVzLCBtaW51dGVzLCBzZWNvbmRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogRGVncmVlTWludXRlc1NlY29uZHMgdG8gRGVjaW1hbCBkZWdyZWUgKi9cbiAgcHVibGljIHN0YXRpYyBkbXNUb0RkKGRlZ3JlZXM6IG51bWJlciwgbWludXRlczogbnVtYmVyLCBzZWNvbmRzOiBudW1iZXIpIHtcbiAgICBjb25zdCBpc05lZ2F0aXZlID0gKGRlZ3JlZXMgPCAwKTtcbiAgICBpZiAoIW1pbnV0ZXMpIHtcbiAgICAgIG1pbnV0ZXMgPSAwO1xuICAgIH1cbiAgICBpZiAoIXNlY29uZHMpIHtcbiAgICAgIHNlY29uZHMgPSAwO1xuICAgIH1cbiAgICBjb25zdCBkZCA9IE1hdGguYWJzKGRlZ3JlZXMpICsgbWludXRlcyAvIDYwICsgc2Vjb25kcyAvIDM2MDA7XG4gICAgcmV0dXJuIGlzTmVnYXRpdmUgPyAtZGQgOiBkZDtcbiAgfVxufVxuIl19