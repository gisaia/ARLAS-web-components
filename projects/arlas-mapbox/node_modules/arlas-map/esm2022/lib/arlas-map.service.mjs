/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Injectable } from '@angular/core';
import { ArlasMapFrameworkService } from './arlas-map-framework.service';
import { ExternalEvent } from './map/model/layers';
import * as i0 from "@angular/core";
import * as i1 from "./arlas-map-framework.service";
/**
 * This service propose a set of method to execute the ArlasMapComponent logic.
 * Do not confuse with ArlasMapFrameworkService that is more dedicated to a framework logic.
 */
/** L: a layer class/interface.
 *  S: a source class/interface.
 *  M: a Map configuration class/interface.
 */
export class AbstractArlasMapService {
    constructor(mapFrameworkService) {
        this.mapFrameworkService = mapFrameworkService;
        /** @description List of arlas data sources declared in configuration */
        this.dataSources = [];
        /**
         * @description Object to describe visualisation sets
         * - visulisations: a map of <visualisation name, set of layers identifiers>;
         * - status: a map of <visualisation name, visibility status>
         */
        this.visualisationsSets = {
            visualisations: new Map(),
            status: new Map()
        };
    }
    updateLabelSources(labelSourceId, data, map) {
        if (labelSourceId) {
            const source = this.mapFrameworkService.getSource(labelSourceId, map);
            this.mapFrameworkService.setDataToGeojsonSource(source, data);
        }
    }
    /**
     * @description Inits a map of visulisation sets from the configuration.
     * @param visualisationSetsConfig Visualisation set configuration.
     */
    initVisualisationSet(visualisationSetsConfig) {
        if (visualisationSetsConfig) {
            visualisationSetsConfig.forEach(visu => {
                this.visualisationsSets.visualisations.set(visu.name, new Set(visu.layers));
                this.visualisationsSets.status.set(visu.name, visu.enabled);
            });
        }
    }
    initMapLayers(mapLayers, map) {
        if (mapLayers) {
            this.setLayersMap(mapLayers);
        }
    }
    addArlasDataLayers(visualisationSetsConfig, mapLayers, map) {
        this.initMapLayers(mapLayers, map);
        this.initVisualisationSet(visualisationSetsConfig);
        for (let i = visualisationSetsConfig.length - 1; i >= 0; i--) {
            const visualisation = visualisationSetsConfig[i];
            if (visualisation.layers) {
                for (let j = visualisation.layers.length - 1; j >= 0; j--) {
                    const l = visualisation.layers[j];
                    const layer = this.layersMap.get(l);
                    this.addArlasDataLayer(map, layer, this.layersMap);
                }
            }
        }
        this._addExternalEventLayers(mapLayers, map);
        this.visualisationsSets.status.forEach((visible, vs) => {
            this.visualisationsSets.visualisations.get(vs).forEach(l => {
                this.mapFrameworkService.setLayerVisibility(l, visible, map);
            });
        });
        this.reorderLayers(visualisationSetsConfig, map);
    }
    _addExternalEventLayers(mapLayers, map) {
        if (mapLayers.externalEventLayers) {
            mapLayers.layers
                .filter(layer => mapLayers.externalEventLayers.map(e => e.id).indexOf(layer.id) >= 0)
                .forEach(l => {
                this.mapFrameworkService.addLayer(map, l);
            });
        }
    }
    reorderLayers(visualisationSetsConfig, map) {
        // parses the visulisation list from bottom in order to put the fist ones first
        for (let i = visualisationSetsConfig.length - 1; i >= 0; i--) {
            const visualisation = visualisationSetsConfig[i];
            if (!!visualisation.layers && visualisation.enabled) {
                for (let j = visualisation.layers.length - 1; j >= 0; j--) {
                    const l = visualisation.layers[j];
                    this.moveArlasDataLayer(map, l, this.layersMap);
                }
            }
        }
        this.reorderDrawLayers(map);
    }
    selectFeatures(mapLayers, map, elementToSelect) {
        if (elementToSelect) {
            const ids = elementToSelect.length > 0 ?
                elementToSelect.reduce((memo, element) => {
                    memo.push(element.idValue);
                    return memo;
                }, []) : [];
            const numericalIds = ids.filter(id => !isNaN(+id)).map(id => +id);
            const visibilityFilter = ids.length > 0 ? ['in', ['get', elementToSelect[0].idFieldName], ['literal', ids.concat(numericalIds)]] : [];
            this.filterLayers(mapLayers, map, (elementToSelect.length > 0), visibilityFilter, ExternalEvent.select);
        }
    }
    highlightFeature(mapLayers, map, featureToHightLight) {
        if (featureToHightLight?.elementidentifier) {
            const ids = [featureToHightLight.elementidentifier.idValue];
            if (!isNaN(+featureToHightLight.elementidentifier.idValue)) {
                ids.push(+featureToHightLight.elementidentifier.idValue);
            }
            const visibilityFilter = ['in', ['get', featureToHightLight.elementidentifier.idFieldName],
                ['literal', ids]];
            this.filterLayers(mapLayers, map, !featureToHightLight.isleaving, visibilityFilter, ExternalEvent.hover);
        }
    }
    selectFeaturesByCollection(mapLayers, map, features, collection) {
        const ids = features.map(f => f.idValue);
        const numericalIds = ids.filter(id => !isNaN(+id)).map(id => +id);
        const visibilityFilter = ids.length > 0 ? ['in', ['get', features[0].idFieldName], ['literal', ids.concat(numericalIds)]] : [];
        this.filterLayers(mapLayers, map, (features.length > 0), visibilityFilter, ExternalEvent.select, collection);
    }
    updateLayoutVisibility(visualisationName, visualisationSetsConfig, map) {
        const visuStatus = !this.visualisationsSets.status.get(visualisationName);
        visualisationSetsConfig.find(v => v.name === visualisationName).enabled = visuStatus;
        if (!visuStatus) {
            const layersSet = new Set(this.visualisationsSets.visualisations.get(visualisationName));
            this.visualisationsSets.visualisations.forEach((ls, v) => {
                if (v !== visualisationName) {
                    ls.forEach(ll => {
                        if (layersSet?.has(ll)) {
                            layersSet.delete(ll);
                        }
                    });
                }
            });
            layersSet.forEach(ll => {
                this.mapFrameworkService.setLayerVisibility(ll, false, map);
            });
        }
        this.visualisationsSets.status.set(visualisationName, visuStatus);
        const layers = new Set();
        this.visualisationsSets.visualisations.forEach((ls, v) => {
            if (this.visualisationsSets.status.get(v)) {
                ls.forEach(l => {
                    layers.add(l);
                    this.mapFrameworkService.setLayerVisibility(l, true, map);
                });
            }
        });
        return layers;
    }
    updateVisibility(visibilityStatus, visualisationSetsConfig, map) {
        visibilityStatus.forEach((visibilityStatus, l) => {
            let layerInVisualisations = false;
            if (!visibilityStatus) {
                visualisationSetsConfig.forEach(v => {
                    const ls = new Set(v.layers);
                    if (!layerInVisualisations) {
                        layerInVisualisations = ls.has(l);
                    }
                });
                if (layerInVisualisations) {
                    this.mapFrameworkService.setLayerVisibility(l, false, map);
                }
            }
            else {
                let oneVisualisationEnabled = false;
                visualisationSetsConfig.forEach(v => {
                    const ls = new Set(v.layers);
                    if (!layerInVisualisations) {
                        layerInVisualisations = ls.has(l);
                    }
                    if (ls.has(l) && v.enabled) {
                        oneVisualisationEnabled = true;
                        this.mapFrameworkService.setLayerVisibility(l, true, map);
                    }
                });
                if (!oneVisualisationEnabled && layerInVisualisations) {
                    this.mapFrameworkService.setLayerVisibility(l, false, map);
                }
            }
        });
    }
    findVisualisationSetLayer(visuName, visualisationSetsConfig) {
        return visualisationSetsConfig.find(v => v.name === visuName).layers;
    }
    setVisualisationSetLayers(visuName, layers, visualisationSetsConfig) {
        const f = visualisationSetsConfig.find(v => v.name === visuName);
        if (f) {
            f.layers = layers;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AbstractArlasMapService, deps: [{ token: i1.ArlasMapFrameworkService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AbstractArlasMapService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AbstractArlasMapService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.ArlasMapFrameworkService }] });
//# sourceMappingURL=data:application/json;base64,