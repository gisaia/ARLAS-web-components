/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
export var ExternalEvent;
(function (ExternalEvent) {
    ExternalEvent["select"] = "select";
    ExternalEvent["hover"] = "hover";
})(ExternalEvent || (ExternalEvent = {}));
export const HOVER_LAYER_PREFIX = 'arlas-hover-';
export const SELECT_LAYER_PREFIX = 'arlas-select-';
export const FILLSTROKE_LAYER_PREFIX = 'arlas-fill_stroke-';
export const SCROLLABLE_ARLAS_ID = 'scrollable_arlas_id:';
export const ARLAS_ID = 'arlas_id:';
export const ARLAS_VSET = ':arlas_vset:';
/** FROM V15.0.0 layer ids look like 'arlas_id:NAME:timestamp
   * This pipe extracts the 'NAME' in that id
   */
export function getLayerName(id) {
    if (!!id && id.startsWith(ARLAS_ID)) {
        const datedName = id.split(ARLAS_ID)[1];
        const undatedName = datedName.split(':')[0];
        return undatedName;
    }
    return id;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYXJsYXMtbWFwL3NyYy9saWIvbWFwL21vZGVsL2xheWVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUErQkgsTUFBTSxDQUFOLElBQVksYUFHWDtBQUhELFdBQVksYUFBYTtJQUN2QixrQ0FBaUIsQ0FBQTtJQUNqQixnQ0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFIVyxhQUFhLEtBQWIsYUFBYSxRQUd4QjtBQW1DRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxjQUFjLENBQUM7QUFDakQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsZUFBZSxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLG9CQUFvQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLHNCQUFzQixDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQztBQUV6Qzs7S0FFSztBQUNMLE1BQU0sVUFBVSxZQUFZLENBQUMsRUFBVTtJQUNyQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXJsYXNEYXRhTGF5ZXIge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG4gIG1pbnpvb20/OiBudW1iZXI7XG4gIG1heHpvb20/OiBudW1iZXI7XG4gIHNvdXJjZT86IHN0cmluZztcbiAgbWV0YWRhdGE/OiBMYXllck1ldGFkYXRhO1xuICBwYWludDogQXJsYXNQYWludDtcbiAgbGF5b3V0PzogYW55O1xuICBmaWx0ZXI/OiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwTGF5ZXJzPFQ+IHtcbiAgbGF5ZXJzOiBBcnJheTxUPjtcbiAgZXh0ZXJuYWxFdmVudExheWVycz86IEFycmF5PEV4dGVybmFsRXZlbnRMYXllcj47XG4gIGV2ZW50czogTGF5ZXJFdmVudHM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF5ZXJFdmVudHMge1xuICBvbkhvdmVyOiBTZXQ8c3RyaW5nPjtcbiAgZW1pdE9uQ2xpY2s6IFNldDxzdHJpbmc+O1xuICB6b29tT25DbGljazogU2V0PHN0cmluZz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZXJuYWxFdmVudExheWVyIHtcbiAgaWQ6IHN0cmluZztcbiAgb246IEV4dGVybmFsRXZlbnQ7XG59XG5cbmV4cG9ydCBlbnVtIEV4dGVybmFsRXZlbnQge1xuICBzZWxlY3QgPSAnc2VsZWN0JyxcbiAgaG92ZXIgPSAnaG92ZXInXG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaWxsU3Ryb2tlIHtcbiAgd2lkdGg/OiBQYWludFZhbHVlO1xuICBvcGFjaXR5PzogbnVtYmVyO1xuICBjb2xvcj86IFBhaW50VmFsdWU7XG59XG5cbi8qKiBNZXRhZGF0YSBvZiBhIGxheWVyIGNvbnRhaW5pbmcgaW5mbyBhYm91dFxuICogLSB0aGUgY29sbGVjdGlvblxuICogLSB3aGV0aGVyIGl0IGhhcyBhbiBpbnRlcmFjdGlvbiB3aXRoIHRoZSByZXN1bHRsaXN0IChzY3JvbGxhYmxlKVxuICogLSBnZW9tVHlwZSBmb3IgY2lyY2xlIGhlYXRtYXAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGF5ZXJNZXRhZGF0YSB7XG4gIGNvbGxlY3Rpb24/OiBzdHJpbmc7XG4gIGNvbGxlY3Rpb25EaXNwbGF5TmFtZT86IHN0cmluZztcbiAgc3Ryb2tlPzogRmlsbFN0cm9rZTtcbiAgaXNTY3JvbGxhYmxlTGF5ZXI/OiBib29sZWFuO1xuICBoaWRkZW5Qcm9wcz86IE1ldGFkYXRhSGlkZGVuUHJvcHM7XG4gIHNob3dMZWdlbmQ/OiBib29sZWFuO1xufVxuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YUhpZGRlblByb3BzIHtcbiAgZ2VvbVR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFBhaW50VmFsdWUgPSBBcnJheTxzdHJpbmcgfCBBcnJheTxzdHJpbmc+IHwgbnVtYmVyPiB8IFBhaW50Q29sb3IgfCBzdHJpbmcgfCBudW1iZXI7XG5leHBvcnQgaW50ZXJmYWNlIEFybGFzUGFpbnQgeyBba2V5OiBzdHJpbmddOiBQYWludFZhbHVlOyB9XG5leHBvcnQgaW50ZXJmYWNlIFBhaW50Q29sb3Ige1xuICBwcm9wZXJ0eTogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG4gIHN0b3BzOiBBcnJheTxBcnJheTxzdHJpbmc+Pjtcbn1cblxuXG5leHBvcnQgY29uc3QgSE9WRVJfTEFZRVJfUFJFRklYID0gJ2FybGFzLWhvdmVyLSc7XG5leHBvcnQgY29uc3QgU0VMRUNUX0xBWUVSX1BSRUZJWCA9ICdhcmxhcy1zZWxlY3QtJztcbmV4cG9ydCBjb25zdCBGSUxMU1RST0tFX0xBWUVSX1BSRUZJWCA9ICdhcmxhcy1maWxsX3N0cm9rZS0nO1xuZXhwb3J0IGNvbnN0IFNDUk9MTEFCTEVfQVJMQVNfSUQgPSAnc2Nyb2xsYWJsZV9hcmxhc19pZDonO1xuZXhwb3J0IGNvbnN0IEFSTEFTX0lEID0gJ2FybGFzX2lkOic7XG5leHBvcnQgY29uc3QgQVJMQVNfVlNFVCA9ICc6YXJsYXNfdnNldDonO1xuXG4vKiogRlJPTSBWMTUuMC4wIGxheWVyIGlkcyBsb29rIGxpa2UgJ2FybGFzX2lkOk5BTUU6dGltZXN0YW1wXG4gICAqIFRoaXMgcGlwZSBleHRyYWN0cyB0aGUgJ05BTUUnIGluIHRoYXQgaWRcbiAgICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGF5ZXJOYW1lKGlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoISFpZCAmJiBpZC5zdGFydHNXaXRoKEFSTEFTX0lEKSkge1xuICAgIGNvbnN0IGRhdGVkTmFtZSA9IGlkLnNwbGl0KEFSTEFTX0lEKVsxXTtcbiAgICBjb25zdCB1bmRhdGVkTmFtZSA9IGRhdGVkTmFtZS5zcGxpdCgnOicpWzBdO1xuICAgIHJldHVybiB1bmRhdGVkTmFtZTtcbiAgfVxuICByZXR1cm4gaWQ7XG59XG4iXX0=