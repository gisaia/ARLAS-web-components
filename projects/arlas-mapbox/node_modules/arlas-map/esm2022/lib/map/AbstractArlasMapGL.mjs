/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { fromEvent, map } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { ArlasLngLat, ArlasLngLatBounds } from './model/map';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import bbox from '@turf/bbox';
export const GEOJSON_SOURCE_TYPE = 'geojson';
export const CROSS_LAYER_PREFIX = 'arlas_cross';
export const ZOOM_IN = marker('Zoom in');
export const ZOOM_OUT = marker('Zoom out');
export const RESET_BEARING = marker('Reset bearing to north');
export const LAYER_SWITCHER_TOOLTIP = marker('Manage layers');
/**
 * The aim of this class is to handle all core interaction we have
 * with a map provider.
 * The aim is also to separate the Arlas map from the Angular framework.
 * It will be instantiated in the map.component and will be responsible for initializing the map and all map behavior.
 */
export class AbstractArlasMapGL {
    constructor(config) {
        this.config = config;
        this.POLYGON_LABEL_SOURCE = 'polygon_label';
        this._eventSubscription = [];
        this.evented = new EventTarget();
        this.config = config;
        this._offset = config.offset;
        this._margePanForLoad = config.margePanForLoad;
        this._margePanForTest = config.margePanForTest;
        this._displayCurrentCoordinates = config.displayCurrentCoordinates ?? false;
        this._wrapLatLng = config.wrapLatLng ?? true;
        this._controls = config.controls;
        this._fitBoundsPadding = config.fitBoundsPadding ?? 10;
        this._maxWidthScale = config.maxWidthScale;
        this._unitScale = config.unitScale;
        this.init(config);
    }
    init(config) {
        try {
            this._initMapProvider(config);
            this._initControls();
            this._initOnLoad();
            this._initMapMoveEvents();
        }
        catch (e) {
            console.log(e);
        }
    }
    _initOnLoad() {
        this.onLoad(() => {
            this.evented.dispatchEvent(new Event('beforeOnLoadInit'));
            this._updateBounds();
            this._updateZoom();
            this.getMapProvider().fitBounds(this.getBounds());
        });
    }
    onCustomEvent(event, loadFn) {
        this.evented.addEventListener(event, loadFn);
    }
    _initMapMoveEvents() {
        this._zoomStart$ = fromEvent(this.getMapProvider(), 'zoomstart')
            .pipe(debounceTime(750));
        this._dragStart$ = fromEvent(this.getMapProvider(), 'dragstart')
            .pipe(debounceTime(750));
        this._dragEnd$ = fromEvent(this.getMapProvider(), 'dragend')
            .pipe(debounceTime(750));
        this._moveEnd$ = fromEvent(this.getMapProvider(), 'moveend')
            .pipe(debounceTime(750));
        this._updateOnZoomStart();
        this._updateOnDragStart();
        this._updateOnDragEnd();
        this._updateOnMoveEnd();
    }
    _updateBounds() {
        this._west = this.getWestBounds();
        this._south = this.getSouthBounds();
        this._east = this.getEastBounds();
        this._north = this.getNorthBounds();
    }
    _updateZoom(e) {
        this.zoom = this.getZoom();
    }
    _updateCurrentLngLat(e) {
        const lngLat = e.lngLat;
        if (this._displayCurrentCoordinates) {
            const displayedLngLat = this._wrapLatLng ? lngLat.wrap() : lngLat;
            this.currentLng = String(Math.round(displayedLngLat.lng * 100000) / 100000);
            this.currentLat = String(Math.round(displayedLngLat.lat * 100000) / 100000);
        }
    }
    _updateDragEnd(e) {
        if (e.originalEvent) {
            this._dragEndX = e.originalEvent.clientX;
            this._dragEndY = e.originalEvent.clientY;
        }
    }
    _updateDragStart(e) {
        this._dragStartX = e.originalEvent.clientX;
        this._dragStartY = e.originalEvent.clientY;
    }
    _updateEndLngLat(e) {
        this.endLngLat = e.lngLat;
    }
    _updateMoveRatio(e) {
        this._xMoveRatio = Math.abs(this._dragEndX - this._dragStartX) / e.target._canvas.clientWidth;
        this._yMoveRatio = Math.abs(this._dragEndY - this._dragStartY) / e.target._canvas.clientHeight;
    }
    _updateStartLngLat(e) {
        this.startLngLat = e.lngLat;
    }
    _updateZoomStart() {
        this._zoomStart = this.getZoom();
    }
    _updateOnZoomStart() {
        const sub = this._zoomStart$.subscribe(_ => this._updateZoomStart());
        this._eventSubscription.push(sub);
    }
    _updateOnDragStart() {
        const sub = this._dragStart$.subscribe(e => this._updateDragStart(e));
        this._eventSubscription.push(sub);
    }
    _updateOnDragEnd() {
        const sub = this._dragEnd$
            .subscribe(e => {
            this._updateDragEnd(e);
            this._updateMoveRatio(e);
        });
        this._eventSubscription.push(sub);
    }
    _updateOnMoveEnd() {
        const sub = this._moveEnd$
            .subscribe(_ => {
            this._updateBounds();
            this._updateZoom();
        });
        this._eventSubscription.push(sub);
    }
    onMoveEnd(visualisationsSets, cb) {
        return this._moveEnd$
            .pipe(map(_ => {
            this._updateBounds();
            this._updateZoom();
            if (cb) {
                cb();
            }
            return this._getMoveEnd(visualisationsSets);
        }));
    }
    setLayoutProperty(layer, name, value, options) {
        this.getMapProvider().setLayoutProperty(layer, name, value, options);
        return this;
    }
    unsubscribeEvents() {
        this._eventSubscription.forEach(s => s.unsubscribe());
    }
    getMaxZoom() {
        return this.getMapProvider().getMaxZoom();
    }
    getMinZoom() {
        return this.getMapProvider().getMinZoom();
    }
    getPitch() {
        return this.getMapProvider().getPitch();
    }
    /** Gets bounds of the given geometry */
    geometryToBounds(geometry, paddingPercentage) {
        const boundingBox = bbox(geometry);
        let west = boundingBox[0];
        let south = boundingBox[1];
        let east = boundingBox[2];
        let north = boundingBox[3];
        if (paddingPercentage !== undefined) {
            let width = east - west;
            let height = north - south;
            /** if there is one hit, then west=east ===> we consider a width of 0.05°*/
            if (width === 0) {
                width = 0.05;
            }
            /** if there is one hit, then north=south ===> we consider a height of 0.05°*/
            if (height === 0) {
                height = 0.05;
            }
            west = west - paddingPercentage * width;
            south = Math.max(-90, south - paddingPercentage * height);
            east = east + paddingPercentage * width;
            north = Math.min(90, north + paddingPercentage * height);
        }
        const bounds = new ArlasLngLatBounds(new ArlasLngLat(west, south), new ArlasLngLat(east, north));
        return bounds;
    }
}
//# sourceMappingURL=data:application/json;base64,