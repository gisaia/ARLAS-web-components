/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Injectable } from '@angular/core';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import area from '@turf/area';
import bbox from '@turf/bbox';
import { lineString } from '@turf/helpers';
import length from '@turf/length';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class MapboxAoiDrawService {
    constructor() {
        this.ids = new Set();
        this.editAoiSource = new Subject();
        this.editAoi$ = this.editAoiSource.asObservable();
        this.drawBboxSource = new Subject();
        this.drawBbox$ = this.drawBboxSource.asObservable();
        /** Set to true when the user is drawing a bbox. */
        this.isDrawingBbox = false;
        /** Set to true when the user is drawing a circle. */
        this.isDrawingCircle = false;
        /** Set to true when the user is drawing a strip. */
        this.isDrawingStrip = false;
        /** Set to true when the user is drawing a polygon. */
        this.isDrawingPolygon = false;
        /** Set to true when the user is in simple draw mode. */
        this.isInSimpleDrawMode = false;
        /** Set to true when the drawn geometry is selected. */
        this.isDrawSelected = false;
        this.isReady = false;
    }
    isDrawing() {
        return this.isDrawingBbox || this.isDrawingCircle || this.isDrawingPolygon || this.isDrawingStrip;
    }
    drawBbox(fCorner, sCorner) {
        const west = Math.min(fCorner.lng, sCorner.lng);
        const east = Math.max(fCorner.lng, sCorner.lng);
        const south = Math.min(fCorner.lat, sCorner.lat);
        const north = Math.max(fCorner.lat, sCorner.lat);
        this.drawBboxSource.next({
            west,
            east,
            south,
            north
        });
    }
    setDraw(mapboxDraw) {
        this.mapDraw = mapboxDraw;
        this.isReady = true;
        this.onSelectionChange();
        this.onRender();
        this.onDelete();
        this.onStop();
    }
    /**
     * Add new features to the mapboxdraw object.
     * @param fc Featurecollection to be added to mapboxdraw object.
     * @param deleteOld if true, the mapboxdraw object is purged first, before adding the new given feature collection.
     */
    addFeatures(fc, deleteOld = false) {
        if (deleteOld) {
            this.mapDraw.deleteAll();
        }
        this.registeringMode = true;
        this.mapDraw.add(fc);
    }
    /** Deletes all the features from Mapboxdraw object */
    deleteAll() {
        this.registeringMode = true;
        this.mapDraw.deleteAll();
    }
    /** Deletes all the features from Mapboxdraw object that have not been saved */
    deleteUnregisteredFeatures() {
        this.mapDraw.delete(this.getUnregistredFeatures().map(f => f.id.toString()));
    }
    /** Returns the area of the given feature */
    calculateArea(feature) {
        if (this.isArea(feature)) {
            return area(feature);
        }
        return 0;
    }
    /** Returns the width x height of the given feature's envelope */
    calculateEnvelopeDimension(feature) {
        if (this.isLine(feature)) {
            const [minX, minY, maxX, maxY] = bbox(feature);
            const verticalLine = lineString([[minX, minY], [minX, maxY]]);
            const horizontalLine = lineString([[minX, minY], [maxX, minY]]);
            return [length(horizontalLine), length(verticalLine)];
        }
        return [0, 0];
    }
    /** on selection of a drawn polygon, we get its corresponding id. */
    onSelectionChange() {
        this.mapDraw.on('draw.selectionchange', (e) => {
            const features = e.features;
            if (this.hasFeatures(features)) {
                this.editionId = features[0].id;
            }
            else {
                this.endDimensionsEmission();
            }
        });
    }
    hasFeatures(features) {
        return !!features && features.length > 0;
    }
    /** Triggered on deletion of feature(s).
     * - Removes the deleted feature(s) from this service's register.
     * - Stops emitting Aoi dimension info.
     * */
    onDelete() {
        this.mapDraw.on('draw.delete', (e) => {
            e.features.forEach(f => this.unregister(f.id));
            this.endDimensionsEmission();
        });
    }
    onStop() {
        this.mapDraw.on('draw.onStop', (e) => {
            this.register(this.editionId);
            this.endDimensionsEmission();
        });
    }
    /**
     * This event is triggered :
     * - after draw.update
     * - after draw.delete
     * - on adding/deleting features from mapboxdraw object.
     */
    onRender() {
        this.mapDraw.on('draw.render', (e) => {
            if (this.mapDraw) {
                this.registerAll();
                const unregisteredFeatures = this.getUnregistredFeatures();
                if (unregisteredFeatures && (unregisteredFeatures.length === 1 || unregisteredFeatures.length === 2)) {
                    const index = unregisteredFeatures.length - 1;
                    this.editionId = unregisteredFeatures[index].id + '';
                }
                if (this.editionId) {
                    const feature = this.getFeature(this.editionId, this.mapDraw);
                    this.emitDimensions(feature);
                }
            }
        });
    }
    emitStartBBox() {
        this.editAoiSource.next({
            area: 0,
            areaMessage: marker('Start draging to draw a bbox.'),
            envelope: {
                width: 0,
                height: 0
            },
            show: true
        });
    }
    /** Emits dimension info of the given feature.*/
    emitDimensions(feature) {
        const a = this.calculateArea(feature);
        const wh = this.calculateEnvelopeDimension(feature);
        this.editAoiSource.next({
            area: a,
            areaMessage: a > 0 ? '' : marker('Draw at least 2 points.'),
            envelope: {
                width: wh[0],
                height: wh[1]
            },
            show: true
        });
    }
    /** Stops emitting Aoi dimension info */
    endDimensionsEmission() {
        this.editionId = undefined;
        this.editAoiSource.next({
            area: 0,
            envelope: {
                width: 0,
                height: 0
            },
            show: false
        });
    }
    /** Mapbox lacks a method to get the identifier of a new feature that is being drawn and not yet created
     * this method detects this feature on 'draw.render' event.
    */
    getUnregistredFeatures() {
        return this.mapDraw.getAllFeatures().filter(f => !this.ids.has(f.id.toString()));
    }
    /** registers the identifiers of each drawn polygon in this service. */
    registerAll() {
        if (this.registeringMode) {
            this.ids.clear();
            const fc = this.mapDraw.getAll();
            if (!!fc && !!fc.features) {
                this.ids = new Set(fc.features.map(f => f.id.toString()));
            }
            this.registeringMode = false;
        }
    }
    /** Unregisters the given feature id in this service. */
    unregister(id) {
        this.ids.delete(id);
    }
    /** Registers the given feature id in this service. */
    register(id) {
        this.ids.add(id);
    }
    /** Gets the given feature from MapboxDraw object. */
    getFeature(featureId, mapDraw) {
        return mapDraw.get(featureId);
    }
    /** Checks if the given feature has enough coordinates to represent an area (polygon) */
    isArea(feature) {
        const isGeometryDefined = !!feature && !!feature.geometry;
        const areCoordinatesDefined = isGeometryDefined && !!feature.geometry.coordinates;
        if (areCoordinatesDefined) {
            const coordinates = feature.geometry.coordinates;
            const isArea = coordinates.length === 1 && coordinates[0].length > 3;
            return isArea;
        }
        return false;
    }
    /** Checks if the given feature has enough coordinates to represent a line */
    isLine(feature) {
        const isGeometryDefined = !!feature && !!feature.geometry;
        const areCoordinatesDefined = isGeometryDefined && !!feature.geometry.coordinates;
        if (areCoordinatesDefined) {
            const coordinates = feature.geometry.coordinates;
            const isLine = coordinates.length === 1 && coordinates[0].length > 1;
            return isLine;
        }
        return false;
    }
    /**
     * Chck if its a valid circle
     * @param feature
     */
    isValidCircle(feature) {
        const coordinates = feature.geometry.coordinates;
        return this.isCircle(feature) && coordinates && coordinates[0] !== null && coordinates[0][0] !== null && feature.properties.center;
    }
    isValidPolygon(feature) {
        const coordinates = feature.geometry.coordinates;
        return this.isPolygon(feature) && coordinates && coordinates[0] !== null && coordinates[0][0] !== null;
    }
    isPolygon(feature) {
        return feature.geometry.type === 'Polygon' && !this.isCircle(feature);
    }
    isCircle(feature) {
        return feature.properties?.isCircle;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapboxAoiDrawService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapboxAoiDrawService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MapboxAoiDrawService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,