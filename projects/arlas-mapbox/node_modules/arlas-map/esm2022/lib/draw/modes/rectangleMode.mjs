/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import MapboxDraw from '@mapbox/mapbox-gl-draw';
// Inspired by https://github.com/thegisdev/mapbox-gl-draw-rectangle-mode/tree/master
export const rectangleMode = {};
rectangleMode.onSetup = function () {
    const rectangle = this.newFeature({
        type: MapboxDraw.constants.geojsonTypes.FEATURE,
        properties: {
            source: 'bbox'
        },
        geometry: {
            type: MapboxDraw.constants.geojsonTypes.POLYGON,
            coordinates: [[]]
        }
    });
    this.addFeature(rectangle);
    this.clearSelectedFeatures();
    MapboxDraw.lib.doubleClickZoom.disable(this);
    this.updateUIClasses({ mouse: MapboxDraw.constants.cursors.ADD });
    this.activateUIButton(MapboxDraw.constants.types.POLYGON);
    this.setActionableState({
        trash: true
    });
    return {
        rectangle,
        currentVertexPosition: 0,
        start: []
    };
};
rectangleMode.onClick = function (state, e) {
    if (state.currentVertexPosition === 1
        && state.start[0] !== e.lngLat.lng
        && state.start[1] !== e.lngLat.lat) {
        this.updateUIClasses({ mouse: MapboxDraw.constants.cursors.NONE });
        return this.changeMode('simple_select', { featuresId: state.rectangle.id });
    }
    state.start = [e.lngLat.lng, e.lngLat.lat];
    state.currentVertexPosition++;
};
rectangleMode.onMouseMove = function (state, e) {
    if (state.start?.length > 0) {
        const start = state.start;
        // The bbox needs to be oriented in a certain way to match the parsing in the contributors
        const west = Math.min(start[0], e.lngLat.lng);
        const north = Math.max(start[1], e.lngLat.lat);
        const east = Math.max(start[0], e.lngLat.lng);
        const south = Math.min(start[1], e.lngLat.lat);
        state.rectangle.updateCoordinate('0.0', east, south);
        state.rectangle.updateCoordinate('0.1', east, north);
        state.rectangle.updateCoordinate('0.2', west, north);
        state.rectangle.updateCoordinate('0.3', west, south);
    }
};
rectangleMode.toDisplayFeatures = function (state, geojson, display) {
    const isActivePolygon = geojson.properties.id === state.rectangle.id;
    geojson.properties.active = isActivePolygon ? 'true' : 'false';
    if (!isActivePolygon) {
        return display(geojson);
    }
    // Only render the rectangular polygon if it has the starting point
    if (state.start.length === 0) {
        return;
    }
    return display(geojson);
};
rectangleMode.fireOnStop = function () {
    this.map.fire('draw.onStop', 'draw end');
};
rectangleMode.onStop = function (state) {
    MapboxDraw.lib.doubleClickZoom.enable(this);
    this.activateUIButton();
    // check to see if we've deleted this feature
    if (this.getFeature(state.rectangle.id) === undefined) {
        return;
    }
    // remove last added coordinate
    state.rectangle.removeCoordinate('0.4');
    if (state.rectangle.isValid()) {
        this.map.fire('draw.create', {
            features: [state.rectangle.toGeoJSON()],
        });
    }
    else {
        this.deleteFeature([state.rectangle.id], { silent: true });
        this.changeMode('simple_select', { featureIds: [state.rectangle.id] }, { silent: true });
    }
    this.fireOnStop();
};
rectangleMode.onTrash = function (state) {
    this.deleteFeature([state.rectangle.id], { silent: true });
    this.changeMode('simple_select');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdGFuZ2xlTW9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FybGFzLW1hcC9zcmMvbGliL2RyYXcvbW9kZXMvcmVjdGFuZ2xlTW9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxPQUFPLFVBQVUsTUFBTSx3QkFBd0IsQ0FBQztBQUVoRCxxRkFBcUY7QUFDckYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFRLEVBQUcsQ0FBQztBQUV0QyxhQUFhLENBQUMsT0FBTyxHQUFHO0lBQ3BCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDOUIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU87UUFDL0MsVUFBVSxFQUFFO1lBQ1IsTUFBTSxFQUFFLE1BQU07U0FDakI7UUFDRCxRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsT0FBTztZQUMvQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDbEI7S0FDSixDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTNCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQzdCLFVBQVUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFELElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUNwQixLQUFLLEVBQUUsSUFB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SSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsRUFBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVGLGFBQWEsQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLO0lBQ2xDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDM0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gR2lzYcOvYSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRS50eHQgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBHaXNhw69hIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBNYXBib3hEcmF3IGZyb20gJ0BtYXBib3gvbWFwYm94LWdsLWRyYXcnO1xuXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vdGhlZ2lzZGV2L21hcGJveC1nbC1kcmF3LXJlY3RhbmdsZS1tb2RlL3RyZWUvbWFzdGVyXG5leHBvcnQgY29uc3QgcmVjdGFuZ2xlTW9kZTogYW55ID0geyB9O1xuXG5yZWN0YW5nbGVNb2RlLm9uU2V0dXAgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCByZWN0YW5nbGUgPSB0aGlzLm5ld0ZlYXR1cmUoe1xuICAgICAgICB0eXBlOiBNYXBib3hEcmF3LmNvbnN0YW50cy5nZW9qc29uVHlwZXMuRkVBVFVSRSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgc291cmNlOiAnYmJveCdcbiAgICAgICAgfSxcbiAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICB0eXBlOiBNYXBib3hEcmF3LmNvbnN0YW50cy5nZW9qc29uVHlwZXMuUE9MWUdPTixcbiAgICAgICAgICBjb29yZGluYXRlczogW1tdXVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5hZGRGZWF0dXJlKHJlY3RhbmdsZSk7XG5cbiAgICB0aGlzLmNsZWFyU2VsZWN0ZWRGZWF0dXJlcygpO1xuICAgIE1hcGJveERyYXcubGliLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKHRoaXMpO1xuICAgIHRoaXMudXBkYXRlVUlDbGFzc2VzKHsgbW91c2U6IE1hcGJveERyYXcuY29uc3RhbnRzLmN1cnNvcnMuQUREIH0pO1xuICAgIHRoaXMuYWN0aXZhdGVVSUJ1dHRvbihNYXBib3hEcmF3LmNvbnN0YW50cy50eXBlcy5QT0xZR09OKTtcbiAgICB0aGlzLnNldEFjdGlvbmFibGVTdGF0ZSh7XG4gICAgICAgIHRyYXNoOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZWN0YW5nbGUsXG4gICAgICAgIGN1cnJlbnRWZXJ0ZXhQb3NpdGlvbjogMCxcbiAgICAgICAgc3RhcnQ6IFtdXG4gICAgfTtcbn07XG5cbnJlY3RhbmdsZU1vZGUub25DbGljayA9IGZ1bmN0aW9uKHN0YXRlLCBlKSB7XG4gICAgaWYgKHN0YXRlLmN1cnJlbnRWZXJ0ZXhQb3NpdGlvbiA9PT0gMVxuICAgICAgICAmJiBzdGF0ZS5zdGFydFswXSAhPT0gZS5sbmdMYXQubG5nXG4gICAgICAgICYmIHN0YXRlLnN0YXJ0WzFdICE9PSBlLmxuZ0xhdC5sYXRcbiAgICApIHtcbiAgICAgICAgdGhpcy51cGRhdGVVSUNsYXNzZXMoeyBtb3VzZTogTWFwYm94RHJhdy5jb25zdGFudHMuY3Vyc29ycy5OT05FIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2VNb2RlKCdzaW1wbGVfc2VsZWN0JywgeyBmZWF0dXJlc0lkOiBzdGF0ZS5yZWN0YW5nbGUuaWQgfSk7XG4gICAgfVxuICAgIHN0YXRlLnN0YXJ0ID0gW2UubG5nTGF0LmxuZywgZS5sbmdMYXQubGF0XTtcbiAgICBzdGF0ZS5jdXJyZW50VmVydGV4UG9zaXRpb24rKztcbn07XG5cbnJlY3RhbmdsZU1vZGUub25Nb3VzZU1vdmUgPSBmdW5jdGlvbihzdGF0ZSwgZSkge1xuICAgIGlmIChzdGF0ZS5zdGFydD8ubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHN0YXRlLnN0YXJ0O1xuXG4gICAgICAgIC8vIFRoZSBiYm94IG5lZWRzIHRvIGJlIG9yaWVudGVkIGluIGEgY2VydGFpbiB3YXkgdG8gbWF0Y2ggdGhlIHBhcnNpbmcgaW4gdGhlIGNvbnRyaWJ1dG9yc1xuICAgICAgICBjb25zdCB3ZXN0ID0gTWF0aC5taW4oc3RhcnRbMF0sIGUubG5nTGF0LmxuZyk7XG4gICAgICAgIGNvbnN0IG5vcnRoID0gTWF0aC5tYXgoc3RhcnRbMV0sIGUubG5nTGF0LmxhdCk7XG4gICAgICAgIGNvbnN0IGVhc3QgPSBNYXRoLm1heChzdGFydFswXSwgZS5sbmdMYXQubG5nKTtcbiAgICAgICAgY29uc3Qgc291dGggPSBNYXRoLm1pbihzdGFydFsxXSwgZS5sbmdMYXQubGF0KTtcblxuICAgICAgICBzdGF0ZS5yZWN0YW5nbGUudXBkYXRlQ29vcmRpbmF0ZSgnMC4wJywgZWFzdCwgc291dGgpO1xuICAgICAgICBzdGF0ZS5yZWN0YW5nbGUudXBkYXRlQ29vcmRpbmF0ZSgnMC4xJywgZWFzdCwgbm9ydGgpO1xuICAgICAgICBzdGF0ZS5yZWN0YW5nbGUudXBkYXRlQ29vcmRpbmF0ZSgnMC4yJywgd2VzdCwgbm9ydGgpO1xuICAgICAgICBzdGF0ZS5yZWN0YW5nbGUudXBkYXRlQ29vcmRpbmF0ZSgnMC4zJywgd2VzdCwgc291dGgpO1xuICAgIH1cbn07XG5cbnJlY3RhbmdsZU1vZGUudG9EaXNwbGF5RmVhdHVyZXMgPSBmdW5jdGlvbihzdGF0ZSwgZ2VvanNvbiwgZGlzcGxheSkge1xuICAgIGNvbnN0IGlzQWN0aXZlUG9seWdvbiA9IGdlb2pzb24ucHJvcGVydGllcy5pZCA9PT0gc3RhdGUucmVjdGFuZ2xlLmlkO1xuICAgIGdlb2pzb24ucHJvcGVydGllcy5hY3RpdmUgPSBpc0FjdGl2ZVBvbHlnb24gPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgIGlmICghaXNBY3RpdmVQb2x5Z29uKSB7XG4gICAgICAgIHJldHVybiBkaXNwbGF5KGdlb2pzb24pO1xuICAgIH1cblxuICAgIC8vIE9ubHkgcmVuZGVyIHRoZSByZWN0YW5ndWxhciBwb2x5Z29uIGlmIGl0IGhhcyB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICBpZiAoc3RhdGUuc3RhcnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGRpc3BsYXkoZ2VvanNvbik7XG59O1xuXG5yZWN0YW5nbGVNb2RlLmZpcmVPblN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5tYXAuZmlyZSgnZHJhdy5vblN0b3AnLCAnZHJhdyBlbmQnKTtcbn07XG5cbnJlY3RhbmdsZU1vZGUub25TdG9wID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBNYXBib3hEcmF3LmxpYi5kb3VibGVDbGlja1pvb20uZW5hYmxlKHRoaXMpO1xuICAgIHRoaXMuYWN0aXZhdGVVSUJ1dHRvbigpO1xuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlJ3ZlIGRlbGV0ZWQgdGhpcyBmZWF0dXJlXG4gICAgaWYgKHRoaXMuZ2V0RmVhdHVyZShzdGF0ZS5yZWN0YW5nbGUuaWQpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBsYXN0IGFkZGVkIGNvb3JkaW5hdGVcbiAgICBzdGF0ZS5yZWN0YW5nbGUucmVtb3ZlQ29vcmRpbmF0ZSgnMC40Jyk7XG4gICAgaWYgKHN0YXRlLnJlY3RhbmdsZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5tYXAuZmlyZSgnZHJhdy5jcmVhdGUnLCB7XG4gICAgICAgICAgICBmZWF0dXJlczogW3N0YXRlLnJlY3RhbmdsZS50b0dlb0pTT04oKV0sXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVsZXRlRmVhdHVyZShbc3RhdGUucmVjdGFuZ2xlLmlkXSwgeyBzaWxlbnQ6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuY2hhbmdlTW9kZSgnc2ltcGxlX3NlbGVjdCcsIHtmZWF0dXJlSWRzOiBbc3RhdGUucmVjdGFuZ2xlLmlkXX0sIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgIH1cblxuICAgIHRoaXMuZmlyZU9uU3RvcCgpO1xufTtcblxucmVjdGFuZ2xlTW9kZS5vblRyYXNoID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB0aGlzLmRlbGV0ZUZlYXR1cmUoW3N0YXRlLnJlY3RhbmdsZS5pZF0sIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgIHRoaXMuY2hhbmdlTW9kZSgnc2ltcGxlX3NlbGVjdCcpO1xufTtcbiJdfQ==