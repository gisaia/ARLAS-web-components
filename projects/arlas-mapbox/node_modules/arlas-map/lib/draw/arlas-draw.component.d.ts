import { EventEmitter, OnInit, SimpleChanges } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TranslateService } from '@ngx-translate/core';
import { FeatureCollection } from '@turf/helpers';
import { ArlasMapFrameworkService } from '../arlas-map-framework.service';
import { AbstractArlasMapService } from '../arlas-map.service';
import { AbstractArlasMapGL } from '../map/AbstractArlasMapGL';
import { AbstractDraw } from './AbstractDraw';
import { AoiDimensions } from './draw.models';
import { MapboxAoiDrawService } from './draw.service';
import * as i0 from "@angular/core";
export declare class ArlasDrawComponent<L, S, M> implements OnInit {
    private readonly drawService;
    private readonly _snackBar;
    private readonly translate;
    protected mapFrameworkService: ArlasMapFrameworkService<L, S, M>;
    protected mapService: AbstractArlasMapService<L, S, M>;
    map: AbstractArlasMapGL;
    private emptyData;
    /**  @description Options object for draw tools : https://github.com/mapbox/mapbox-gl-draw/blob/master/docs/API.md#options */
    drawOption: any;
    /** Draw instance. */
    draw: AbstractDraw;
    /** @description Features drawn at component start */
    drawData: FeatureCollection<GeoJSON.Geometry>;
    /** @description Whether the draw tools are activated. */
    drawButtonEnabled: boolean;
    /** @description Maximum number of vertices allowed for a polygon. */
    drawPolygonVerticesLimit: number;
    /** @description Whether the drawing buffer is activated */
    /** If true, the map's canvas can be exported to a PNG using map.getCanvas().toDataURL(). Default: false */
    preserveDrawingBuffer: boolean;
    /** @description Emits the geojson of an aoi added to the map. */
    onAoiChanged: EventEmitter<FeatureCollection<GeoJSON.Geometry>>;
    /** @description Emits the the dimensions of the polygon/bbox that is being drawn. */
    onAoiEdit: EventEmitter<AoiDimensions>;
    /** Number of drawn vertices (incremented in draw mode). Reset to 0 when the drawing is finished. */
    nbPolygonVertices: number;
    /** Number of clicks while drawing a geometry. */
    drawClickCounter: number;
    /** List of drawn polygons centroid */
    polygonlabeldata: FeatureCollection<GeoJSON.Geometry>;
    /** Drawn geometry's state when editing/updating. */
    protected savedEditFeature: any;
    /** Map container Html element */
    protected canvas: HTMLElement;
    /** Html element that holds the drawing message. */
    protected drawTooltipElement: HTMLElement;
    /** Message shown to explain how to draw. */
    drawTooltipMessage: import("@angular/core").WritableSignal<string>;
    constructor(drawService: MapboxAoiDrawService, _snackBar: MatSnackBar, translate: TranslateService, mapFrameworkService: ArlasMapFrameworkService<L, S, M>, mapService: AbstractArlasMapService<L, S, M>);
    /**
     * @description Stops the drawing mode by changing to static mode.
     */
    private stopDrawingAtVerticeLimit;
    private listenToDrawOnCreate;
    private listenToDrawUpdate;
    private listenToDrawDelete;
    private listenToDrawInvalidGeometry;
    private listenToDrawSelectionChange;
    private listenToDrawModeChange;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Update the tooltip message when drawing to reflect drawing mode and state
     */
    updateTooltipMessage(): void;
    private readonly mouseMoveForDraw;
    /**
     * @description Emits the bbox drawn by the BboxGenerator component
     * @param east
     * @param south
     * @param west
     * @param north
     */
    protected drawBbox(east: number, south: number, west: number, north: number): void;
    /** @description Enables bbox drawing mode.*/
    addGeoBox(): void;
    /**
     * @description Removes all the aois if none of them is selected. Otherwise it removes the selected one only
     */
    removeAois(): void;
    /** @description Deletes the selected drawn geometry. If no drawn geometry is selected, all geometries are deteleted */
    deleteSelectedItem(): void;
    /**
     * @description Shows an invalid-geometry error on a snack bar.
     */
    openInvalidGeometrySnackBar(): void;
    /**
     * @description Switches to a drawing mode of a polygon, circle, radius circle or strip.
     * @param mode Draw mode (DRAW_POLYGON, DRAW_CIRCLE, DRAW_RADIUS_CIRCLE or DRAW_STRIP). Default to DRAW_POLYGON
     * @param option Mapboxdraw option.
     */
    switchToDrawMode(mode?: string, option?: any): void;
    /**
     * @description Switches to direct_select mode.
     * @param option Mapboxdraw option.
     */
    switchToDirectSelectMode(option?: {
        featureIds: Array<string>;
        allowCircleResize: boolean;
    } | {
        featureId: string;
        allowCircleResize: boolean;
    }): void;
    /**
     * @description Switches to simple_select mode.
     */
    switchToEditMode(): void;
    /**
     * @description Switches to static mode.
     */
    switchToStaticMode(): void;
    /**
     * @description Returns all the drawn polygons as wkt or geojson.
     * @param mode 'wkt' | 'geojson'
     * @returns
     */
    getAllPolygon(mode: 'wkt' | 'geojson'): string | Object;
    /**
     * @returns the selected polygon geometry in WKT or GeoJson given the mode
     * @param mode : 'wkt' | 'geojson'
     * @returns Wkt string or Geojson object.
     */
    getSelectedPolygon(mode: 'wkt' | 'geojson'): string | Object;
    handleKeyboardEvent(event: KeyboardEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ArlasDrawComponent<any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ArlasDrawComponent<any, any, any>, "arlas-draw", never, { "map": { "alias": "map"; "required": false; }; "emptyData": { "alias": "emptyData"; "required": false; }; "drawOption": { "alias": "drawOption"; "required": false; }; "drawData": { "alias": "drawData"; "required": false; }; "drawButtonEnabled": { "alias": "drawButtonEnabled"; "required": false; }; "drawPolygonVerticesLimit": { "alias": "drawPolygonVerticesLimit"; "required": false; }; "preserveDrawingBuffer": { "alias": "preserveDrawingBuffer"; "required": false; }; }, { "onAoiChanged": "onAoiChanged"; "onAoiEdit": "onAoiEdit"; }, never, never, false, never>;
}
