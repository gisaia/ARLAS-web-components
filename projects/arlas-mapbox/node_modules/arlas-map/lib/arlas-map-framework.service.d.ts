import { AbstractArlasMapGL, ArlasMapOption, MapConfig } from './map/AbstractArlasMapGL';
import { AbstractDraw } from './draw/AbstractDraw';
import { ArlasLngLat, ArlasLngLatBounds } from './map/model/map';
import { FeatureCollection } from '@turf/helpers';
import { VectorStyle } from './map/model/vector-style';
import { ArlasPoint } from './map/model/geometry';
import { MapLayerMouseEvent } from './map/model/events';
import * as i0 from "@angular/core";
/**
 * This service exposes a list of map interaction methods that are abstract.
 * Theses methods will be implemented by the chosen cartographical framework to use.
 */
export declare abstract class ArlasMapFrameworkService<L, S, M> {
    constructor();
    abstract getInitTransformRequest(): Function;
    abstract buildMapProviderOption(mapOption: ArlasMapOption): M;
    abstract createMap(config: MapConfig<M>): AbstractArlasMapGL;
    abstract createDraw(drawOptions: any, enabled: boolean, map: AbstractArlasMapGL): AbstractDraw;
    /**
     * @description Gets the bounds from the two given coordinates.
     * @param c1 Coordinates of the first corner.
     * @param c2 Coordinates of the second corner.
     * @returns Bounds formed from the two given coordinates.
     */
    getLngLatBound(c1: ArlasLngLat, c2: ArlasLngLat): ArlasLngLatBounds;
    /**
     * Fits the map to its current bounds. To be used when a map container is resized.
     * @param map Map instance.
     */
    abstract fitMapBounds(map: AbstractArlasMapGL): any;
    abstract getBoundsAsString(map: AbstractArlasMapGL): string;
    /**
     * @description Gets the Point (geometry) from mouse click on the screen.
     * @param mouseEvent Click mouse event.
     * @param container Map container.
     * @returns a Point instance.
     */
    abstract getPointFromScreen(mouseEvent: MouseEvent, container: HTMLElement): ArlasPoint;
    /**
     * @description Sets `data` to a Geojson `source` of the map
     * @param source A Geojson source
     * @param data A feature collection object.
     */
    abstract setDataToGeojsonSource(source: S | string, data: FeatureCollection<GeoJSON.Geometry>): any;
    /**
     * Returns the canvas element of the map
     * @param map Map instance.
     */
    abstract getCanvas(map: AbstractArlasMapGL): HTMLCanvasElement;
    abstract addImage(name: string, url: string, map: AbstractArlasMapGL, errorMessage: string, opt?: any): any;
    /**
     * @description Adds a layer to the map instance.
     * @param map Map instance.
     * @param layer A layer. It could be a layer identifier OR a layer object (it will depend on the framwork implementation).
     * @param beforeId Identifier of an already added layer. The 'layer' is added under this 'beforeId' layer.
     */
    abstract addLayer(map: AbstractArlasMapGL, layer: L, beforeId?: L | string): any;
    abstract getLayersFromPattern(map: AbstractArlasMapGL, layersIdPattern: string): L[];
    abstract getAllLayers(map: AbstractArlasMapGL): L[];
    abstract hasLayer(map: AbstractArlasMapGL, layer: L | string): any;
    abstract hasLayersFromPattern(map: AbstractArlasMapGL, layersIdPattern: string): any;
    abstract moveLayer(map: AbstractArlasMapGL, layer: L | string, beforeId?: string): any;
    abstract onLayerEvent(eventName: string, map: AbstractArlasMapGL, layer: any, fn: (e: any) => void): any;
    abstract removeLayer(map: AbstractArlasMapGL, layer: L | string): any;
    abstract removeLayers(map: AbstractArlasMapGL, layers: L[] | string[]): any;
    abstract removeLayersFromPattern(map: AbstractArlasMapGL, layersIdPattern: string): any;
    abstract setLayerVisibility(layer: L | string, isVisible: boolean, map: AbstractArlasMapGL): any;
    abstract isLayerVisible(layer: L | string): boolean;
    abstract getLayer(map: AbstractArlasMapGL, layerId: string): L;
    abstract queryFeatures(mouseEvent: MapLayerMouseEvent, map: AbstractArlasMapGL, layersIdPattern: string, options?: any): any;
    abstract hasSource(map: AbstractArlasMapGL, source: L | AbstractArlasMapGL | string): any;
    abstract getSource(sourceId: string, options: L | AbstractArlasMapGL | string): S;
    abstract getAllSources(options: L | AbstractArlasMapGL | string): S[];
    abstract setSource(sourceId: string, source: S, options: L | AbstractArlasMapGL | string): any;
    abstract removeSource(map: AbstractArlasMapGL, source: S | string): any;
    abstract addPopup(map: AbstractArlasMapGL, popup: any): any;
    abstract createPopup(lng: number, lat: number, message: string): any;
    abstract removePopup(map: AbstractArlasMapGL, popup: any): any;
    abstract onMapEvent(eventName: any, map: AbstractArlasMapGL, fn: (e: any) => void): any;
    abstract setMapCursor(map: AbstractArlasMapGL, cursor: string): void;
    abstract flyTo(lat: number, lng: number, zoom: number, map: AbstractArlasMapGL): any;
    abstract addIconLayer(map: AbstractArlasMapGL, layerId: string, iconName: string, iconSize: number, data: GeoJSON.Feature<GeoJSON.Geometry> | GeoJSON.FeatureCollection<GeoJSON.Geometry>): any;
    abstract addRasterLayer(map: AbstractArlasMapGL, layerId: string, url: string, bounds: number[], maxZoom: number, tileSize: number, beforeId?: string): void;
    abstract addGeojsonLayer(map: AbstractArlasMapGL, layerId: string, style: VectorStyle, data: GeoJSON.Feature<GeoJSON.Geometry> | GeoJSON.FeatureCollection<GeoJSON.Geometry>): void;
    abstract filterGeojsonData(map: AbstractArlasMapGL, layer: L | string, filter: any): any;
    abstract createGeojsonSource(data: GeoJSON.GeoJSON): S;
    abstract createRasterSource(url: string, bounds: number[], maxZoom: number, tileSize: number): S;
    static ɵfac: i0.ɵɵFactoryDeclaration<ArlasMapFrameworkService<any, any, any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ArlasMapFrameworkService<any, any, any>>;
}
