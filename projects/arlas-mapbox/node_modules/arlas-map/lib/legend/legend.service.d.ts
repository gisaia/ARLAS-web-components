import { CircleLegend, FillLegend, HeatmapLegend, LabelLegend, Legend, LegendData, LineLegend } from './legend.config';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare abstract class LegendService {
    getCircleLegend(paint: any, visibileMode: boolean, legendData: Map<string, LegendData>, layer: any): CircleLegend;
    getLineLegend(paint: any, visibileMode: boolean, legendData: Map<string, LegendData>, layer: any): LineLegend;
    getFillLegend(paint: any, visibileMode: boolean, legendData: Map<string, LegendData>, layer: any): FillLegend;
    getHeatmapLegend(paint: any, visibileMode: boolean, legendData: Map<string, LegendData>, layer: any): HeatmapLegend;
    getLabelLegend(paint: any, visibileMode: boolean, legendData: Map<string, LegendData>, layer: any): LabelLegend;
    static setProvidedColorLegend(colorLegend: Legend, field: string, legendData: Map<string, LegendData>, filter: any, translate: TranslateService): void;
    static setMatchColorLegend(colorLegend: Legend, colorExpression: any[], legendData: Map<string, LegendData>, filter: any, translate: TranslateService): void;
    static setInterpolatedColorLegend(colorLegend: Legend, colorExpression: any[], legendData: Map<string, LegendData>, visibleMode: boolean): string;
    static filterLegend(colorLegendValues: Map<string, string | number>, filter: any[], field: string): void;
    static buildColorLegend(colorExpression: string | any, visibleMode: boolean, legendData: Map<string, LegendData>, filter?: any, translate?: TranslateService): [Legend, string];
    static buildRadiusLegend(radiusExpression: string | any, legendData: Map<string, LegendData>): Legend;
    protected static buildWidthLegend(lineWidth: number | any, legendData: Map<string, LegendData>): Legend;
    static ɵfac: i0.ɵɵFactoryDeclaration<LegendService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LegendService>;
}
