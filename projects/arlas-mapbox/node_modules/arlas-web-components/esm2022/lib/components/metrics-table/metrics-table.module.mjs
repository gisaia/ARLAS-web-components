/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { AsyncPipe, KeyValuePipe, NgClass, NgForOf, NgIf, UpperCasePipe } from '@angular/common';
import { NgModule } from '@angular/core';
import { MatTooltipModule } from '@angular/material/tooltip';
import { TranslateModule } from '@ngx-translate/core';
import { MetricsTableComponent } from './metrics-table.component';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { PowerbarModule } from '../powerbars/powerbar/powerbar.module';
import { FormatLongTitlePipe } from '../../pipes/format-title/format-long-title.pipe';
import { MetricsTableRowModule } from './multi-bars-row/metrics-table-row.module';
import { GetCollectionDisplayModule } from '../../pipes/get-collection-display-name/get-collection-display.module';
import { GetFieldDisplayModule } from '../../pipes/get-field-display-name/get-field-display.module';
import * as i0 from "@angular/core";
export class MetricsTableModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableModule, declarations: [MetricsTableComponent], imports: [PowerbarModule,
            MatTooltipModule,
            NgForOf,
            NgClass,
            NgIf,
            UpperCasePipe,
            MatCheckboxModule,
            TranslateModule,
            MetricsTableRowModule,
            FormatLongTitlePipe,
            AsyncPipe,
            KeyValuePipe,
            GetCollectionDisplayModule,
            GetFieldDisplayModule], exports: [MetricsTableComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableModule, imports: [PowerbarModule,
            MatTooltipModule,
            MatCheckboxModule,
            TranslateModule,
            MetricsTableRowModule,
            GetCollectionDisplayModule,
            GetFieldDisplayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricsTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        PowerbarModule,
                        MatTooltipModule,
                        NgForOf,
                        NgClass,
                        NgIf,
                        UpperCasePipe,
                        MatCheckboxModule,
                        TranslateModule,
                        MetricsTableRowModule,
                        FormatLongTitlePipe,
                        AsyncPipe,
                        KeyValuePipe,
                        GetCollectionDisplayModule,
                        GetFieldDisplayModule
                    ],
                    declarations: [MetricsTableComponent],
                    exports: [MetricsTableComponent]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljcy10YWJsZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9tZXRyaWNzLXRhYmxlL21ldHJpY3MtdGFibGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN0RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1RUFBdUUsQ0FBQztBQUNuSCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQzs7QUFxQnBHLE1BQU0sT0FBTyxrQkFBa0I7K0dBQWxCLGtCQUFrQjtnSEFBbEIsa0JBQWtCLGlCQUhaLHFCQUFxQixhQWZoQyxjQUFjO1lBQ2QsZ0JBQWdCO1lBQ2hCLE9BQU87WUFDUCxPQUFPO1lBQ1AsSUFBSTtZQUNKLGFBQWE7WUFDYixpQkFBaUI7WUFDakIsZUFBZTtZQUNmLHFCQUFxQjtZQUNyQixtQkFBbUI7WUFDbkIsU0FBUztZQUNULFlBQVk7WUFDWiwwQkFBMEI7WUFDMUIscUJBQXFCLGFBR2YscUJBQXFCO2dIQUV0QixrQkFBa0IsWUFsQnZCLGNBQWM7WUFDZCxnQkFBZ0I7WUFLaEIsaUJBQWlCO1lBQ2pCLGVBQWU7WUFDZixxQkFBcUI7WUFJckIsMEJBQTBCO1lBQzFCLHFCQUFxQjs7NEZBS2hCLGtCQUFrQjtrQkFwQjlCLFFBQVE7bUJBQUM7b0JBQ04sT0FBTyxFQUFFO3dCQUNMLGNBQWM7d0JBQ2QsZ0JBQWdCO3dCQUNoQixPQUFPO3dCQUNQLE9BQU87d0JBQ1AsSUFBSTt3QkFDSixhQUFhO3dCQUNiLGlCQUFpQjt3QkFDakIsZUFBZTt3QkFDZixxQkFBcUI7d0JBQ3JCLG1CQUFtQjt3QkFDbkIsU0FBUzt3QkFDVCxZQUFZO3dCQUNaLDBCQUEwQjt3QkFDMUIscUJBQXFCO3FCQUN4QjtvQkFDRCxZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDckMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7aUJBQ25DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFzeW5jUGlwZSwgS2V5VmFsdWVQaXBlLCBOZ0NsYXNzLCBOZ0Zvck9mLCBOZ0lmLCBVcHBlckNhc2VQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRUb29sdGlwTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdG9vbHRpcCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE1ldHJpY3NUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vbWV0cmljcy10YWJsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWF0Q2hlY2tib3hNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGVja2JveCc7XG5pbXBvcnQgeyBQb3dlcmJhck1vZHVsZSB9IGZyb20gJy4uL3Bvd2VyYmFycy9wb3dlcmJhci9wb3dlcmJhci5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybWF0TG9uZ1RpdGxlUGlwZSB9IGZyb20gJy4uLy4uL3BpcGVzL2Zvcm1hdC10aXRsZS9mb3JtYXQtbG9uZy10aXRsZS5waXBlJztcbmltcG9ydCB7IE1ldHJpY3NUYWJsZVJvd01vZHVsZSB9IGZyb20gJy4vbXVsdGktYmFycy1yb3cvbWV0cmljcy10YWJsZS1yb3cubW9kdWxlJztcbmltcG9ydCB7IEdldENvbGxlY3Rpb25EaXNwbGF5TW9kdWxlIH0gZnJvbSAnLi4vLi4vcGlwZXMvZ2V0LWNvbGxlY3Rpb24tZGlzcGxheS1uYW1lL2dldC1jb2xsZWN0aW9uLWRpc3BsYXkubW9kdWxlJztcbmltcG9ydCB7IEdldEZpZWxkRGlzcGxheU1vZHVsZSB9IGZyb20gJy4uLy4uL3BpcGVzL2dldC1maWVsZC1kaXNwbGF5LW5hbWUvZ2V0LWZpZWxkLWRpc3BsYXkubW9kdWxlJztcbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBQb3dlcmJhck1vZHVsZSxcbiAgICAgICAgTWF0VG9vbHRpcE1vZHVsZSxcbiAgICAgICAgTmdGb3JPZixcbiAgICAgICAgTmdDbGFzcyxcbiAgICAgICAgTmdJZixcbiAgICAgICAgVXBwZXJDYXNlUGlwZSxcbiAgICAgICAgTWF0Q2hlY2tib3hNb2R1bGUsXG4gICAgICAgIFRyYW5zbGF0ZU1vZHVsZSxcbiAgICAgICAgTWV0cmljc1RhYmxlUm93TW9kdWxlLFxuICAgICAgICBGb3JtYXRMb25nVGl0bGVQaXBlLFxuICAgICAgICBBc3luY1BpcGUsXG4gICAgICAgIEtleVZhbHVlUGlwZSxcbiAgICAgICAgR2V0Q29sbGVjdGlvbkRpc3BsYXlNb2R1bGUsXG4gICAgICAgIEdldEZpZWxkRGlzcGxheU1vZHVsZVxuICAgIF0sXG4gICAgZGVjbGFyYXRpb25zOiBbTWV0cmljc1RhYmxlQ29tcG9uZW50XSxcbiAgICBleHBvcnRzOiBbTWV0cmljc1RhYmxlQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBNZXRyaWNzVGFibGVNb2R1bGUgeyB9XG4iXX0=