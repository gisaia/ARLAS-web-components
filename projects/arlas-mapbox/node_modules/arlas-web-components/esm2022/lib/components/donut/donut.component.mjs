/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Input, Output, ElementRef, ViewEncapsulation } from '@angular/core';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { OneSelectionDonut, MultiSelectionDonut, DonutParams } from 'arlas-d3';
import * as donutJsonSchema from './donut.schema.json';
import { ArlasColorService } from '../../services/color.generator.service';
import { TranslateService } from '@ngx-translate/core';
import { NUMBER_FORMAT_CHAR } from '../componentsUtils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/color.generator.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "@angular/common";
export class DonutComponent {
    constructor(el, colorService, translate) {
        this.el = el;
        this.colorService = colorService;
        this.translate = translate;
        /**
         * @Input : Angular
         * @description Sets the opacity of non-hovered or non-selected nodes.
         */
        this.opacity = 0.4;
        /**
         * @Input : Angular
         * @description List of selected nodes.
         */
        this.selectedArcsList = new Array();
        /**
         * @Input : Angular
         * @description Whether the donut is multi-selectable.
         */
        this.multiselectable = true;
        /**
         * @Input : Angular
         * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
         * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
         * Therefore colors saturation of donuts arcs will be within this tightened scale..
         */
        this.colorsSaturationWeight = 1 / 2;
        /**
         * @Input : Angular
         * @description Unit that a node of the donut represents
         */
        this.unit = '';
        /**
         * @Output : Angular
         * @description Emits the list of selected nodes and the paths to their ultimate parent
         */
        this.selectedNodesEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the hovered node and the path to it's parents.
         * The key of the map is the node's name and the value is its color on the donut
         */
        this.hoveredNodesEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the information about the hovered node and its parents.
         */
        this.hoveredNodeTooltipEvent = new Subject();
        this._onDestroy$ = new Subject();
        fromEvent(window, 'resize')
            .pipe(debounceTime(500), takeUntil(this._onDestroy$))
            .subscribe((event) => {
            this.donut.resize(this.el.nativeElement.childNodes[0]);
        });
        this.colorService.changekeysToColors$
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(() => {
            this.donut.donutParams.keysToColors = this.colorService.colorGenerator.keysToColors;
            this.donut.donutParams.donutNodeColorizer = this.colorService;
            this.donut.resize(this.el.nativeElement.childNodes[0]);
        });
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    ngOnChanges(changes) {
        if (this.donut === undefined) {
            if (this.multiselectable) {
                this.donut = new MultiSelectionDonut();
            }
            else {
                this.donut = new OneSelectionDonut();
            }
            this.setDonutParameters();
        }
        if (changes.donutData && this.donutData !== undefined && this.donutData !== null && this.donut !== undefined
            && this.donut.donutParams !== undefined) {
            this.donut.dataChange(this.donutData);
        }
        if (changes.selectedArcsList && this.selectedArcsList !== undefined && this.selectedArcsList !== null && this.donut !== undefined
            && this.donut.donutParams !== undefined && this.donut.donutParams.donutNodes !== undefined) {
            this.donut.onSelectionChange(this.selectedArcsList);
        }
    }
    /**
     * @returns Json schema of the donut component for configuration
     */
    static getDonutJsonSchema() {
        return donutJsonSchema;
    }
    setDonutParameters() {
        if (!this.unit) {
            this.unit = '';
        }
        this.donut.donutParams = new DonutParams();
        this.donut.donutParams.id = this.id;
        this.donut.donutParams.customizedCssClass = this.customizedCssClass;
        this.donut.donutParams.donutData = this.donutData;
        this.donut.donutParams.hoveredNodesEvent = this.hoveredNodesEvent;
        this.donut.donutParams.tooltipEvent = this.hoveredNodeTooltipEvent;
        this.donut.donutParams.multiselectable = this.multiselectable;
        this.donut.donutParams.opacity = this.opacity;
        this.donut.donutParams.selectedArcsList = this.selectedArcsList;
        this.donut.donutParams.selectedNodesEvent = this.selectedNodesEvent;
        this.donut.donutParams.donutContainer = this.el.nativeElement.childNodes[0];
        this.donut.donutParams.svgElement = this.el.nativeElement.childNodes[0].childNodes[0];
        this.donut.donutParams.keysToColors = this.keysToColors;
        this.donut.donutParams.colorsSaturationWeight = this.colorsSaturationWeight;
        this.donut.donutParams.donutNodeColorizer = this.colorService;
        this.donut.donutParams.numberFormatChar = this.translate.instant(NUMBER_FORMAT_CHAR);
        this.donut.donutParams.diameter = this.diameter;
        this.donut.donutParams.containerWidth = this.containerWidth;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DonutComponent, deps: [{ token: i0.ElementRef }, { token: i1.ArlasColorService }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: DonutComponent, selector: "arlas-donut", inputs: { donutData: "donutData", opacity: "opacity", customizedCssClass: "customizedCssClass", selectedArcsList: "selectedArcsList", multiselectable: "multiselectable", id: "id", keysToColors: "keysToColors", colorsSaturationWeight: "colorsSaturationWeight", diameter: "diameter", containerWidth: "containerWidth", unit: "unit" }, outputs: { selectedNodesEvent: "selectedNodesEvent", hoveredNodesEvent: "hoveredNodesEvent", hoveredNodeTooltipEvent: "hoveredNodeTooltipEvent" }, usesOnChanges: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"donut__container\" [ngClass]=\"customizedCssClass\">\n  <svg id=\"svgix\"></svg>\n</div>\n", styles: ["@charset \"UTF-8\";.donut__container{width:100%;height:100%;position:relative;display:flex;justify-content:center}.donut__tooltip{position:absolute;font-size:.8em;color:#f85e5e;background-color:#fff;border-radius:2px;padding:0 5px;z-index:1000}.donut__arc{fill-rule:evenodd;stroke:#fff;stroke-width:.4px}.donut__arc:hover{cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DonutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-donut', encapsulation: ViewEncapsulation.None, template: "<div id=\"{{id}}\" class=\"donut__container\" [ngClass]=\"customizedCssClass\">\n  <svg id=\"svgix\"></svg>\n</div>\n", styles: ["@charset \"UTF-8\";.donut__container{width:100%;height:100%;position:relative;display:flex;justify-content:center}.donut__tooltip{position:absolute;font-size:.8em;color:#f85e5e;background-color:#fff;border-radius:2px;padding:0 5px;z-index:1000}.donut__arc{fill-rule:evenodd;stroke:#fff;stroke-width:.4px}.donut__arc:hover{cursor:pointer}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.ArlasColorService }, { type: i2.TranslateService }], propDecorators: { donutData: [{
                type: Input
            }], opacity: [{
                type: Input
            }], customizedCssClass: [{
                type: Input
            }], selectedArcsList: [{
                type: Input
            }], multiselectable: [{
                type: Input
            }], id: [{
                type: Input
            }], keysToColors: [{
                type: Input
            }], colorsSaturationWeight: [{
                type: Input
            }], diameter: [{
                type: Input
            }], containerWidth: [{
                type: Input
            }], unit: [{
                type: Input
            }], selectedNodesEvent: [{
                type: Output
            }], hoveredNodesEvent: [{
                type: Output
            }], hoveredNodeTooltipEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,