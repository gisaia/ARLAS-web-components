/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import tinycolor from 'tinycolor2';
import { DEFAULT_SHORTENING_PRECISION } from '../../components/componentsUtils';
import { ArlasColorService } from '../../services/color.generator.service';
import { NUMBER_FORMAT_CHAR } from '../componentsUtils';
import { PowerBar } from './model/powerbar';
import * as powerbarsJsonSchema from './powerbars.schema.json';
import * as i0 from "@angular/core";
import * as i1 from "../../services/color.generator.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/material/form-field";
import * as i5 from "./powerbar/powerbar.component";
import * as i6 from "@ngx-translate/core";
/**
 * Powerbars component transforms a [term, occurence_count] map to a descreasingly sorted list of multiselectable bars.
 * A bar progression represents the term's occurence count.
 */
export class PowerbarsComponent {
    constructor(colorService) {
        this.colorService = colorService;
        /**
         * @Input : Angular
         * @description Which level of the tree inputData to plot as powerbars
         */
        this.level = 1;
        /**
         * @Input : Angular
         * @description Powerbar title
         */
        this.powerbarTitle = '';
        /**
         * @Input : Angular
         * @description Unit the a powerbar represents
         */
        this.unit = '';
        /**
         * @Input : Angular
         * @description List of selected paths in `inputData` from which the powerbars to select
         * are determined
         */
        this.selectedPaths = new Array();
        /**
         * @Input : Angular
         * @description Whether text input, to filter powerbars, is displayed
         */
        this.displayFilterField = false;
        /**
         * @Input : Angular
         * @description Whether to allow colorizing the bar according to its term or not using keysToColors
         */
        this.useColorService = false;
        /**
         * @Input : Angular
         * @description Whether to allow colorizing the bar according to its term or not using a field of the data
         */
        this.useColorFromData = false;
        /**
         * @Input : Angular
         * @description Chart's width. If not specified, the chart takes the component's container width.
         */
        this.chartWidth = null;
        /**
           * @Input : Angular
           * @description Whether the powerbar is scrollable or fully displayed
           */
        this.scrollable = false;
        /**
           * @Input : Angular
           * @description Options about how to apply filters on powerbars
           * - value : The default value.
           *           if 'Eq', the selected powerbar is included in the ARLAS filter.
           *           if 'Neq', the selected powerbar is excluded in the ARLAS filter.
           * - display: Whether to display a switcher between 'Eq' and 'Neq' or keep the default operator all the time
           */
        this.filterOperator = {
            value: 'Eq',
            display: true
        };
        /**
         * @Input : Angular
         * @description Precision when rounding numbers (ie the count next to the progress bar).
         * Default is 2.
         */
        this.numberShorteningPrecision = DEFAULT_SHORTENING_PRECISION;
        /**
         * @Input : Angular
         * @description Whether to group the selected powerbars in a dedicated list or not.
         */
        this.groupSelections = true;
        /**
         * @Input : Angular
         * @description Whether to have the option to select the powerbar using checkboxes.
         */
        this.selectWithCheckbox = false;
        /**
         * @Output : Angular
         * @description Emits the filter operator
         */
        this.filterOperatorEvent = new EventEmitter();
        /**
         * @Output : Angular
         * @description Emits the list of selected paths in the tree inputData
         */
        this.selectedPowerBarEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits searched term
         */
        this.searchedTerm = new Subject();
        this.selectedPowerbarsSet = new Set();
        this.selectedPowerbarsTerms = new Set();
        /**
         * @constant
         */
        this.SELECTED_BAR = 'selected-bar';
        /**
         * @constant
         */
        this.UNSELECTED_BAR = 'unselected-bar';
        /**
         * @constant
         */
        this.NEUTRAL_STATE = 'neutral-state';
        /**
         * @constant
         */
        this.SELECTED_NO_MOUNTED_BAR = 'selected-no-mounted-bar';
        this.NUMBER_FORMAT_CHAR = NUMBER_FORMAT_CHAR;
        this._onDestroy$ = new Subject();
        this.colorService.changekeysToColors$
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(() => {
            this.powerBarsList.forEach(p => {
                if (this.useColorService) {
                    const rgbaColor = tinycolor(this.colorService.getColor(p.term, this.keysToColors, this.colorsSaturationWeight)).toRgb();
                    p.color = this.getPowerbarColor(rgbaColor);
                }
            });
        });
    }
    static getPowerbarsJsonSchema() {
        return powerbarsJsonSchema;
    }
    ngOnInit() {
        if (this.missingLeafEvent) {
            this.missingLeafEvent
                .pipe(takeUntil(this._onDestroy$))
                .subscribe(data => {
                if (this.selectedPaths !== undefined && this.selectedPaths !== null) {
                    this.setSelectedPowerbars(this.selectedPaths);
                    data.filter(d => !!d.value).forEach(d => {
                        const value = d.value;
                        const key = d.key;
                        const missingLeaf = Array.from(this.selectedPowerbarsSet).filter(pw => pw.term === key)[0];
                        const missingLeafToUpdate = { ...missingLeaf };
                        missingLeafToUpdate.count = value;
                        missingLeafToUpdate.isSelected = true;
                        missingLeafToUpdate.classSuffix = this.SELECTED_BAR;
                        if (this.useColorService) {
                            const rgbaColor = tinycolor(this.colorService.getColor(missingLeafToUpdate.term, this.keysToColors, this.colorsSaturationWeight)).toRgb();
                            missingLeafToUpdate.color = this.getPowerbarColor(rgbaColor);
                        }
                        this.selectedPowerbarsSet.delete(missingLeaf);
                        this.selectedPowerbarsSet.add(missingLeafToUpdate);
                    });
                }
            });
        }
        if (this.level > 1) {
            throw new Error('Not implemented : Only level 1 is supported');
        }
        if (!this.unit) {
            this.unit = '';
        }
        if (this.groupSelections === undefined) {
            this.groupSelections = true;
        }
    }
    ngAfterViewInit() {
        if (!this.filterOperator) {
            this.filterOperator = {
                value: 'Eq',
                display: true
            };
        }
    }
    ngOnChanges(changes) {
        if (changes.inputData) {
            if (this.inputData !== undefined && this.inputData !== null) {
                this.populatePowerbars();
                this.populateSelectedPowerbars();
                this.calculateAllPowerBarsProgression();
            }
            else {
                this.inputData = { id: 'root', fieldName: 'root', fieldValue: 'root', isOther: false, children: [] };
                this.powerBarsList = [];
            }
        }
        if (changes.selectedPaths && this.selectedPaths !== undefined && this.selectedPaths !== null) {
            this.setSelectedPowerbars(this.selectedPaths);
        }
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    /**
     * @description Select or deselect a PowerBar and emits the terms list of selected bars
     */
    // Select or deselect a PowerBar from the view
    clickOnPowerbar(powerBar) {
        const selectedPaths = new Array();
        if (this.selectedPowerbarsTerms.has(powerBar.term)) {
            powerBar.isSelected = false;
            this.selectedPowerbarsTerms.delete(powerBar.term);
            this.selectedPowerbarsSet.delete(powerBar);
            if (this.selectedPowerbarsTerms.size === 0) {
                this.clearSelection();
            }
            else {
                powerBar.classSuffix = this.UNSELECTED_BAR;
            }
        }
        else {
            if (this.selectedPaths) {
                Object.assign(selectedPaths, this.selectedPaths);
            }
            powerBar.isSelected = true;
            powerBar.classSuffix = this.SELECTED_BAR;
            this.selectedPowerbarsTerms.add(powerBar.term);
            this.addSelectedPowerbarToList(powerBar, this.selectedPowerbarsSet);
            this.unselectAllButNotSelectedBars();
        }
        this.selectedPowerbarsSet.forEach(pb => {
            selectedPaths.push(pb.path);
        });
        this.selectedPowerbarsSet = this.sortSelectedPowerBars(this.selectedPowerbarsSet);
        this.selectedPowerBarEvent.next(selectedPaths);
    }
    /**
     * @description Set selected powerbars from outside of the component
     * @param selectedPaths selects the powerbars whose terms are in the selected paths
     */
    setSelectedPowerbars(selectedPaths) {
        const selectedPowerbarsTerms = new Set();
        const selectedPowerbarsList = new Set();
        selectedPaths.forEach(path => {
            const currentPath = path.length <= this.level ? path : path.slice(path.length - this.level);
            let powerBar = currentPath.length > 1 ? this.getPowerbar(currentPath[0].fieldValue, currentPath[1].fieldValue) :
                this.getPowerbar(currentPath[0].fieldValue, 'root');
            if (powerBar !== null) {
                powerBar.isSelected = true;
                powerBar.classSuffix = this.SELECTED_BAR;
                if (this.useColorService) {
                    const rgbaColor = tinycolor(this.colorService.getColor(powerBar.term, this.keysToColors, this.colorsSaturationWeight)).toRgb();
                    powerBar.color = this.getPowerbarColor(rgbaColor);
                }
            }
            else {
                powerBar = currentPath.length > 1 ? new PowerBar(currentPath[0].fieldValue, currentPath[1].fieldValue, 0) :
                    new PowerBar(currentPath[0].fieldValue, 'root', 0);
                powerBar.path = currentPath;
                powerBar.progression = 0;
                powerBar.isSelected = true;
                powerBar.classSuffix = this.SELECTED_NO_MOUNTED_BAR;
            }
            selectedPowerbarsTerms.add(powerBar.term);
            this.addSelectedPowerbarToList(powerBar, selectedPowerbarsList);
        });
        this.selectedPowerbarsTerms = selectedPowerbarsTerms;
        this.selectedPowerbarsSet = this.sortSelectedPowerBars(selectedPowerbarsList);
        this.unselectAllButNotSelectedBars();
    }
    onKeyUp(searchText) {
        this.searchedTerm.next(searchText);
    }
    setOperator(op) {
        if (this.filterOperator.value !== op) {
            this.filterOperator.value = op;
            this.filterOperatorEvent.next(op);
        }
    }
    clearSelection() {
        this.powerBarsList.forEach(powerBar => {
            powerBar.classSuffix = this.NEUTRAL_STATE;
            powerBar.isSelected = false;
        });
    }
    addSelectedPowerbarToList(powerBar, selectedPowerbarsList) {
        // add powerbar to selectedPowerbarsList
        this.removePowerbarFromSelectedOnes(powerBar, selectedPowerbarsList);
        selectedPowerbarsList.add(powerBar);
    }
    populatePowerbars() {
        this.powerBarsList = this.fetchPowerbarsList(this.level, this.inputData);
    }
    fetchPowerbarsList(level, data, powerBarsList, recursivityCount, path) {
        if (recursivityCount === undefined) {
            recursivityCount = 0;
        }
        if (!powerBarsList) {
            powerBarsList = new Array();
        }
        // Each powerbar has a path attribute to the parrent node
        if (!path) {
            path = new Array();
        }
        if (recursivityCount < level - 1) {
            data.children.forEach(child => {
                const currentPath = [];
                Object.assign(currentPath, path);
                currentPath.push({ fieldName: child.fieldName, fieldValue: child.fieldValue });
                this.fetchPowerbarsList(level, child, powerBarsList, ++recursivityCount, currentPath);
            });
        }
        else {
            data.children.forEach(child => {
                const currentPath = [];
                Object.assign(currentPath, path);
                currentPath.push({ fieldName: child.fieldName, fieldValue: child.fieldValue });
                if (!child.isOther) {
                    const powerBar = new PowerBar(child.fieldValue, data.fieldValue, child.metricValue);
                    currentPath.reverse();
                    powerBar.path = currentPath;
                    if (this.useColorService) {
                        const rgbaColor = tinycolor(this.colorService.getColor(powerBar.term, this.keysToColors, this.colorsSaturationWeight)).toRgb();
                        powerBar.color = this.getPowerbarColor(rgbaColor);
                    }
                    if (this.useColorFromData) {
                        powerBar.color = child.color.toString().startsWith('#') ? child.color.toString() : '#'.concat(child.color.toString());
                    }
                    powerBarsList.push(powerBar);
                }
            });
            return powerBarsList;
        }
    }
    populateSelectedPowerbars() {
        if (this.selectedPowerbarsTerms !== undefined && this.selectedPowerbarsTerms.size > 0) {
            this.setSelectedPowerbars(this.selectedPaths);
        }
    }
    calculateAllPowerBarsProgression() {
        // TODO : Manage correctly when count == NaN
        let sum = 0;
        // calculate the sum
        this.powerBarsList.forEach(powerBar => {
            if (powerBar.count.toString() === 'NaN') {
                powerBar.count = 0;
            }
            sum += powerBar.count;
        });
        this.selectedPowerbarsSet.forEach(selectedPowerBar => {
            if (selectedPowerBar.count.toString() === 'NaN') {
                selectedPowerBar.count = 0;
            }
            if (this.getPowerbar(selectedPowerBar.term, selectedPowerBar.parentTerm) === null) {
                sum += selectedPowerBar.count;
            }
        });
        // calculate progression
        this.powerBarsList.forEach(powerBar => {
            powerBar.progression = powerBar.count / sum * 100;
            if (powerBar.progression !== 0 && powerBar.progression !== 100) {
                powerBar.progression += 1;
            }
            powerBar.progression = Math.min(powerBar.progression, 100);
        });
        this.selectedPowerbarsSet.forEach(selectedPowerBar => {
            selectedPowerBar.progression = selectedPowerBar.count / sum * 100;
            if (selectedPowerBar.progression !== 0 && selectedPowerBar.progression !== 100) {
                selectedPowerBar.progression += 1;
            }
            selectedPowerBar.progression = Math.min(selectedPowerBar.progression, 100);
        });
    }
    unselectAllButNotSelectedBars() {
        if (this.selectedPowerbarsTerms.size === 0) {
            this.selectedPowerbarsSet = new Set();
            this.clearSelection();
        }
        else {
            this.powerBarsList.forEach(powerBar => {
                if (!this.selectedPowerbarsTerms.has(powerBar.term)) {
                    powerBar.classSuffix = this.UNSELECTED_BAR;
                    powerBar.isSelected = false;
                }
            });
        }
    }
    // Sort the selected PowerBars decreasingly. And recalculate the progression of the bars in this array.
    sortSelectedPowerBars(selectedPowerbarsList) {
        const selectedPowerbarsArray = Array.from(selectedPowerbarsList);
        const sortedSelectedPowerbarsList = new Set();
        selectedPowerbarsArray.forEach(powerBar => {
            sortedSelectedPowerbarsList.add(powerBar);
        });
        return sortedSelectedPowerbarsList;
    }
    // removes the powerbar that has the same term in selectedPowerbarsList but not the same instance
    removePowerbarFromSelectedOnes(powerBar, selectedPowerbarsList) {
        let powerbarToRemove;
        selectedPowerbarsList.forEach(selectedPowerbar => {
            if (selectedPowerbar.term === powerBar.term) {
                powerbarToRemove = selectedPowerbar;
            }
        });
        selectedPowerbarsList.delete(powerbarToRemove);
    }
    /**
     * @description Gets the powerbar by its term and the term of it's parent node
     *
     */
    getPowerbar(powerbarTerm, powerbarParentTerm) {
        let foundPowerbar = null;
        this.powerBarsList.forEach(powerbar => {
            if (powerbar.term === powerbarTerm && powerbar.parentTerm === powerbarParentTerm) {
                foundPowerbar = powerbar;
            }
        });
        return foundPowerbar;
    }
    getPowerbarColor(rgbaColor) {
        return 'rgba(' + [rgbaColor.r, rgbaColor.g, rgbaColor.b, 0.7].join(',') + ')';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PowerbarsComponent, deps: [{ token: i1.ArlasColorService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: PowerbarsComponent, selector: "arlas-powerbars", inputs: { inputData: "inputData", level: "level", powerbarTitle: "powerbarTitle", unit: "unit", customizedCssClass: "customizedCssClass", selectedPaths: "selectedPaths", displayFilterField: "displayFilterField", keysToColors: "keysToColors", colorsSaturationWeight: "colorsSaturationWeight", useColorService: "useColorService", useColorFromData: "useColorFromData", chartWidth: "chartWidth", scrollable: "scrollable", filterOperator: "filterOperator", missingLeafEvent: "missingLeafEvent", numberShorteningPrecision: "numberShorteningPrecision", groupSelections: "groupSelections", selectWithCheckbox: "selectWithCheckbox" }, outputs: { filterOperatorEvent: "filterOperatorEvent", selectedPowerBarEvent: "selectedPowerBarEvent", searchedTerm: "searchedTerm" }, usesOnChanges: true, ngImport: i0, template: "<div [style.width.px]=\"!!chartWidth ? chartWidth : 'unset'\">\n  <div class=\"tools\">\n    <div *ngIf=\"!displayFilterField\" class=\"powerbars--title\">{{powerbarTitle | translate}}</div>\n    <div class=\"powerbars--search\" *ngIf=\"displayFilterField\">\n      <form (keydown.enter)=\"$event.preventDefault()\">\n        <mat-form-field class=\"powerbars--search-field\">\n          <input #searchText type=\"text\" autocomplete=\"off\" placeholder=\"{{powerbarTitle | translate}}\" matInput\n            class=\"powerbars--search-input\" (keyup)=\"onKeyUp(searchText.value)\" name=\"search\">\n        </mat-form-field>\n      </form>\n    </div>\n    <ng-container *ngIf=\"filterOperator\">\n      <div *ngIf=\"filterOperator?.display\" class=\"include_exclude\">\n        <div class=\"operation\" [class.operation--selected]=\"filterOperator?.value === 'Eq'\" (click)=\"setOperator('Eq')\">{{'include' | translate}}</div> <!-- //NOSONAR -->\n        <div class=\"operation\" [class.operation--selected]=\"filterOperator?.value === 'Neq'\" (click)=\"setOperator('Neq')\">{{'exclude' | translate}}</div> <!-- //NOSONAR -->\n      </div>\n      <div *ngIf=\"!filterOperator?.display && filterOperator?.value === 'Neq'\" class=\"include_exclude\">\n        <div class=\"operation exclude\">{{'exclude' | translate}}</div>\n      </div>\n    </ng-container>\n  </div>\n\n  <div class=\"powerbars--container\" [class.powerbars--container__scrollable]=\"scrollable\" [ngClass]=\"customizedCssClass\">\n    <ng-container *ngIf=\"groupSelections\">\n      <div *ngIf=\"selectedPowerbarsSet.size !== 0\" [class.powerbar-selected-scrollable]=\"scrollable\"\n        [style.min-height.px]=\"selectedPowerbarsSet.size > 5 ? 131 : selectedPowerbarsSet.size * 26\">\n        <div *ngFor=\"let selectedPowerbar of selectedPowerbarsSet\">\n          <arlas-powerbar\n            [unit]=\"unit\"\n            [powerbar]=\"selectedPowerbar\"\n            [useColorFromData]=\"useColorFromData\"\n            [useColorService]=\"useColorService\"\n            [hideSelected]=\"false\"\n            [selectWithCheckbox]=\"selectWithCheckbox\"\n            [numberShorteningPrecision]=\"numberShorteningPrecision\"\n            (onCheckEvent)=\"clickOnPowerbar(selectedPowerbar)\"\n            (onClickEvent)=\"clickOnPowerbar(selectedPowerbar)\"\n          ></arlas-powerbar>\n        </div>\n      </div>\n    </ng-container>\n\n    <div [class.powerbar-list-scrollable]=\"scrollable\">\n      <div *ngFor=\"let powerbar of powerBarsList\">\n        <arlas-powerbar\n          [unit]=\"unit\"\n          [powerbar]=\"powerbar\"\n          [useColorFromData]=\"useColorFromData\"\n          [useColorService]=\"useColorService\"\n          [numberShorteningPrecision]=\"numberShorteningPrecision\"\n          [selectWithCheckbox]=\"selectWithCheckbox\"\n          [hideSelected]=\"groupSelections\"\n          (onCheckEvent)=\"clickOnPowerbar(powerbar)\"\n          (onClickEvent)=\"clickOnPowerbar(powerbar)\"\n        ></arlas-powerbar>\n      </div>\n    </div>\n  </div>\n</div>", styles: ["@charset \"UTF-8\";.tools .powerbars--search .mat-mdc-form-field{width:100%}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mdc-text-field--filled{background-color:unset}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mat-mdc-form-field-focus-overlay{opacity:0}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mdc-text-field{padding:unset}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mat-mdc-form-field-infix{font-size:14px;min-height:unset;padding-top:0!important;padding-bottom:0!important}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mat-mdc-form-field-subscript-wrapper{display:none}.tools .include_exclude{display:flex;align-items:baseline}.tools .include_exclude .operation{font-size:10px;color:#aaa;border-radius:3px;margin-right:5px;cursor:pointer;padding-bottom:5px}.tools .include_exclude .operation--selected{color:#555;font-weight:700}.tools .include_exclude .exclude{color:#555;cursor:unset}.powerbars--container{height:100%;overflow-y:auto;overflow-x:hidden;padding-bottom:8px}.powerbars--container__scrollable{display:flex;flex-direction:column;max-height:255px}.powerbars--container .powerbar-selected-scrollable{max-height:131px;border-bottom:1px solid rgb(209,209,209);overflow-y:auto;overflow-x:clip;padding-bottom:2px;padding-right:5px}.powerbars--container .powerbar-list-scrollable{overflow-y:auto;overflow-x:clip;padding-right:5px;padding-bottom:5px}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "component", type: i5.PowerbarComponent, selector: "arlas-powerbar", inputs: ["powerbar", "numberShorteningPrecision", "unit", "useColorService", "useColorFromData", "hideSelected", "selectWithCheckbox"], outputs: ["onCheckEvent", "onClickEvent"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PowerbarsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-powerbars', template: "<div [style.width.px]=\"!!chartWidth ? chartWidth : 'unset'\">\n  <div class=\"tools\">\n    <div *ngIf=\"!displayFilterField\" class=\"powerbars--title\">{{powerbarTitle | translate}}</div>\n    <div class=\"powerbars--search\" *ngIf=\"displayFilterField\">\n      <form (keydown.enter)=\"$event.preventDefault()\">\n        <mat-form-field class=\"powerbars--search-field\">\n          <input #searchText type=\"text\" autocomplete=\"off\" placeholder=\"{{powerbarTitle | translate}}\" matInput\n            class=\"powerbars--search-input\" (keyup)=\"onKeyUp(searchText.value)\" name=\"search\">\n        </mat-form-field>\n      </form>\n    </div>\n    <ng-container *ngIf=\"filterOperator\">\n      <div *ngIf=\"filterOperator?.display\" class=\"include_exclude\">\n        <div class=\"operation\" [class.operation--selected]=\"filterOperator?.value === 'Eq'\" (click)=\"setOperator('Eq')\">{{'include' | translate}}</div> <!-- //NOSONAR -->\n        <div class=\"operation\" [class.operation--selected]=\"filterOperator?.value === 'Neq'\" (click)=\"setOperator('Neq')\">{{'exclude' | translate}}</div> <!-- //NOSONAR -->\n      </div>\n      <div *ngIf=\"!filterOperator?.display && filterOperator?.value === 'Neq'\" class=\"include_exclude\">\n        <div class=\"operation exclude\">{{'exclude' | translate}}</div>\n      </div>\n    </ng-container>\n  </div>\n\n  <div class=\"powerbars--container\" [class.powerbars--container__scrollable]=\"scrollable\" [ngClass]=\"customizedCssClass\">\n    <ng-container *ngIf=\"groupSelections\">\n      <div *ngIf=\"selectedPowerbarsSet.size !== 0\" [class.powerbar-selected-scrollable]=\"scrollable\"\n        [style.min-height.px]=\"selectedPowerbarsSet.size > 5 ? 131 : selectedPowerbarsSet.size * 26\">\n        <div *ngFor=\"let selectedPowerbar of selectedPowerbarsSet\">\n          <arlas-powerbar\n            [unit]=\"unit\"\n            [powerbar]=\"selectedPowerbar\"\n            [useColorFromData]=\"useColorFromData\"\n            [useColorService]=\"useColorService\"\n            [hideSelected]=\"false\"\n            [selectWithCheckbox]=\"selectWithCheckbox\"\n            [numberShorteningPrecision]=\"numberShorteningPrecision\"\n            (onCheckEvent)=\"clickOnPowerbar(selectedPowerbar)\"\n            (onClickEvent)=\"clickOnPowerbar(selectedPowerbar)\"\n          ></arlas-powerbar>\n        </div>\n      </div>\n    </ng-container>\n\n    <div [class.powerbar-list-scrollable]=\"scrollable\">\n      <div *ngFor=\"let powerbar of powerBarsList\">\n        <arlas-powerbar\n          [unit]=\"unit\"\n          [powerbar]=\"powerbar\"\n          [useColorFromData]=\"useColorFromData\"\n          [useColorService]=\"useColorService\"\n          [numberShorteningPrecision]=\"numberShorteningPrecision\"\n          [selectWithCheckbox]=\"selectWithCheckbox\"\n          [hideSelected]=\"groupSelections\"\n          (onCheckEvent)=\"clickOnPowerbar(powerbar)\"\n          (onClickEvent)=\"clickOnPowerbar(powerbar)\"\n        ></arlas-powerbar>\n      </div>\n    </div>\n  </div>\n</div>", styles: ["@charset \"UTF-8\";.tools .powerbars--search .mat-mdc-form-field{width:100%}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mdc-text-field--filled{background-color:unset}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mat-mdc-form-field-focus-overlay{opacity:0}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mdc-text-field{padding:unset}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mat-mdc-form-field-infix{font-size:14px;min-height:unset;padding-top:0!important;padding-bottom:0!important}.tools .powerbars--search .mat-mdc-form-field ::ng-deep .mat-mdc-form-field-subscript-wrapper{display:none}.tools .include_exclude{display:flex;align-items:baseline}.tools .include_exclude .operation{font-size:10px;color:#aaa;border-radius:3px;margin-right:5px;cursor:pointer;padding-bottom:5px}.tools .include_exclude .operation--selected{color:#555;font-weight:700}.tools .include_exclude .exclude{color:#555;cursor:unset}.powerbars--container{height:100%;overflow-y:auto;overflow-x:hidden;padding-bottom:8px}.powerbars--container__scrollable{display:flex;flex-direction:column;max-height:255px}.powerbars--container .powerbar-selected-scrollable{max-height:131px;border-bottom:1px solid rgb(209,209,209);overflow-y:auto;overflow-x:clip;padding-bottom:2px;padding-right:5px}.powerbars--container .powerbar-list-scrollable{overflow-y:auto;overflow-x:clip;padding-right:5px;padding-bottom:5px}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}\n"] }]
        }], ctorParameters: () => [{ type: i1.ArlasColorService }], propDecorators: { inputData: [{
                type: Input
            }], level: [{
                type: Input
            }], powerbarTitle: [{
                type: Input
            }], unit: [{
                type: Input
            }], customizedCssClass: [{
                type: Input
            }], selectedPaths: [{
                type: Input
            }], displayFilterField: [{
                type: Input
            }], keysToColors: [{
                type: Input
            }], colorsSaturationWeight: [{
                type: Input
            }], useColorService: [{
                type: Input
            }], useColorFromData: [{
                type: Input
            }], chartWidth: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], filterOperator: [{
                type: Input
            }], missingLeafEvent: [{
                type: Input
            }], numberShorteningPrecision: [{
                type: Input
            }], groupSelections: [{
                type: Input
            }], selectWithCheckbox: [{
                type: Input
            }], filterOperatorEvent: [{
                type: Output
            }], selectedPowerBarEvent: [{
                type: Output
            }], searchedTerm: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,