/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { Column } from '../model/column';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/select";
import * as i4 from "@angular/material/core";
import * as i5 from "@angular/forms";
export class ResultFilterComponent {
    constructor() {
        /**
         * @Input
         * @description A map of columns to filter : key = column (or field) name & value = field value.
         * This components sets directly this map.
         */
        this.filtersMap = new Map();
        /**
         * @Input
         * @description The values of dropdown list.
         */
        this.dropdownValues = new Array();
        /**
         * @Output
         * @description Emits the map of filtered columns and the filters values (fieldName-fieldValue map).
         */
        this.setFiltersEvent = new Subject();
        /**
         * @Output
         * @description Emits the column on change to notify the main component.
         */
        this.columnChanged = new Subject();
        this.selected = new Array();
    }
    ngOnInit() {
    }
    ngOnChanges(changes) {
        if (changes['filtersMap'] !== undefined) {
            if (changes['filtersMap'].currentValue !== undefined) {
                if (changes['filtersMap'].currentValue !== changes['filtersMap'].previousValue) {
                    if (changes['filtersMap'].currentValue.get(this.column.fieldName) !== undefined) {
                        if (this.inputValue !== changes['filtersMap'].currentValue.get(this.column.fieldName)) {
                            this.inputValue = changes['filtersMap'].currentValue.get(this.column.fieldName);
                            this.selected = new Array();
                            this.inputValue.split(',').forEach(v => this.selected.push(v));
                        }
                    }
                    else {
                        this.inputValue = '';
                        this.selected = new Array();
                    }
                }
            }
        }
    }
    setFilterOnKeyEnter(event) {
        event.target.blur();
    }
    // Update the map of the filtered fields. If a filter is empty, the correspondant field is removed from the map
    setFilter() {
        if (this.inputValue === undefined || this.inputValue === '' || this.inputValue === null) {
            if (this.filtersMap.has(this.column.fieldName)) {
                this.filtersMap.delete(this.column.fieldName);
                this.setFiltersEvent.next(this.filtersMap);
                this.columnChanged.next(this.column);
            }
        }
        else {
            this.filtersMap.set(this.column.fieldName, this.inputValue);
            this.setFiltersEvent.next(this.filtersMap);
            this.columnChanged.next(this.column);
        }
    }
    selectionChange(event) {
        if (event.value.length > 0) {
            this.filtersMap.set(event.source.id, event.value.join(','));
            this.setFiltersEvent.next(this.filtersMap);
            this.columnChanged.next(this.column);
        }
        else {
            if (this.filtersMap.has(event.source.id)) {
                this.filtersMap.delete(event.source.id);
                this.setFiltersEvent.next(this.filtersMap);
                this.columnChanged.next(this.column);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultFilterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: ResultFilterComponent, selector: "[arlas-result-filter]", inputs: { column: "column", filtersMap: "filtersMap", inputValue: "inputValue", dropdownValues: "dropdownValues" }, outputs: { setFiltersEvent: "setFiltersEvent", columnChanged: "columnChanged" }, usesOnChanges: true, ngImport: i0, template: "<input *ngIf=\"!column?.isIdField&&(dropdownValues?.length==0||dropdownValues==null)\" type=\"text\" class=\"form-control resultlist__header--filters resultlist__header--filters__{{column?.fieldName}}\" (blur)=\"setFilter()\" (keyup.enter)=\"setFilterOnKeyEnter($event)\"\n    [(ngModel)]=\"inputValue\">\n\n<mat-form-field *ngIf=\"!column?.isIdField&&dropdownValues?.length>0\" \n    class=\"form-control resultlist__header--filters resultlist__header--filters--dropdown resultlist__header--filters__{{column?.fieldName}}\" \n    [style.width.px]=\"column?.width-10\">\n    <mat-select [id]=\"column?.fieldName\" placeholder=\"\"  multiple class=\"resultlist__dropdown-select\" [style.width.px]=\"column?.width-20\" (selectionChange)=\"selectionChange($event)\" [value]=\"selected\">\n        <mat-option  class=\"resultlist__dropdown-option\" *ngFor=\"let value of dropdownValues\"  [value]=\"value\">{{value}}</mat-option>\n    </mat-select>\n</mat-form-field>\n", styles: [".resultlist__header--filters{margin:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "component", type: i3.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i4.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultFilterComponent, decorators: [{
            type: Component,
            args: [{ selector: '[arlas-result-filter]', template: "<input *ngIf=\"!column?.isIdField&&(dropdownValues?.length==0||dropdownValues==null)\" type=\"text\" class=\"form-control resultlist__header--filters resultlist__header--filters__{{column?.fieldName}}\" (blur)=\"setFilter()\" (keyup.enter)=\"setFilterOnKeyEnter($event)\"\n    [(ngModel)]=\"inputValue\">\n\n<mat-form-field *ngIf=\"!column?.isIdField&&dropdownValues?.length>0\" \n    class=\"form-control resultlist__header--filters resultlist__header--filters--dropdown resultlist__header--filters__{{column?.fieldName}}\" \n    [style.width.px]=\"column?.width-10\">\n    <mat-select [id]=\"column?.fieldName\" placeholder=\"\"  multiple class=\"resultlist__dropdown-select\" [style.width.px]=\"column?.width-20\" (selectionChange)=\"selectionChange($event)\" [value]=\"selected\">\n        <mat-option  class=\"resultlist__dropdown-option\" *ngFor=\"let value of dropdownValues\"  [value]=\"value\">{{value}}</mat-option>\n    </mat-select>\n</mat-form-field>\n", styles: [".resultlist__header--filters{margin:0}\n"] }]
        }], ctorParameters: () => [], propDecorators: { column: [{
                type: Input
            }], filtersMap: [{
                type: Input
            }], inputValue: [{
                type: Input
            }], dropdownValues: [{
                type: Input
            }], setFiltersEvent: [{
                type: Output
            }], columnChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,