/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Directive, ElementRef, HostListener, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { ModeEnum } from '../utils/enumerations/modeEnum';
import * as i0 from "@angular/core";
export class ResultScrollDirective {
    constructor(el) {
        this.el = el;
        this.nextDataEvent = new Subject();
        this.previousDataEvent = new Subject();
        this.visibleItems = new Subject();
        this.lastScrollTop = 0;
        this.previousFirstId = null;
        this.previousLastId = null;
        this.scrolledProgramatically = false;
    }
    ngOnChanges(changes) {
        if (changes['items']) {
            /** New data is loaded : we reset all the variables */
            this.lastScrollTop = 0;
            this.previousFirstId = null;
            this.previousLastId = null;
            /** Repositioning the scroll bar to the top*/
            this.el.nativeElement.scrollTop = 0;
        }
        if (changes['resultMode']) {
            this.adjustScrollToMode();
        }
        if (changes['scrollOptions']) {
            if (this.scrollOptions.maintainScrollUpPosition === true && this.items) {
                /**
                 * Maintains the scroll position after loading rows in the top of the list
                 */
                this.el.nativeElement.scrollTop = this.el.nativeElement.scrollHeight * this.scrollOptions.nbLines / this.items.length;
            }
            if (this.scrollOptions.maintainScrollDownPosition === true && this.items) {
                /**
                 * Maintains the scroll position after loading rows in the bottom of the list
                 */
                this.el.nativeElement.scrollTop = this.el.nativeElement.scrollHeight -
                    this.el.nativeElement.scrollHeight * this.scrollOptions.nbLines / this.items.length - this.tbodyHeight / 2;
            }
        }
    }
    /** This method allows to stay around the same items when switching the mode grid/list */
    adjustScrollToMode() {
        if (this.items) {
            if (this.resultMode === ModeEnum.grid) {
                this.nbScrolledLines = Math.round(this.top / this.height * this.items.length);
                if (this.nbScrolledLines % this.nbGridColumns !== 0) {
                    this.nbScrolledLines = Math.max(this.nbScrolledLines - this.nbScrolledLines % this.nbGridColumns, 0);
                }
            }
            else {
                this.nbScrolledLines = Math.round(this.top / this.height * this.items.length);
            }
            this.triggerScrollEvent();
        }
    }
    // When scrolling, the position of the scroll bar is calculated
    // Loading the previous/next data is triggered when [nbEndScrollItems] items are left while scrolling up/down respectively
    onScroll(event) {
        this.tbodyHeight = this.el.nativeElement.offsetHeight;
        const scrollTop = this.el.nativeElement.scrollTop;
        const scrollHeight = this.el.nativeElement.scrollHeight;
        const nLastLines = this.nbLinesBeforeFetch / ((this.nbGridColumns - 1) * this.resultMode + 1);
        const dataLength = this.items.length / ((this.nbGridColumns - 1) * this.resultMode + 1);
        const downPositionTrigger = scrollHeight * (1 - nLastLines / dataLength - this.tbodyHeight / scrollHeight);
        const upPositionTrigger = scrollHeight * nLastLines / dataLength;
        if (this.scrolledProgramatically) {
            this.el.nativeElement.scrollTop = scrollHeight * this.nbScrolledLines / this.items.length;
            this.scrolledProgramatically = false;
        }
        this.top = scrollTop;
        this.height = scrollHeight;
        if (this.previousFirstId) {
            if (this.previousFirstId !== this.items[0].identifier || (this.fetchState && this.fetchState.endListDown)) {
                this.previousFirstId = null;
            }
        }
        if (this.previousLastId) {
            if (this.previousLastId !== this.items[this.items.length - 1].identifier || (this.fetchState && this.fetchState.endListUp)) {
                this.previousLastId = null;
            }
        }
        if (scrollTop >= downPositionTrigger && this.isScrollingDown(scrollTop)) {
            /** The following condition answers the question : when should I stop emitting `nextDataEvent` even if i reach the end of the scroll?
             * The answer is: when `nextDataEvent` is emitted and there is no new items loaded.
             * In other words if `downPositionTrigger` is reached and the last identifier we remember
             * from the previous scoll is different from the actual last identifer,
             * it means `nextDataEvent` still can be emitted
            **/
            if (this.items.length > 0 && this.items[this.items.length - 1].identifier !== this.previousLastId && this.fetchState
                && !this.fetchState.endListDown) {
                this.previousLastId = this.items[this.items.length - 1].identifier;
                this.previousFirstId = this.items[0].identifier;
                this.nextDataEvent.next(this.items[this.items.length - 1].itemData);
            }
        }
        if (scrollTop <= upPositionTrigger && this.isScrollingUp(scrollTop)) {
            /** Same logic as the condition above but on the top of the list this time. */
            if (this.items.length > 0 && this.items[0].identifier !== this.previousFirstId && this.fetchState && !this.fetchState.endListUp) {
                this.previousFirstId = this.items[0].identifier;
                this.previousLastId = this.items[this.items.length - 1].identifier;
                this.previousDataEvent.next(this.items[0].itemData);
            }
        }
        this.lastScrollTop = this.el.nativeElement.scrollTop;
        this.visibleItems.next(this.items.filter(i => this.isElementInViewport(document.getElementById(i.identifier))));
    }
    isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth));
    }
    isScrollingDown(scrollTop) {
        if (scrollTop > this.lastScrollTop) {
            return true;
        }
    }
    isScrollingUp(scrollTop) {
        if (scrollTop < this.lastScrollTop) {
            return true;
        }
    }
    triggerScrollEvent() {
        this.scrolledProgramatically = true;
        this.el.nativeElement.scrollTop = 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultScrollDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: ResultScrollDirective, selector: "[arlasResultScroll]", inputs: { items: "items", nbLinesBeforeFetch: "nbLinesBeforeFetch", nbGridColumns: "nbGridColumns", resultMode: "resultMode", fetchState: "fetchState", scrollOptions: "scrollOptions" }, outputs: { nextDataEvent: "nextDataEvent", previousDataEvent: "previousDataEvent", visibleItems: "visibleItems" }, host: { listeners: { "scroll": "onScroll($event)" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[arlasResultScroll]',
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { items: [{
                type: Input
            }], nbLinesBeforeFetch: [{
                type: Input
            }], nbGridColumns: [{
                type: Input
            }], resultMode: [{
                type: Input
            }], fetchState: [{
                type: Input
            }], scrollOptions: [{
                type: Input
            }], nextDataEvent: [{
                type: Output
            }], previousDataEvent: [{
                type: Output
            }], visibleItems: [{
                type: Output
            }], onScroll: [{
                type: HostListener,
                args: ['scroll', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,