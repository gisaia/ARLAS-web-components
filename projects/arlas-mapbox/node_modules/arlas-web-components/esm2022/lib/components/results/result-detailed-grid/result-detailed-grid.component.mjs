/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { ChangeDetectorRef, Component, ElementRef, Input, Output, ViewChild } from '@angular/core';
import { FullScreenViewer, ImageViewer } from 'iv-viewer';
import { Subject } from 'rxjs';
import { Item } from '../model/item';
import { PROTECTED_IMAGE_HEADER } from '../utils/results.utils';
import { HttpClient } from '@angular/common/http';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/icon";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/tooltip";
import * as i6 from "@angular/material/progress-spinner";
import * as i7 from "../result-detailed-item/result-detailed-item.component";
import * as i8 from "@ngx-translate/core";
export class ResultDetailedGridComponent {
    constructor(changeDetectorRef, http) {
        this.changeDetectorRef = changeDetectorRef;
        this.http = http;
        /**
         * @constant
         */
        this.SHOW_DETAILS = marker('Show details');
        /**
         * @constant
         */
        this.VIEW_IMAGE = marker('View in full screen');
        /**
         * @constant
         */
        this.SHOW_IMAGE = marker('Show image');
        /**
         * @constant
         */
        this.CLOSE_DETAILS = marker('Close details');
        this.fullScreenViewer = new FullScreenViewer();
        /**
         * @Input
         * @description Whether display group with no detail.
         */
        this.showEmptyGroup = false;
        /**
         * @Input : Angular
         * @description Whether to use a http request to query detailed image instead of relying on img tag internal mechanism.
         */
        this.useHttp = false;
        /**
         * @Input : Angular
         * @description List of active actions per item.
        */
        this.activatedActionsPerItem = new Map();
        /**
         * @Output
         * @description Emits the event of applying the specified action on the specified item.
         */
        this.actionOnItemEvent = new Subject();
        /**
       * @Output
       * @description Emits the event of closing details.
       */
        this.closeDetail = new Subject();
        this.isDetailedDataShowed = false;
        /**
         * @description Whether the request for the image is being processed
         */
        this.isLoading = false;
        /**
         * @description In the case of multiple images, indicates which one is selected
         */
        this.currentImageIndex = 0;
        /**
         * @description Whether the viewer is in full screen mode
         */
        this.isFullScreen = false;
    }
    ngOnDestroy() {
        this.destroyViewer(true);
    }
    ngOnChanges(changes) {
        if (changes['gridTile']) {
            if (this.viewer) {
                this.viewer = this.viewer.destroy();
            }
            this.isFullScreen = false;
            this.currentImageIndex = 0;
            this.getImage();
        }
    }
    getImage() {
        this.imgSrc = undefined;
        if (!this.gridTile || (this.gridTile && (!this.gridTile.urlImages || this.gridTile.urlImages.length === 0))) {
            return;
        }
        if (this.useHttp) {
            this.isLoading = true;
            this.http.get(this.gridTile.urlImages[this.currentImageIndex], { headers: { [PROTECTED_IMAGE_HEADER]: 'true' }, responseType: 'blob' })
                .subscribe({
                next: (image) => {
                    const reader = new FileReader();
                    reader.addEventListener('load', () => {
                        this.imgSrc = reader.result;
                        this.gridTile.imageEnabled = true;
                        this.isLoading = false;
                        this.resetViewer();
                    }, false);
                    if (image) {
                        reader.readAsDataURL(image);
                    }
                }, error: (err) => {
                    console.error(err);
                    this.isLoading = false;
                }
            });
        }
        else {
            this.imgSrc = this.gridTile.urlImages[this.currentImageIndex];
            this.gridTile.imageEnabled = true;
            this.resetViewer();
        }
    }
    resetViewer() {
        if (this.viewer) {
            this.viewer = this.viewer.destroy();
        }
        setTimeout(() => {
            if (this.isFullScreen) {
                this.fullScreenViewer.show(this.imgSrc);
            }
            else {
                if (!!this.imageViewer && !this.viewer) {
                    this.viewer = new ImageViewer(this.imageViewer.nativeElement);
                }
            }
        }, 0);
    }
    destroyViewer(isComponentDestroy) {
        if (this.viewer) {
            this.viewer = this.viewer.destroy();
        }
        if (isComponentDestroy && this.fullScreenViewer) {
            this.fullScreenViewer.destroy();
        }
        // Add a delay to allow for the viewer to be destroyed properly
        // before removing it due to visibility rules in the template
        setTimeout(() => {
            this.imgSrc = undefined;
        }, 0);
    }
    showHideDetailedData() {
        this.isDetailedDataShowed = !this.isDetailedDataShowed;
        this.changeDetectorRef.detectChanges();
        this.resetViewer();
    }
    closeDetailedData() {
        this.isDetailShowed = false;
        this.closeDetail.next(true);
    }
    // Emits the action on this ResultDetailedItem to the parent (ResultList)
    triggerActionOnItem(actionOnItem) {
        this.actionOnItemEvent.next(actionOnItem);
    }
    showOverlay() {
        this.isFullScreen = true;
        this.resetViewer();
        let viewerContainer;
        const fullScreenContainer = document.querySelector('.iv-fullscreen-container');
        const actionsInfos = document.getElementsByClassName('viewer_actions-infos');
        if (!!actionsInfos && !!actionsInfos[0]) {
            viewerContainer = actionsInfos[0].parentElement;
            const elements = actionsInfos.length;
            for (let i = 0; i < elements; i++) {
                // The element is removed from the list once retrieved
                fullScreenContainer.appendChild(actionsInfos.item(0));
            }
        }
        document.querySelector('.iv-fullscreen-close').addEventListener('click', () => {
            this.isFullScreen = false;
            if (viewerContainer) {
                const actionsInfosFullScreen = fullScreenContainer.getElementsByClassName('viewer_actions-infos');
                const elements = actionsInfosFullScreen.length;
                for (let i = 0; i < elements; i++) {
                    // The element is removed from the list once retrieved
                    viewerContainer.appendChild(actionsInfosFullScreen.item(0));
                }
            }
            this.resetViewer();
        });
    }
    onPrevious() {
        this.currentImageIndex -= 1;
        if (this.currentImageIndex < 0) {
            this.currentImageIndex = this.gridTile.urlImages.length - 1;
        }
        this.getImage();
    }
    onNext() {
        this.currentImageIndex += 1;
        if (this.currentImageIndex >= this.gridTile.urlImages.length) {
            this.currentImageIndex = 0;
        }
        this.getImage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultDetailedGridComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: ResultDetailedGridComponent, selector: "arlas-result-detailed-grid", inputs: { gridTile: "gridTile", detailWidth: "detailWidth", detailHeight: "detailHeight", idFieldName: "idFieldName", isDetailShowed: "isDetailShowed", showEmptyGroup: "showEmptyGroup", useHttp: "useHttp", activatedActionsPerItem: "activatedActionsPerItem", detailedDataRetriever: "detailedDataRetriever" }, outputs: { actionOnItemEvent: "actionOnItemEvent", closeDetail: "closeDetail" }, viewQueries: [{ propertyName: "imageViewer", first: true, predicate: ["image_detail"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"resultgrid\" *ngIf=isDetailShowed>\n  <div class=\"resultgrid--container\">\n    <div [hidden]=\"isDetailedDataShowed\">\n      <div class=\"resultgrid__img\" [style.height.px]=\"detailHeight\" [style.width.px]=\"detailWidth\">\n        <img class=\"image_view\" #image_detail *ngIf=\"gridTile.imageEnabled\" src=\"{{imgSrc}}\" (error)=\"destroyViewer()\">\n        <img *ngIf=\"(!gridTile.imageEnabled || !imgSrc) && !isLoading\" src=\"{{noViewImg}}\">\n        <mat-progress-spinner *ngIf=\"isLoading\" [color]=\"'accent'\" [diameter]=\"detailHeight < detailWidth ? detailHeight / 2 : detailWidth / 2\" [mode]=\"'indeterminate'\"></mat-progress-spinner>\n      </div>\n\n      <button mat-icon-button class=\"viewer_actions-infos navigate-button previous\" *ngIf=\"gridTile.urlImages && gridTile.urlImages.length > 1\" matTooltip=\"{{'Previous image' | translate}}\" (click)=\"onPrevious()\">\n        <mat-icon>keyboard_arrow_left</mat-icon>\n      </button>\n      <div class=\"viewer_actions-infos description\" *ngIf=\"gridTile.descriptions\">{{ gridTile.descriptions[currentImageIndex] }}</div>\n      <button mat-icon-button class=\"viewer_actions-infos navigate-button next\" *ngIf=\"gridTile.urlImages && gridTile.urlImages.length > 1\" matTooltip=\"{{'Next image' | translate}}\" (click)=\"onNext()\">\n        <mat-icon>keyboard_arrow_right</mat-icon>\n      </button>\n\n      <div class=\"resultgrid__info-button\">\n        <button [disabled]=\"!gridTile.imageEnabled || isLoading\" id=\"view_image_gridmode_btn\" matTooltip=\"{{VIEW_IMAGE | translate}}\"\n          class=\"resultgrid__info-view-button\" mat-mini-fab (click)=\"showOverlay()\">\n          <mat-icon class=\"resultgrid__info_outline\">fit_screen</mat-icon>\n        </button>\n        <button id=\"show_details_gridmode_btn\" matTooltip=\"{{SHOW_DETAILS | translate}}\" class=\"resultgrid__info-show-button\" mat-mini-fab color=\"primary\" (click)=\"showHideDetailedData()\">\n          <mat-icon class=\"resultgrid__info_outline\">info_outline</mat-icon>\n        </button>\n        <button id=\"close_details_gridmode_btn\" matTooltip=\"{{CLOSE_DETAILS | translate}}\" class=\"resultgrid__info-close-button\" mat-mini-fab color=\"primary\" (click)=\"closeDetailedData()\">\n            <mat-icon class=\"resultgrid__close\">close</mat-icon>\n        </button>\n      </div>\n    </div>\n\n    <div [hidden]=\"!isDetailedDataShowed\">\n      <div class=\"resultgrid__info-button\">\n        <button id=\"show_image_gridmode_btn\" matTooltip=\"{{SHOW_IMAGE | translate}}\" class=\"resultgrid__info-show-button\" mat-mini-fab color=\"primary\" (click)=\"showHideDetailedData()\">\n          <mat-icon class=\"resultgrid__image\">image</mat-icon>\n        </button>\n        <button id=\"close_details_gridmode_btn\" matTooltip=\"{{CLOSE_DETAILS | translate}}\" class=\"resultgrid__info-close-button\" mat-mini-fab color=\"primary\" (click)=\"closeDetailedData()\">\n          <mat-icon class=\"resultgrid__close\">close</mat-icon>\n        </button>\n      </div>\n      <div arlas-result-detailed-item class=\"resultgrid--detailed-item\"\n        [rowItem]=\"gridTile\" [containerType]=\"'grid'\" [idFieldName]=\"idFieldName\"\n        [detailedDataRetriever]=\"detailedDataRetriever\"\n        [activatedActionsPerItem]=\"activatedActionsPerItem\"\n        [style.width.px]=\"detailWidth\" [style.height.px]=\"detailHeight\"\n        [showEmptyGroup]= \"showEmptyGroup\" (actionOnItemEvent)=\"triggerActionOnItem($event)\">\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.resultgrid__img{overflow-y:hidden;overflow-x:hidden;text-align:center;vertical-align:middle;background-color:#000;display:flex;justify-content:center;align-items:center}.viewer_actions-infos{position:absolute;bottom:5px;z-index:999}.viewer_actions-infos.description{color:#fff;background-color:#6d6d6d99;padding:0 5px;left:50%;transform:translate(-50%)}.viewer_actions-infos.navigate-button{height:24px;width:24px;background-color:#fff;border:1px solid #a1a1a1;border-radius:4px;cursor:pointer;display:flex;align-items:center;justify-content:center;padding:0}.viewer_actions-infos.navigate-button.previous{left:5px}.viewer_actions-infos.navigate-button.next{right:5px}.viewer_actions-infos.navigate-button ::ng-deep .mat-icon{overflow:unset}.resultgrid{width:100%;height:100%;font-family:Roboto,Helvetica Neue,sans-serif;text-align:left;vertical-align:middle}.resultgrid--container{width:100%;height:100%;position:relative}.resultgrid__info-button{position:absolute;top:5px;right:0;background-color:transparent;z-index:1}.resultgrid__info-button ::ng-deep .mat-mdc-mini-fab[disabled]{color:gray}.resultgrid__info-view-button,.resultgrid__info-show-button,.resultgrid__info-close-button{top:5px;right:15px;background-color:#fff;color:#000;width:24px;height:24px;margin-right:5px}.image_view{max-height:100%;max-width:100%;cursor:pointer}.full-screen{height:100vh;width:100vw}::ng-deep .iv-image-mode{display:flex;height:100%!important;width:100%!important}::-webkit-scrollbar{width:6px;height:6px;background-color:#fff}::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#fff}::-webkit-scrollbar-thumb{background-color:#555}.resultgrid__info_outline,.resultgrid__close,.resultgrid__image{font-size:20px;width:20px;height:20px}.resultgrid-overlay{width:100vw;height:100vh;position:absolute;top:0;left:0;background-color:#555;opacity:.5}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i4.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "component", type: i4.MatMiniFabButton, selector: "button[mat-mini-fab]", exportAs: ["matButton"] }, { kind: "directive", type: i5.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "component", type: i6.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "component", type: i7.ResultDetailedItemComponent, selector: "[arlas-result-detailed-item]", inputs: ["detailColspan", "idFieldName", "containerType", "rowItem", "showEmptyGroup", "detailedDataRetriever", "activatedActionsPerItem"], outputs: ["actionOnItemEvent"] }, { kind: "pipe", type: i8.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultDetailedGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-result-detailed-grid', template: "<div class=\"resultgrid\" *ngIf=isDetailShowed>\n  <div class=\"resultgrid--container\">\n    <div [hidden]=\"isDetailedDataShowed\">\n      <div class=\"resultgrid__img\" [style.height.px]=\"detailHeight\" [style.width.px]=\"detailWidth\">\n        <img class=\"image_view\" #image_detail *ngIf=\"gridTile.imageEnabled\" src=\"{{imgSrc}}\" (error)=\"destroyViewer()\">\n        <img *ngIf=\"(!gridTile.imageEnabled || !imgSrc) && !isLoading\" src=\"{{noViewImg}}\">\n        <mat-progress-spinner *ngIf=\"isLoading\" [color]=\"'accent'\" [diameter]=\"detailHeight < detailWidth ? detailHeight / 2 : detailWidth / 2\" [mode]=\"'indeterminate'\"></mat-progress-spinner>\n      </div>\n\n      <button mat-icon-button class=\"viewer_actions-infos navigate-button previous\" *ngIf=\"gridTile.urlImages && gridTile.urlImages.length > 1\" matTooltip=\"{{'Previous image' | translate}}\" (click)=\"onPrevious()\">\n        <mat-icon>keyboard_arrow_left</mat-icon>\n      </button>\n      <div class=\"viewer_actions-infos description\" *ngIf=\"gridTile.descriptions\">{{ gridTile.descriptions[currentImageIndex] }}</div>\n      <button mat-icon-button class=\"viewer_actions-infos navigate-button next\" *ngIf=\"gridTile.urlImages && gridTile.urlImages.length > 1\" matTooltip=\"{{'Next image' | translate}}\" (click)=\"onNext()\">\n        <mat-icon>keyboard_arrow_right</mat-icon>\n      </button>\n\n      <div class=\"resultgrid__info-button\">\n        <button [disabled]=\"!gridTile.imageEnabled || isLoading\" id=\"view_image_gridmode_btn\" matTooltip=\"{{VIEW_IMAGE | translate}}\"\n          class=\"resultgrid__info-view-button\" mat-mini-fab (click)=\"showOverlay()\">\n          <mat-icon class=\"resultgrid__info_outline\">fit_screen</mat-icon>\n        </button>\n        <button id=\"show_details_gridmode_btn\" matTooltip=\"{{SHOW_DETAILS | translate}}\" class=\"resultgrid__info-show-button\" mat-mini-fab color=\"primary\" (click)=\"showHideDetailedData()\">\n          <mat-icon class=\"resultgrid__info_outline\">info_outline</mat-icon>\n        </button>\n        <button id=\"close_details_gridmode_btn\" matTooltip=\"{{CLOSE_DETAILS | translate}}\" class=\"resultgrid__info-close-button\" mat-mini-fab color=\"primary\" (click)=\"closeDetailedData()\">\n            <mat-icon class=\"resultgrid__close\">close</mat-icon>\n        </button>\n      </div>\n    </div>\n\n    <div [hidden]=\"!isDetailedDataShowed\">\n      <div class=\"resultgrid__info-button\">\n        <button id=\"show_image_gridmode_btn\" matTooltip=\"{{SHOW_IMAGE | translate}}\" class=\"resultgrid__info-show-button\" mat-mini-fab color=\"primary\" (click)=\"showHideDetailedData()\">\n          <mat-icon class=\"resultgrid__image\">image</mat-icon>\n        </button>\n        <button id=\"close_details_gridmode_btn\" matTooltip=\"{{CLOSE_DETAILS | translate}}\" class=\"resultgrid__info-close-button\" mat-mini-fab color=\"primary\" (click)=\"closeDetailedData()\">\n          <mat-icon class=\"resultgrid__close\">close</mat-icon>\n        </button>\n      </div>\n      <div arlas-result-detailed-item class=\"resultgrid--detailed-item\"\n        [rowItem]=\"gridTile\" [containerType]=\"'grid'\" [idFieldName]=\"idFieldName\"\n        [detailedDataRetriever]=\"detailedDataRetriever\"\n        [activatedActionsPerItem]=\"activatedActionsPerItem\"\n        [style.width.px]=\"detailWidth\" [style.height.px]=\"detailHeight\"\n        [showEmptyGroup]= \"showEmptyGroup\" (actionOnItemEvent)=\"triggerActionOnItem($event)\">\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.resultgrid__img{overflow-y:hidden;overflow-x:hidden;text-align:center;vertical-align:middle;background-color:#000;display:flex;justify-content:center;align-items:center}.viewer_actions-infos{position:absolute;bottom:5px;z-index:999}.viewer_actions-infos.description{color:#fff;background-color:#6d6d6d99;padding:0 5px;left:50%;transform:translate(-50%)}.viewer_actions-infos.navigate-button{height:24px;width:24px;background-color:#fff;border:1px solid #a1a1a1;border-radius:4px;cursor:pointer;display:flex;align-items:center;justify-content:center;padding:0}.viewer_actions-infos.navigate-button.previous{left:5px}.viewer_actions-infos.navigate-button.next{right:5px}.viewer_actions-infos.navigate-button ::ng-deep .mat-icon{overflow:unset}.resultgrid{width:100%;height:100%;font-family:Roboto,Helvetica Neue,sans-serif;text-align:left;vertical-align:middle}.resultgrid--container{width:100%;height:100%;position:relative}.resultgrid__info-button{position:absolute;top:5px;right:0;background-color:transparent;z-index:1}.resultgrid__info-button ::ng-deep .mat-mdc-mini-fab[disabled]{color:gray}.resultgrid__info-view-button,.resultgrid__info-show-button,.resultgrid__info-close-button{top:5px;right:15px;background-color:#fff;color:#000;width:24px;height:24px;margin-right:5px}.image_view{max-height:100%;max-width:100%;cursor:pointer}.full-screen{height:100vh;width:100vw}::ng-deep .iv-image-mode{display:flex;height:100%!important;width:100%!important}::-webkit-scrollbar{width:6px;height:6px;background-color:#fff}::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#fff}::-webkit-scrollbar-thumb{background-color:#555}.resultgrid__info_outline,.resultgrid__close,.resultgrid__image{font-size:20px;width:20px;height:20px}.resultgrid-overlay{width:100vw;height:100vh;position:absolute;top:0;left:0;background-color:#555;opacity:.5}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.HttpClient }], propDecorators: { gridTile: [{
                type: Input
            }], detailWidth: [{
                type: Input
            }], detailHeight: [{
                type: Input
            }], idFieldName: [{
                type: Input
            }], isDetailShowed: [{
                type: Input
            }], showEmptyGroup: [{
                type: Input
            }], useHttp: [{
                type: Input
            }], activatedActionsPerItem: [{
                type: Input
            }], detailedDataRetriever: [{
                type: Input
            }], actionOnItemEvent: [{
                type: Output
            }], closeDetail: [{
                type: Output
            }], imageViewer: [{
                type: ViewChild,
                args: ['image_detail', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,