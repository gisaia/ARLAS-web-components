/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Input } from '@angular/core';
import { NUMBER_FORMAT_CHAR, numberToShortValue } from '../componentsUtils';
import * as metricJsonSchema from './metric.schema.json';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../pipes/format-number/format-number.pipe";
import * as i3 from "@ngx-translate/core";
/**
 * This component will contain a phrase composed of 3 parts
 * - beforeValue = `Speed average : `
 * - value = `25`
 * - afterValue = ` km/h`.
 * The phrase that will be represented in this card is : **Speed average : 25 km/h**
 *
 */
export class MetricComponent {
    constructor() {
        this.beforeValue = '';
        this.afterValue = '';
        this.valuePrecision = 2;
        /**
         * Whether to shorten the metric value
         */
        this.shortValue = false;
        /**
         * Whether to display a '~' before the metric value
         */
        this.approximateValue = false;
        /**
         * @Input : Angular
         * @description Chart's width. If not specified, the chart takes the component's container width.
         */
        this.chartWidth = null;
        this.displayedValue = '0';
        this.NUMBER_FORMAT_CHAR = NUMBER_FORMAT_CHAR;
    }
    ngOnInit() {
        if (this.value) {
            this.setDisplayedValue();
        }
    }
    ngOnChanges(changes) {
        if (changes['value']) {
            if (this.value !== undefined && !Number.isNaN(this.value)) {
                this.setDisplayedValue();
            }
            else {
                /** '-' will be set when `value` is undefined or not a number */
                this.displayedValue = '-';
            }
        }
    }
    /**
     * @returns Json schema of the donut component for configuration
     */
    static getMetricJsonSchema() {
        return metricJsonSchema;
    }
    static round(value, precision) {
        if (precision === 0 || precision === undefined) {
            return Math.round(value);
        }
        else {
            const multiplier = Math.pow(10, precision * 10 || 0);
            return +(Math.round(value * multiplier) / multiplier).toFixed(precision);
        }
    }
    /**
     * Sets the value displayed in html
     */
    setDisplayedValue() {
        if (this.shortValue) {
            this.displayedValue = numberToShortValue(this.value, this.valuePrecision);
        }
        else {
            this.displayedValue = MetricComponent.round(this.value, this.valuePrecision);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: MetricComponent, selector: "arlas-metric", inputs: { beforeValue: "beforeValue", value: "value", afterValue: "afterValue", customizedCssClass: "customizedCssClass", valuePrecision: "valuePrecision", shortValue: "shortValue", approximateValue: "approximateValue", chartWidth: "chartWidth" }, usesOnChanges: true, ngImport: i0, template: "<div [style.width.px]=\"!!chartWidth ? chartWidth : 'unset'\" class=\"arlas-metric\" [ngClass]=\"customizedCssClass\" >\n  <div class=\"arlas-metric__title\">\n    {{beforeValue | translate}}\n  </div>\n  <div class=\"arlas-metric__value\">\n    <span class=\"arlas-metric__value--approximmate\" *ngIf=\"approximateValue\"> ~ </span>\n    {{this.displayedValue | formatNumber:NUMBER_FORMAT_CHAR}}\n  </div>\n  <div class=\"arlas-metric__description\">\n    {{afterValue | translate}}\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.arlas-metric{line-height:normal;padding-top:10px;padding-bottom:10px}.arlas-metric__title{text-align:center;white-space:nowrap;display:flex;justify-content:center;font-size:16px}.arlas-metric__value{font-weight:400;font-size:25px;padding:5px 0;white-space:nowrap;display:flex;justify-content:center}.arlas-metric__description{font-size:16px;font-weight:300;display:flex;justify-content:center}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i2.FormatNumberPipe, name: "formatNumber" }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MetricComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-metric', template: "<div [style.width.px]=\"!!chartWidth ? chartWidth : 'unset'\" class=\"arlas-metric\" [ngClass]=\"customizedCssClass\" >\n  <div class=\"arlas-metric__title\">\n    {{beforeValue | translate}}\n  </div>\n  <div class=\"arlas-metric__value\">\n    <span class=\"arlas-metric__value--approximmate\" *ngIf=\"approximateValue\"> ~ </span>\n    {{this.displayedValue | formatNumber:NUMBER_FORMAT_CHAR}}\n  </div>\n  <div class=\"arlas-metric__description\">\n    {{afterValue | translate}}\n  </div>\n</div>\n", styles: ["@charset \"UTF-8\";.arlas-metric{line-height:normal;padding-top:10px;padding-bottom:10px}.arlas-metric__title{text-align:center;white-space:nowrap;display:flex;justify-content:center;font-size:16px}.arlas-metric__value{font-weight:400;font-size:25px;padding:5px 0;white-space:nowrap;display:flex;justify-content:center}.arlas-metric__description{font-size:16px;font-weight:300;display:flex;justify-content:center}\n"] }]
        }], ctorParameters: () => [], propDecorators: { beforeValue: [{
                type: Input
            }], value: [{
                type: Input
            }], afterValue: [{
                type: Input
            }], customizedCssClass: [{
                type: Input
            }], valuePrecision: [{
                type: Input
            }], shortValue: [{
                type: Input
            }], approximateValue: [{
                type: Input
            }], chartWidth: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,