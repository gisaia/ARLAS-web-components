/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class BaseCollectionService {
}
export class AwcCollectionService extends BaseCollectionService {
    getAllUnits() {
        return [];
    }
    _initUnits() { }
    _initDisplayNames() { }
    getDisplayName(collectionName) {
        return collectionName;
    }
    getDisplayFieldName(fieldName) {
        return fieldName;
    }
    getUnit(collectionName) {
        return collectionName;
    }
}
export class CollectionService {
    constructor(baseCollectionService) {
        this.baseCollectionService = baseCollectionService;
    }
    getDisplayName(collectionName) {
        return this.baseCollectionService.getDisplayName(collectionName);
    }
    ;
    getDisplayFieldName(fieldName) {
        return this.baseCollectionService.getDisplayFieldName(fieldName);
    }
    ;
    getUnit(collectionName) {
        return this.baseCollectionService.getUnit(collectionName);
    }
    ;
    getAllUnits() {
        return this.baseCollectionService.getAllUnits();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CollectionService, deps: [{ token: BaseCollectionService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CollectionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CollectionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: BaseCollectionService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYXJsYXMtY29tcG9uZW50cy9zcmMvbGliL3NlcnZpY2VzL2NvbGxlY3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQyxNQUFNLE9BQWdCLHFCQUFxQjtDQU8xQztBQUVELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxxQkFBcUI7SUFDdEQsV0FBVztRQUNoQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDUyxVQUFVLEtBQUssQ0FBQztJQUNoQixpQkFBaUIsS0FBSyxDQUFDO0lBRTFCLGNBQWMsQ0FBQyxjQUFzQjtRQUMxQyxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRU0sbUJBQW1CLENBQUMsU0FBaUI7UUFDMUMsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxjQUFzQjtRQUNuQyxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUFNRCxNQUFNLE9BQU8saUJBQWlCO0lBRTVCLFlBQTJCLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0lBQ3ZFLENBQUM7SUFDTSxjQUFjLENBQUMsY0FBc0I7UUFDMUMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFBQSxDQUFDO0lBRUssbUJBQW1CLENBQUMsU0FBaUI7UUFDMUMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUFBLENBQUM7SUFFSyxPQUFPLENBQUMsY0FBc0I7UUFDbkMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFBQSxDQUFDO0lBRUssV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxDQUFDOytHQWxCVSxpQkFBaUI7bUhBQWpCLGlCQUFpQixjQUZoQixNQUFNOzs0RkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VDb2xsZWN0aW9uU2VydmljZSB7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfaW5pdFVuaXRzKCk7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfaW5pdERpc3BsYXlOYW1lcygpO1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RGlzcGxheU5hbWUoY29sbGVjdGlvbk5hbWU6IHN0cmluZyk6IHN0cmluZztcbiAgcHVibGljIGFic3RyYWN0IGdldERpc3BsYXlGaWVsZE5hbWUoZmllbGROYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRVbml0KGNvbGxlY3Rpb25OYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRBbGxVbml0cygpOiBhbnlbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEF3Y0NvbGxlY3Rpb25TZXJ2aWNlIGV4dGVuZHMgQmFzZUNvbGxlY3Rpb25TZXJ2aWNlIHtcbiAgcHVibGljIGdldEFsbFVuaXRzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcHJvdGVjdGVkIF9pbml0VW5pdHMoKSB7IH1cbiAgcHJvdGVjdGVkIF9pbml0RGlzcGxheU5hbWVzKCkgeyB9XG5cbiAgcHVibGljIGdldERpc3BsYXlOYW1lKGNvbGxlY3Rpb25OYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb2xsZWN0aW9uTmFtZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREaXNwbGF5RmllbGROYW1lKGZpZWxkTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZmllbGROYW1lO1xuICB9XG5cbiAgcHVibGljIGdldFVuaXQoY29sbGVjdGlvbk5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25OYW1lO1xuICB9XG59XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvblNlcnZpY2Uge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VDb2xsZWN0aW9uU2VydmljZTogQmFzZUNvbGxlY3Rpb25TZXJ2aWNlKSB7XG4gIH1cbiAgcHVibGljIGdldERpc3BsYXlOYW1lKGNvbGxlY3Rpb25OYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmJhc2VDb2xsZWN0aW9uU2VydmljZS5nZXREaXNwbGF5TmFtZShjb2xsZWN0aW9uTmFtZSk7XG4gIH07XG5cbiAgcHVibGljIGdldERpc3BsYXlGaWVsZE5hbWUoZmllbGROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmJhc2VDb2xsZWN0aW9uU2VydmljZS5nZXREaXNwbGF5RmllbGROYW1lKGZpZWxkTmFtZSk7XG4gIH07XG5cbiAgcHVibGljIGdldFVuaXQoY29sbGVjdGlvbk5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYmFzZUNvbGxlY3Rpb25TZXJ2aWNlLmdldFVuaXQoY29sbGVjdGlvbk5hbWUpO1xuICB9O1xuXG4gIHB1YmxpYyBnZXRBbGxVbml0cygpIHtcbiAgICByZXR1cm4gdGhpcy5iYXNlQ29sbGVjdGlvblNlcnZpY2UuZ2V0QWxsVW5pdHMoKTtcbiAgfVxuXG59XG5cblxuXG4iXX0=