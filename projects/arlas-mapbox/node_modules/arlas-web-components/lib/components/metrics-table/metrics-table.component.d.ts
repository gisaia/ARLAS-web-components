import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { KeyValue } from '@angular/common';
import { PowerBar } from '../powerbars/model/powerbar';
import { ArlasColorService } from '../../services/color.generator.service';
import { FilterOperator } from '../../tools/models/term-filters';
import { MetricsTable, MetricsTableHeader, MetricsTableRow } from './model/metrics-table';
import * as i0 from "@angular/core";
export declare class MetricsTableComponent implements OnInit, OnChanges {
    private readonly colorService;
    private readonly cdr;
    /**
     * @Input : Angular
     * @description Data to build the table.
     */
    metricsTable: MetricsTable;
    /**
       * @Input : Angular
       * @description Options about how to apply filters on metrics table
       * - value : The default value.
       *           if 'Eq', the selected line is included in the ARLAS filter.
       *           if 'Neq', the selected line is excluded in the ARLAS filter.
       * - display: Whether to display a switcher between 'Eq' and 'Neq' or keep the default operator all the time
       */
    filterOperator: FilterOperator;
    /**
     * @Output : Angular
     * @description Emits the filter operator
     */
    filterOperatorEvent: EventEmitter<'Neq' | 'Eq'>;
    /**
     * @Input : Angular
     * @description selected terms list.
     */
    selectedTerms: string[];
    /**
     * @Input : Angular
     * @description List of [key, color] couples that associates a hex color to each key
     */
    keysToColors: Array<[string, string]>;
    /**
     * @Input : Angular
     * @description Whether to allow colorizing the bar according to its term or not using keysToColors
     */
    useColorService: boolean;
    /**
     * @Input : Angular
     * @description Choose how to apply colors to the table. By column : all the bars in same column will have the same color.
     * By row : all the bars in the same row, will have the same color.
     */
    applyColorTo: 'column' | 'row';
    /**
     * @Input : Angular
     * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
     * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
     * Therefore saturation of generated colors will be within this tightened scale.
     */
    colorsSaturationWeight: any;
    /**
     * @description Allow to select a row by a checkbox
     */
    selectWithCheckbox: boolean;
    /**
     * @description Allow to select display mode for headers.
     */
    headerDisplayMode: 'chip' | 'title' | 'full';
    /**
     * @description Normalise bars progression based on the maximum value of each column OR of the whole table
     */
    normaliseBy: 'column' | 'table';
    showRowField: boolean;
    onSelect: EventEmitter<Set<string>>;
    protected header: ElementRef;
    /** Map of <term-list.of.powerbars.corresponding.to.this.term.> */
    protected powerBarsMap: Map<string, PowerBar[]>;
    protected selectedKeys: Set<string>;
    protected selectedRows: Map<string, MetricsTableRow>;
    protected pendingMode: boolean;
    protected titleAreDifferent: boolean;
    protected uniqueTitles: MetricsTableHeader[];
    constructor(colorService: ArlasColorService, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    buildHeaders(): void;
    private updateSelectedTermWithDefaultValue;
    buildPowerBars(): void;
    updateSelection(keys: string[]): void;
    clearAll(): void;
    addTermToSelectedList(key: string): void;
    updateSelectedTerm(key: string): void;
    updateSelectedRow(key: string): void;
    togglePendingMode(): void;
    trackByFn(index: any, item: any): any;
    originalOrder: (a: KeyValue<string, MetricsTableRow>, b: KeyValue<string, MetricsTableRow>) => number;
    private defineColor;
    private getPowerbarColor;
    static getJsonSchema(): Object;
    setOperator(op: 'Eq' | 'Neq'): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MetricsTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MetricsTableComponent, "arlas-metrics-table", never, { "metricsTable": { "alias": "metricsTable"; "required": false; }; "filterOperator": { "alias": "filterOperator"; "required": false; }; "selectedTerms": { "alias": "selectedTerms"; "required": false; }; "keysToColors": { "alias": "keysToColors"; "required": false; }; "useColorService": { "alias": "useColorService"; "required": false; }; "applyColorTo": { "alias": "applyColorTo"; "required": false; }; "colorsSaturationWeight": { "alias": "colorsSaturationWeight"; "required": false; }; "selectWithCheckbox": { "alias": "selectWithCheckbox"; "required": false; }; "headerDisplayMode": { "alias": "headerDisplayMode"; "required": false; }; "normaliseBy": { "alias": "normaliseBy"; "required": false; }; "showRowField": { "alias": "showRowField"; "required": false; }; }, { "filterOperatorEvent": "filterOperatorEvent"; "onSelect": "onSelect"; }, never, never, false, never>;
}
