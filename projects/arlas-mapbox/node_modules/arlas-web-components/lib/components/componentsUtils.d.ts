import { UntypedFormControl } from '@angular/forms';
import { Observable } from 'rxjs';
export declare function formatNumber(x: any, formatChar?: string): string;
export declare const NUMBER_FORMAT_CHAR = "NUMBER_FORMAT_CHAR";
export declare function numberToShortValue(number: number, p?: number): string;
export declare const DEFAULT_SHORTENING_PRECISION = 2;
export declare function getKeys(map: any): Array<string>;
export declare function getValues(map: any): Array<any>;
export declare abstract class ColorGeneratorLoader {
    abstract keysToColors: Array<[string, string]>;
    abstract colorsSaturationWeight: number;
    abstract changekeysToColors$: Observable<void>;
    /**
     * This method generates a determistic color from the given key, a list of [key, color] and a saturation weight.
     * @param key The text from which the color is generated
     * @param externalkeysToColors List of [key, color] couples that associates a hex color to each key.
     * @param colorsSaturationWeight Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a factor (between 0 and 1) that
     * tightens this scale to [(1-colorsSaturationWeight), 1]. Therefore all generated colors saturation will be within this scale.
     */
    abstract getColor(key: string, externalkeysToColors: Array<[string, string]>, externalColorsSaturationWeight: number): string;
    abstract getTextColor(color: any): string;
}
export declare class AwcColorGeneratorLoader extends ColorGeneratorLoader {
    changekeysToColors$: Observable<void>;
    keysToColors: Array<[string, string]>;
    colorsSaturationWeight: number;
    /**
     * This method generates a determistic color from the given key, a list of [key, color] and a saturation weight.
     * - First the method checks if the [key,color] is defined in externalkeysToColors and returns the correspondant color.
     *
     * - If externalkeysToColors parameter is undefined, then the method checks if the [key,color] is defined in
     * keysToColors attribute of the loader
     *
     * - If neither `externalkeysToColors` parameter nor `keysToColors` attribute are defined, then the color is generated using a determist
     * method.
     * - For this determinist method, the generated colors saturation scale can be tightened using `externalColorsSaturationWeight` parameter
     * - If the parameter `externalColorsSaturationWeight` is undefined, the attribute `colorsSaturationWeight` is used instead.
     * @param key The text from which the color is generated
     * @param externalkeysToColors List of [key, color] couples that associates a hex color to each key.
     * @param colorsSaturationWeight Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a factor (between 0 and 1) that
     * tightens this scale to [(1-colorsSaturationWeight), 1]. Therefore all generated colors saturation will be within this scale.
     */
    getColor(key: string, externalKeysToColors: Array<[string, string]>, externalColorsSaturationWeight: number): string;
    getTextColor(color: any): string;
    private getHexColor;
}
export declare class SelectFormControl extends UntypedFormControl {
    filteredOptions: Array<string>;
    syncOptions: Array<string>;
    constructor(formState: any, label: string, options: Array<string>);
    setSyncOptions(newOptions: Array<string>): void;
}
/** FROM V15.0.0 layer ids look like 'arlas_id:NAME:timestamp
   * This pipe extracts the 'NAME' in that id
   */
export declare function getLayerName(id: string): string;
