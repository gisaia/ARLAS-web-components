import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Item } from '../model/item';
import { Action } from '../utils/results.utils';
import { Subject } from 'rxjs';
import { DetailedDataRetriever } from '../utils/detailed-data-retriever';
import { ResultlistNotifierService } from '../../../services/resultlist.notifier.service';
import * as i0 from "@angular/core";
/**
 * This component displays actions of an item.
 * - Actions are only displayed when we hover an item.
 * BUT
 * An action can be reversible. It means that this action has a reverse action.
 * - An example of reversible action:  Action => Add layer to map --///--  Reverse Action => Remove layer from map.
 * - When you click on a reversible action for the first time, the action become 'activated'.
 * - Activated actions should be displayed all the time on the resultlist (in list and grid view).
 * - When you click on an 'activated' action, the action is reversed and goes back to its initial state.
 * - Actions that are not activated are only displayed when we hover an item.
 * ALSO
 * When a reversible action has `fields` attribute. It means that this action needs the existence of the fields values in order to be executed.
 * - If one of the fields values is absent in the current item, the action will be hidden.
 */
export declare class ResultActionsComponent implements OnInit, OnChanges, OnDestroy {
    private notifier;
    /** The item which actions are managed by this component. */
    item: Item;
    /** Width of the component. */
    width: number;
    /** Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions. */
    activatedActionsPerItem: Map<string, Set<string>>;
    /** This data retriever allows to fetch the actions of each items + check if an action should be hidden. */
    detailedDataRetriever: DetailedDataRetriever;
    /** Whether to stop propagation at click/hover of the action. */
    stopPropagation: boolean;
    /** Whether to display the actions as icon buttons or text buttons. */
    mode: 'icon' | 'text';
    /** Emits an event when the action is clicked on it. */
    actionOnItemEvent: Subject<Action>;
    /** Destroy subscriptions. */
    private _onDestroy$;
    actions: Action[];
    constructor(notifier: ResultlistNotifierService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * An action can be reversible. It means that this action has a reverse action.
     * - When you click on a reversible action for the first time, the action become 'activated'.
     * - Activated actions should be displayed all the time on the resultlist (in list and grid view).
     * - When you click on an 'activated' action, the action is reversed and goes back to its initial state.
     */
    triggerAction(event: Event, action: Action): void;
    /**
     * An action can be reversible. It means that this action has a reverse action.
     * - When you click on a reversible action for the first time, the action become 'activated'.
     * - Activated actions should be displayed all the time on the resultlist (in list and grid view).
     * - When you click on an 'activated' action, the action is reversed and goes back to its initial state.
     */
    private updateActions;
    /**
     * @description set the list of actions of an item
     * @param item
     */
    private setItemActions;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResultActionsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ResultActionsComponent, "arlas-result-actions", never, { "item": { "alias": "item"; "required": false; }; "width": { "alias": "width"; "required": false; }; "activatedActionsPerItem": { "alias": "activatedActionsPerItem"; "required": false; }; "detailedDataRetriever": { "alias": "detailedDataRetriever"; "required": false; }; "stopPropagation": { "alias": "stopPropagation"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; }, { "actionOnItemEvent": "actionOnItemEvent"; }, never, never, false, never>;
}
