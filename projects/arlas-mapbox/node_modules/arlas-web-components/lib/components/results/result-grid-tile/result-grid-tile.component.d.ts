import { OnInit } from '@angular/core';
import { MatTooltip } from '@angular/material/tooltip';
import { Subject } from 'rxjs';
import { Item } from '../model/item';
import { ItemComponent } from '../model/itemComponent';
import { DetailedDataRetriever } from '../utils/detailed-data-retriever';
import { ThumbnailFitEnum } from '../utils/enumerations/thumbnailFitEnum';
import { Action, ElementIdentifier, ResultListOptions } from '../utils/results.utils';
import * as i0 from "@angular/core";
export declare class ResultGridTileComponent extends ItemComponent implements OnInit {
    /**
     * @constant
     */
    SHOW_IMAGE: "Click to show details";
    cellTooltip: MatTooltip;
    /**
     * @Input
     * @description An object representing an Item .
     */
    gridTile: Item;
    /**
     * @Input
     * @description How to fit the thumbnail to the tile:
     * - `height` fit the height of the thumbnail.
     * - `width` fit the width of the thumbnail.
     * - `contain` fit the wholethumbnail.
     */
    thumbnailFit: ThumbnailFitEnum;
    /**
     * @Input
     * @description List of all selected items in the result-list.component.
     * This component sets directly this list.
     */
    selectedItems: Set<string>;
    /**
     * @Input
     * @description A detailed-data-retriever object that implements
     * DetailedDataRetriever interface.
     */
    detailedDataRetriever: DetailedDataRetriever;
    /**
     * @Input : Angular
     * @description An input to customize the resultlist behaviour
     */
    options: ResultListOptions;
    /**
    * @Input
    * @description Name of the id field.
    */
    idFieldName: string;
    /**
     * @Input : Angular
     * @description Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions.
    */
    activatedActionsPerItem: Map<string, Set<string>>;
    /**
    * @Input
    * @description Display or not big full info icon on the grid.
    */
    displayInfoIcon: boolean;
    /**
     * @Output
     * @description Emits the event of applying the specified action on the specified item.
     */
    actionOnItemEvent: Subject<{
        action: Action;
        elementidentifier: ElementIdentifier;
    }>;
    /**
     * @Output
     * @description Emits the list of selected items in result-list.component.
     */
    selectedItemsEvent: Subject<Set<string>>;
    /**
     * @Output
     * @description Emits the selected/unselected item.
     * @deprecated
     */
    selectedItemPositionEvent: Subject<Item>;
    /**
     * @Output
     * @description Emits the the item that it has been clicked on it.
     */
    clickedOnItemEvent: Subject<Item>;
    ThumbnailFitEnum: typeof ThumbnailFitEnum;
    constructor();
    /**
     * Hides the cell's tooltip when the mouse is over the attachements buttons
     * @param event mouseover event
     */
    hideCellTooltip(event: Event): void;
    /**
     * Shows the cell's tooltip when the mouse is over the tile
     */
    showCellTooltip(): void;
    ngOnInit(): void;
    setSelectedItem(): void;
    determinateItem(): void;
    setClickedOnItem(): void;
    triggerActionOnItem(action: Action): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResultGridTileComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ResultGridTileComponent, "arlas-result-grid-tile", never, { "gridTile": { "alias": "gridTile"; "required": false; }; "thumbnailFit": { "alias": "thumbnailFit"; "required": false; }; "selectedItems": { "alias": "selectedItems"; "required": false; }; "detailedDataRetriever": { "alias": "detailedDataRetriever"; "required": false; }; "options": { "alias": "options"; "required": false; }; "idFieldName": { "alias": "idFieldName"; "required": false; }; "activatedActionsPerItem": { "alias": "activatedActionsPerItem"; "required": false; }; "displayInfoIcon": { "alias": "displayInfoIcon"; "required": false; }; }, { "actionOnItemEvent": "actionOnItemEvent"; "selectedItemsEvent": "selectedItemsEvent"; "selectedItemPositionEvent": "selectedItemPositionEvent"; "clickedOnItemEvent": "clickedOnItemEvent"; }, never, never, false, never>;
}
