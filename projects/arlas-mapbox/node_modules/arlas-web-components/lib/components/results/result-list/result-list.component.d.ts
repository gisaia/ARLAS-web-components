import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, IterableDiffers, SimpleChanges } from '@angular/core';
import { OnChanges, OnInit } from '@angular/core';
import { MatButtonToggleChange } from '@angular/material/button-toggle';
import { MatSelectChange } from '@angular/material/select';
import { TranslateService } from '@ngx-translate/core';
import { Observable, Subject } from 'rxjs';
import { ArlasColorService } from '../../../services/color.generator.service';
import { Column } from '../model/column';
import { Item } from '../model/item';
import { DetailedDataRetriever } from '../utils/detailed-data-retriever';
import { CellBackgroundStyleEnum } from '../utils/enumerations/cellBackgroundStyleEnum';
import { ModeEnum } from '../utils/enumerations/modeEnum';
import { PageEnum } from '../utils/enumerations/pageEnum';
import { SortEnum } from '../utils/enumerations/sortEnum';
import { ThumbnailFitEnum } from '../utils/enumerations/thumbnailFitEnum';
import { Action, ElementIdentifier, FieldsConfiguration, ItemDataType, PageQuery, ResultListOptions } from '../utils/results.utils';
import { ResultlistNotifierService } from '../../../services/resultlist.notifier.service';
import * as i0 from "@angular/core";
/**
 * ResultList component allows to structure data in a filterable and sortable table.
 * Items can be represented as rows or grids and are multi-selectable.
 * For both list and grid modes, each item has detailed data that can be displayed in a togglable space.
 */
export declare class ResultListComponent implements OnInit, DoCheck, OnChanges, AfterViewInit {
    private el;
    private colorService;
    translate: TranslateService;
    private notifier;
    private cdr;
    /**
     * @constant
     */
    GEO_DISTANCE: string;
    /**
     * @constant
     */
    FILTER_ON: "Filter on";
    /**
     * @constant
     */
    GLOBAL_ACTIONS: "Global actions";
    /**
     * @constant
     */
    GEOSORT_ACTION: "Geo sort action";
    /**
     * @constant
     */
    GRID_MODE: "Grid mode";
    /**
     * @constant
     */
    LIST_MODE: "List mode";
    /**
     * @constant
     */
    CONTAIN_FIT: "Fit the whole thumbnail to the tile";
    /**
     * @constant
     */
    WIDTH_FIT: "Fit the thumbnail's width to the tile";
    /**
     * @constant
     */
    HEIGHT_FIT: "Fit the thumbnail's height to the tile";
    /**
     * @constant
     */
    GEOSORT_BUTTON: "Geo-sort";
    /**
     * @constant
     */
    COLUMN_ACTIONS_HEIGHT: number;
    /**
     * @constant
     */
    COLUMN_NAME_HEIGHT: number;
    /**
     * @constant
     */
    FILTERS_HEIGHT: number;
    /**
     * @constant
     */
    TAIL_HEIGHT: number;
    loadAnimationConfig: {
        animationType: string;
        backdropBackgroundColour: string;
        backdropBorderRadius: string;
        primaryColour: string;
        secondaryColour: string;
        tertiaryColour: string;
    };
    scrollOptions: {
        maintainScrollUpPosition: boolean;
        maintainScrollDownPosition: boolean;
        nbLines: number;
    };
    /**
     * @Input : Angular
     * @description An input to customize the resultlist
     */
    options: ResultListOptions;
    fetchState: {
        endListUp: boolean;
        endListDown: boolean;
    };
    /**
     * @Input : Angular
     * @description List of the fields displayed in the table (including the id field)
     * - fieldName : Name/path of the field to add to list
     * - columnName : Name of the field that will be displayed on the list column
     * - dataType : Unit of the field values if it exists (degree, percentage, etc)
     * - useColorService : Whether to colorize values on cells of the list with a color generated from the field value
     * NOTE : This list should include the ID field. It will be the id of each item
     */
    fieldsList: Array<{
        fieldName: string;
        columnName: string;
        dataType: string;
        useColorService?: boolean;
    }>;
    /**
     * @Input : Angular
     * @description List of fieldName-fieldValue map. Each map corresponds to a row/grid.
     * @note In order to apply `selectInBetween` method properly, this list must be ascendingly sorted on the item identifier.
     */
    rowItemList: Array<Map<string, ItemDataType>>;
    /**
     * @Input : Angular
     * @description A configuration object that sets id field, title field and urls
     * to images && thumbnails
     */
    fieldsConfiguration: FieldsConfiguration;
    /**
     * @Input : Angular
     * @description The table width. If not specified, the tableWidth value is
     * equal to container width.
     */
    tableWidth: number;
    /**
     * @Input : Angular
     * @description The number of items left on the list/grid when scrolling up or down upon which loading new data is triggered.
     * When scrolling up or down, once there is `nLastLines` items left at the top or bottom of the list, previous/next data is loaded.
     * @deprecated nLastLines is deprecated and used only if `nbLinesBeforeFetch` is not set
    */
    nLastLines: number;
    /**
     * @Input : Angular
     * @description The number of items left on the list/grid when scrolling up or down upon which loading new data is triggered.
     * When scrolling up or down, once there is `nbLinesBeforeFetch` items left at the top or bottom of the list, previous/next
     * data is loaded.
    */
    nbLinesBeforeFetch: number;
    /**
     * @Input : Angular
     * @description Height of the detail grid div (Grid Mode).
     */
    detailedGridHeight: number;
    /**
     * @Input : Angular
     * @description Number of grid columns (Grid Mode).
     */
    nbGridColumns: number;
    /**
     * @Input : Angular
     * @description List of actions to apply on the selected items.
     */
    globalActionsList: Action[];
    /**
     * @Input : Angular
     * @description A detailed-data-retriever object that implements
     * DetailedDataRetriever interface.
     */
    detailedDataRetriever: DetailedDataRetriever;
    /**
     * @Input : Angular
     * @description List of items ids that are in a indeterminated status.
     */
    indeterminatedItems: Set<string>;
    /**
     * @Input : Angular
     * @description List of items ids that are in a selected status.
    */
    selectedItems: Set<string>;
    /**
     * @Input : Angular
     * @description Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions.
    */
    activatedActionsPerItem: Map<string, Set<string>>;
    /**
     * @Input : Angular
     * @description List of items ids to be highlighted.
     */
    highlightItems: Set<string>;
    /**
     * @Input : Angular
     * @description Mode of representation : `list` or `grid`.
     */
    defautMode: ModeEnum;
    /**
   * @Input : Angular
   * @description Whether the body table is hidden or not.
   */
    isBodyHidden: boolean;
    /**
     * @Input : Angular
     * @description Whether filters on list are displayed.
     */
    displayFilters: boolean;
    /**
     * @Input : Angular
     * @description Whether the sort on the geometry is enabled.
     */
    isGeoSortEnabled: boolean;
    /**
     * @Input : Angular
     * @description Whether the sort on the geometry is activated
     */
    isGeoSortActivated: boolean;
    /**
     * @Input : Angular
     * @description The column that is currently sorted on
     */
    currentSortedColumn: Column;
    /**
     * @Input : Angular
     * @description A fieldName-fieldValue map of fields to filter.
     */
    filtersMap: Map<string, ItemDataType>;
    /**
     * @Input : Angular
     * @description A  map of fieldName- Observable of array value for dropdown filter
     */
    dropDownMapValues: Map<string, Observable<Array<string>>>;
    /**
     * @Input : Angular
     * @description A  boolean to show or hide thead of table
     */
    displayThead: boolean;
    /**
     * @Input : Angular
     * @description List of [key, color] couples that associates a hex color to each key
     */
    keysToColors: Array<[string, string]>;
    /**
     * @Input : Angular
     * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
     * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
     * Therefore saturation of generated colors will be within this tightened scale..
     */
    colorsSaturationWeight: number;
    /**
     * @Input : Angular
     * @description Whether to allow colorizing cells and the grid tile of the list.
     */
    useColorService: boolean;
    /**
     * @Input : Angular
      * @description The way the cell will be colorized: filled or outlined
     */
    cellBackgroundStyle: CellBackgroundStyleEnum;
    /**
     * @Input : Angular
     * @description A  item to show detail
     */
    selectedGridItem: Item;
    /**
     * @Input
     * @description Whether display group with no detail.
     */
    showEmptyGroup: boolean;
    /**
     * @Input
     * @description Whether display the detailled part in grid mode.
     */
    isDetailledGridOpen: boolean;
    /**
     * @Input
     * @description How to fit the thumbnail to the tile:
     * - `height` fit the height of the thumbnail.
     * - `width` fit the width of the thumbnail.
     * - `contain` fit the wholethumbnail.
     */
    thumbnailFit: ThumbnailFitEnum;
    /**
     * @Output : Angular
     * @description Emits the event of sorting data on the specified column.
     */
    sortColumnEvent: Subject<{
        fieldName: string;
        sortDirection: SortEnum;
    }>;
    /**
     * @Output : Angular
     * @description Emits the event of geo-sorting data.
     */
    geoSortEvent: Subject<string>;
    /**
     * @Output : Angular
     * @description Emits the event of geo-sorting data.
     */
    geoAutoSortEvent: Subject<boolean>;
    /**
     * @Output : Angular
     * @description Emits the list of items identifiers whose checkboxes are selected.
     */
    selectedItemsEvent: Subject<Array<string>>;
    /**
     * @Output : Angular
     * @description Emits one item identifier that is hovered..
     */
    consultedItemEvent: Subject<ElementIdentifier>;
    /**
     * @Output : Angular
     * @description Emits the item that is clicked on.
     */
    clickOnItemEvent: Subject<ElementIdentifier>;
    /**
     * @Output : Angular
     * @description Emits the filtred fields map (fieldName-fieldValue map).
     */
    setFiltersEvent: Subject<Map<string, ItemDataType>>;
    /**
     * @Output : Angular
     * @description Emits the request of more data to load. The emitted number is the number of times this event has been emitted.
     * @deprecated moreDataEvent can be replaced by `paginationEvent`
     */
    moreDataEvent: Subject<number>;
    /**
     * @Output : Angular
     * @description Emits the request of a new page to load.
     * The emitted PageQuery contains the reference item from which the new page is loaded
     * and whether it is the previous or the next page.
     */
    paginationEvent: Subject<PageQuery>;
    /**
     * @Output : Angular
     * @description Emits the event of applying the specified action on the specified item.
     */
    actionOnItemEvent: Subject<{
        action: Action;
        elementidentifier: ElementIdentifier;
    }>;
    /**
     * @Output : Angular
     * @description Emits the event of applying the specified globalb action on the selected items.
     */
    globalActionEvent: Subject<Action>;
    /**
     * @Output : Angular
     * @description Emits the event of applying the specified global action on the selected items.
     */
    columnFilterChanged: Subject<Column>;
    /**
     * @Output : Angular
     * @description Emits the event of clicking on a grid tile.
     */
    clickOnTile: Subject<Item>;
    /**
     * @Output : Angular
     * @description Emits the event of clicking on the switch mode button. Emits the new mode (grid or list).
     */
    changeResultMode: Subject<ModeEnum>;
    /**
     * @Output : Angular
     * @description Emits the current visible items in the viewport.
     */
    visibleItems: Subject<Array<Item>>;
    /**
    * @Output : Angular
    * @description Emits on changes rowItemList current value.
    */
    onChangeItems: Subject<Array<any>>;
    /**
     * @Output : Angular
     * @description Emits when changing how thumbnails fit in their div.
     */
    thumbnailFitEvent: Subject<ThumbnailFitEnum>;
    /**
     * @Output : Angular
     * @description Emits when result list is updated.
     */
    onResultListUpdate: EventEmitter<boolean>;
    /**
     * @Output : Angular
     * @description Emits when the list is ready.
     */
    onListLoaded: EventEmitter<boolean>;
    columns: Array<Column>;
    items: Array<Item>;
    sortedColumn: {
        columnName: string;
        fieldName: string;
        sortDirection: SortEnum;
    };
    tbodyHeight: number;
    theadHeight: number;
    ModeEnum: typeof ModeEnum;
    ThumbnailFitEnum: typeof ThumbnailFitEnum;
    PageEnum: typeof PageEnum;
    SortEnum: typeof SortEnum;
    private iterableRowsDiffer;
    private iterableColumnsDiffer;
    isNextPageRequested: boolean;
    isPreviousPageRequested: boolean;
    hasGridMode: boolean;
    resultMode: ModeEnum;
    allItemsChecked: boolean;
    borderStyle: string;
    displayListGrid: string;
    isShiftDown: boolean;
    private debouncer;
    private scrollDebouncer;
    private emitVisibleItemsDebouncer;
    constructor(iterableRowsDiffer: IterableDiffers, iterableColumnsDiffer: IterableDiffers, el: ElementRef, colorService: ArlasColorService, translate: TranslateService, notifier: ResultlistNotifierService, cdr: ChangeDetectorRef);
    shiftDown(_: any): void;
    shiftUp(event: KeyboardEvent): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    emitThumbnailsFitStatus(fitChange: MatButtonToggleChange): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    emitVisibleItems(items: Array<Item>): void;
    /**
     * @description Emits the event of asking for next or previous page of items
     * @param referenceIdentifier : item identifier used as reference to fetch the next/previous page
     * @param whichPage : Whether to fetch the `next` or `previous` page
     */
    paginate(itemData: Map<string, ItemDataType>, whichPage: PageEnum): void;
    /**
     * @description Emits which action to apply on which item/product
     */
    triggerActionOnItem(actionOnItem: {
        action: Action;
        elementidentifier: ElementIdentifier;
    }): void;
    /**
     * @description Sets and emits the action to apply to all selected items
     */
    setGlobalAction(action: Action): void;
    setGeoSortAction(): void;
    /**
     * @description Sets and emits the [fieldName, filterValue] map of filtered fields
     */
    setFilters(filtersMap: Map<string, ItemDataType>): void;
    /**
     * @description Sets and emits the identifiers list of selected items
     */
    setSelectedItems(selectedItems: Set<string>, stopPropagation?: boolean): void;
    /**
     * @description Emits the column to sort on and the sort direction
     */
    sort(paramSortedColumn: Column): void;
    setDirection(event: PointerEvent): void;
    setSortedColumn(event: MatSelectChange): void;
    /**
     * @description Emits the request event of geo-sorting
     */
    geoSort(): void;
    /**
     * @description Sets and emits the hovered item's identifier
     */
    setConsultedItem(identifier: string): void;
    /**
     * @description called on hovering an item : its sets the items actions + emits the item's identifier
     * @param item hovered item
     */
    onEnterItem(item: Item): void;
    /**
     * @description called on leaving an item : emits the item's identifier
     * @param item item previously hovered
     */
    onLeaveItem(item: Item): void;
    /**
     * @description Called when item is clicked. It is instant compared to other events
     * @param item Item clicked on
     */
    onClickItem(item: Item): void;
    /**
     * @description Sets the border style of rows
     */
    setBorderStyle(borderStyle: any): void;
    /**
     * @description Sets the selected grid item
     */
    setSelectedGridItem(item: Item): void;
    closeDetail(isClosed: boolean): void;
    /**
     * @description Sets the display style according to the mode
     */
    whichMode(toggleChangeEvent: MatButtonToggleChange): void;
    /**
     * @description Selects all the items
     */
    selectAllItems(): void;
    /**
     * @description Selects all the items between the farest and nearest selected items
     */
    selectInBetween(): void;
    /**
     * @description Emits the column when a filter is addedd
     */
    columnChanged(colum: Column): void;
    /**
     * @description Clear set of selection
     */
    clearSelection(): void;
    byFieldName(item1: Column, item2: Column): boolean;
    private setColumns;
    private onAddItems;
    private setTableWidth;
    /**
     * @description Sets the table head and body height
     */
    private setTableHeight;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResultListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ResultListComponent, "arlas-result-list", never, { "options": { "alias": "options"; "required": false; }; "fetchState": { "alias": "fetchState"; "required": false; }; "fieldsList": { "alias": "fieldsList"; "required": false; }; "rowItemList": { "alias": "rowItemList"; "required": false; }; "fieldsConfiguration": { "alias": "fieldsConfiguration"; "required": false; }; "tableWidth": { "alias": "tableWidth"; "required": false; }; "nLastLines": { "alias": "nLastLines"; "required": false; }; "nbLinesBeforeFetch": { "alias": "nbLinesBeforeFetch"; "required": false; }; "detailedGridHeight": { "alias": "detailedGridHeight"; "required": false; }; "nbGridColumns": { "alias": "nbGridColumns"; "required": false; }; "globalActionsList": { "alias": "globalActionsList"; "required": false; }; "detailedDataRetriever": { "alias": "detailedDataRetriever"; "required": false; }; "indeterminatedItems": { "alias": "indeterminatedItems"; "required": false; }; "selectedItems": { "alias": "selectedItems"; "required": false; }; "activatedActionsPerItem": { "alias": "activatedActionsPerItem"; "required": false; }; "highlightItems": { "alias": "highlightItems"; "required": false; }; "defautMode": { "alias": "defautMode"; "required": false; }; "isBodyHidden": { "alias": "isBodyHidden"; "required": false; }; "displayFilters": { "alias": "displayFilters"; "required": false; }; "isGeoSortEnabled": { "alias": "isGeoSortEnabled"; "required": false; }; "isGeoSortActivated": { "alias": "isGeoSortActivated"; "required": false; }; "currentSortedColumn": { "alias": "currentSortedColumn"; "required": false; }; "filtersMap": { "alias": "filtersMap"; "required": false; }; "dropDownMapValues": { "alias": "dropDownMapValues"; "required": false; }; "displayThead": { "alias": "displayThead"; "required": false; }; "keysToColors": { "alias": "keysToColors"; "required": false; }; "colorsSaturationWeight": { "alias": "colorsSaturationWeight"; "required": false; }; "useColorService": { "alias": "useColorService"; "required": false; }; "cellBackgroundStyle": { "alias": "cellBackgroundStyle"; "required": false; }; "selectedGridItem": { "alias": "selectedGridItem"; "required": false; }; "showEmptyGroup": { "alias": "showEmptyGroup"; "required": false; }; "isDetailledGridOpen": { "alias": "isDetailledGridOpen"; "required": false; }; "thumbnailFit": { "alias": "thumbnailFit"; "required": false; }; }, { "sortColumnEvent": "sortColumnEvent"; "geoSortEvent": "geoSortEvent"; "geoAutoSortEvent": "geoAutoSortEvent"; "selectedItemsEvent": "selectedItemsEvent"; "consultedItemEvent": "consultedItemEvent"; "clickOnItemEvent": "clickOnItemEvent"; "setFiltersEvent": "setFiltersEvent"; "moreDataEvent": "moreDataEvent"; "paginationEvent": "paginationEvent"; "actionOnItemEvent": "actionOnItemEvent"; "globalActionEvent": "globalActionEvent"; "columnFilterChanged": "columnFilterChanged"; "clickOnTile": "clickOnTile"; "changeResultMode": "changeResultMode"; "visibleItems": "visibleItems"; "onChangeItems": "onChangeItems"; "thumbnailFitEvent": "thumbnailFitEvent"; "onResultListUpdate": "onResultListUpdate"; "onListLoaded": "onListLoaded"; }, never, never, false, never>;
}
