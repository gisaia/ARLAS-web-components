import { OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { ArlasColorService } from '../../../services/color.generator.service';
import { Item } from '../model/item';
import { ItemComponent } from '../model/itemComponent';
import { DetailedDataRetriever } from '../utils/detailed-data-retriever';
import { CellBackgroundStyleEnum } from '../utils/enumerations/cellBackgroundStyleEnum';
import { Action, ElementIdentifier, ResultListOptions } from '../utils/results.utils';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class ResultItemComponent extends ItemComponent implements OnInit {
    colorService: ArlasColorService;
    translate: TranslateService;
    /**
     * @constant
     */
    HIDE_DETAILS: "Hide details";
    /**
     * @constant
     */
    SHOW_DETAILS: "Show details";
    CellBackgroundStyleEnum: typeof CellBackgroundStyleEnum;
    /**
     * @Input : Angular
     * @description An input to customize the resultlist behaviour
     */
    options: ResultListOptions;
    /**
     * @Input
     * @description An object representing an Item .
     */
    rowItem: Item;
    /**
    * @Input
    * @description Name of the id field.
    */
    idFieldName: string;
    /**
     * @Input
     * @description A detailed-data-retriever object that implements
     * DetailedDataRetriever interface.
     */
    detailedDataRetriever: DetailedDataRetriever;
    /**
     * @Input
     * @description List of all selected items in the result-list.component.
     * This component sets directly this list.
     */
    selectedItems: Set<string>;
    /**
     * @Input : Angular
     * @description List of [key, color] couples that associates a hex color to each key
     */
    keysToColors: Array<[string, string]>;
    /**
     * @Input : Angular
     * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
     * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
     * Therefore saturation of generated colors will be within this tightened scale.
     */
    colorsSaturationWeight: number;
    /**
     * @Input : Angular
     * @description Whether to allow colorizing the cells of the item (the row) according to the terms displayed
     */
    useColorService: boolean;
    /**
     * @Input : Angular
     * @description The way the cell will be colorized: filled or outlined
     */
    cellBackgroundStyle: CellBackgroundStyleEnum;
    /**
     * @Input : Angular
     * @description Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions.
    */
    activatedActionsPerItem: Map<string, Set<string>>;
    tableWidth: number;
    /**
     * @Output
     * @description Emits the list of selected items in result-list.component.
     */
    selectedItemsEvent: Subject<Set<string>>;
    /**
     * @Output
     * @description Emits the event of applying the specified action on the specified item.
     */
    actionOnItemEvent: Subject<{
        action: Action;
        elementidentifier: ElementIdentifier;
    }>;
    /**
     * @Output
     * @description Emits the selected/unselected item.
     * @deprecated
     */
    selectedItemPositionEvent: Subject<Item>;
    /**
     * @Output
     * @description Emits the border line style depending on the item's toggle state.
     */
    borderStyleEvent: Subject<string>;
    isDetailToggled: boolean;
    detailedData: string;
    actions: any;
    borderStyle: string;
    colors: {};
    protected identifier: string;
    NUMBER_FORMAT_CHAR: string;
    constructor(colorService: ArlasColorService, translate: TranslateService);
    ngOnInit(): void;
    toggle(): void;
    setSelectedItem(): void;
    determinateItem(): void;
    getTextColor(key: any): string;
    triggerActionOnItem(action: Action): void;
    private updateColors;
    private getColor;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResultItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ResultItemComponent, "[arlas-result-item]", never, { "options": { "alias": "options"; "required": false; }; "rowItem": { "alias": "rowItem"; "required": false; }; "idFieldName": { "alias": "idFieldName"; "required": false; }; "detailedDataRetriever": { "alias": "detailedDataRetriever"; "required": false; }; "selectedItems": { "alias": "selectedItems"; "required": false; }; "keysToColors": { "alias": "keysToColors"; "required": false; }; "colorsSaturationWeight": { "alias": "colorsSaturationWeight"; "required": false; }; "useColorService": { "alias": "useColorService"; "required": false; }; "cellBackgroundStyle": { "alias": "cellBackgroundStyle"; "required": false; }; "activatedActionsPerItem": { "alias": "activatedActionsPerItem"; "required": false; }; "tableWidth": { "alias": "tableWidth"; "required": false; }; }, { "selectedItemsEvent": "selectedItemsEvent"; "actionOnItemEvent": "actionOnItemEvent"; "selectedItemPositionEvent": "selectedItemPositionEvent"; "borderStyleEvent": "borderStyleEvent"; }, never, never, false, never>;
}
