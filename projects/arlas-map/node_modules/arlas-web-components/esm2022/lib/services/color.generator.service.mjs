/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Injectable } from '@angular/core';
import { ColorGeneratorLoader } from '../components/componentsUtils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../components/componentsUtils";
export class ArlasColorService {
    constructor(colorGenerator) {
        this.colorGenerator = colorGenerator;
        this.changekeysToColors = new Subject();
        this.changekeysToColors$ = this.changekeysToColors.asObservable();
        this.colorGenerator.changekeysToColors$.subscribe(() => this.changekeysToColors.next());
    }
    getColor(key, keysToColors, colorsSaturationWeight) {
        return this.colorGenerator.getColor(key, keysToColors, colorsSaturationWeight);
    }
    getTextColor(color) {
        return this.colorGenerator.getTextColor(color);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasColorService, deps: [{ token: i1.ColorGeneratorLoader }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasColorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ArlasColorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.ColorGeneratorLoader }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuZ2VuZXJhdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hcmxhcy1jb21wb25lbnRzL3NyYy9saWIvc2VydmljZXMvY29sb3IuZ2VuZXJhdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFLL0IsTUFBTSxPQUFPLGlCQUFpQjtJQUk1QixZQUEwQixjQUFvQztRQUFwQyxtQkFBYyxHQUFkLGNBQWMsQ0FBc0I7UUFGdEQsdUJBQWtCLEdBQUksSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUMzQyx3QkFBbUIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFbEUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFMUYsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXLEVBQUUsWUFBc0MsRUFBRSxzQkFBK0I7UUFDbEcsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVNLFlBQVksQ0FBQyxLQUFLO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQzsrR0FmVSxpQkFBaUI7bUhBQWpCLGlCQUFpQixjQUZoQixNQUFNOzs0RkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEdpc2HDr2EgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UudHh0IGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gR2lzYcOvYSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbG9yR2VuZXJhdG9yTG9hZGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb21wb25lbnRzVXRpbHMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBcmxhc0NvbG9yU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjaGFuZ2VrZXlzVG9Db2xvcnMgPSAgbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHVibGljIGNoYW5nZWtleXNUb0NvbG9ycyQgPSB0aGlzLmNoYW5nZWtleXNUb0NvbG9ycy5hc09ic2VydmFibGUoKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBjb2xvckdlbmVyYXRvcjogQ29sb3JHZW5lcmF0b3JMb2FkZXIpIHtcbiAgICB0aGlzLmNvbG9yR2VuZXJhdG9yLmNoYW5nZWtleXNUb0NvbG9ycyQuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2hhbmdla2V5c1RvQ29sb3JzLm5leHQoKSk7XG5cbiAgfVxuXG4gIHB1YmxpYyBnZXRDb2xvcihrZXk6IHN0cmluZywga2V5c1RvQ29sb3JzPzogQXJyYXk8W3N0cmluZywgc3RyaW5nXT4sIGNvbG9yc1NhdHVyYXRpb25XZWlnaHQ/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbG9yR2VuZXJhdG9yLmdldENvbG9yKGtleSwga2V5c1RvQ29sb3JzLCBjb2xvcnNTYXR1cmF0aW9uV2VpZ2h0KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUZXh0Q29sb3IoY29sb3IpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbG9yR2VuZXJhdG9yLmdldFRleHRDb2xvcihjb2xvcik7XG4gIH1cblxufVxuIl19