/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Component, Input, Output } from '@angular/core';
import { UntypedFormControl, UntypedFormGroup } from '@angular/forms';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import moment from 'moment';
import { Subject } from 'rxjs';
import { retry, timeout } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common/http";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/input";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/datepicker";
import * as i9 from "@angular/forms";
import * as i10 from "@angular/material/progress-spinner";
import * as i11 from "@angular/material/card";
import * as i12 from "@angular/material/list";
import * as i13 from "@ngx-translate/core";
export class WmtsLayerManagertDialogComponent {
    constructor(dialogRef, http) {
        this.dialogRef = dialogRef;
        this.http = http;
        this.isImageLoading = false;
        this.showError = false;
        this.previewLoading = false;
        this.launchPreview = false;
        this.clickTopreview = new Subject();
    }
    ngOnInit() {
        const l = new Array();
        this.data.forEach((value, key) => {
            l.push(key);
        });
        this.layers = l;
        this.formGroup = new UntypedFormGroup({
            layer: new UntypedFormControl(),
            style: new UntypedFormControl(),
        });
    }
    selectionChange(event) {
        this.style = undefined;
        this.styles = new Array();
        this.styles = this.data.get(event.value).styles;
        this.dimensions = this.data.get(event.value).dimensions;
        this.dimensions.forEach(d => {
            this.formGroup.addControl(d.identifier, new UntypedFormControl);
        });
    }
    clickOnPreview() {
        this.previewLoading = true;
        this.launchPreview = true;
        this.clickTopreview.next(this.formGroup.value);
    }
    previewUrl(url) {
        this.isImageLoading = true;
        this.getImage(url).subscribe(data => {
            this.createImageFromBlob(data);
            this.isImageLoading = false;
        }, error => {
            this.isImageLoading = false;
            this.showError = true;
        });
    }
    getImage(imageUrl) {
        return this.http.get(imageUrl, { responseType: 'blob' });
    }
    createImageFromBlob(image) {
        const reader = new FileReader();
        reader.addEventListener('load', () => {
            this.imageToShow = reader.result;
        }, false);
        if (image) {
            reader.readAsDataURL(image);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WmtsLayerManagertDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: WmtsLayerManagertDialogComponent, selector: "arlas-wmts-layer-manager-dialog", inputs: { layers: "layers", styles: "styles", metadata: "metadata", dimensions: "dimensions", data: "data", isDimension: "isDimension" }, outputs: { clickTopreview: "clickTopreview" }, ngImport: i0, template: "<h2 mat-dialog-title class=\"wmts-layer-manager-title\">{{'Layers and style' | translate}}</h2>\n<mat-dialog-content class=\"wmts-layer-manager-content\">\n    <mat-card appearance=\"outlined\" class=\"wmts-layer-manager-metadata-card\" *ngIf=\"metadata\">\n        <div class=\"wmts-layer-manager-metadata\">\n            <mat-list>\n                <h3 mat-subheader>{{'Informations' | translate}}</h3>\n                <mat-list-item class=\"wmts-layer-manager-metadata-list\" *ngFor=\"let item of metadata | keyvalue\">\n                    <h4 mat-line class=\"wmts-layer-manager-metadata-title\">{{item.key}}</h4>\n                    <p mat-line class=\"wmts-layer-manager-metadata-value\"> {{item?.value}} </p>\n                </mat-list-item>\n            </mat-list>\n        </div>\n    </mat-card>\n    <form class=\"wmts-layer-manager-form\" [formGroup]=\"formGroup\">\n        <mat-form-field class=\"wmts-layer-manager-field\">\n            <mat-select [(value)]=\"layer\" placeholder=\"{{'Choose layer'| translate}}...\" (selectionChange)=\"selectionChange($event)\"\n                formControlName=\"layer\">\n                <mat-option *ngFor=\"let layer of layers\" [value]=\"layer\">\n                    {{layer}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"wmts-layer-manager-field\">\n            <mat-select placeholder=\"{{'Choose style'| translate}}...\" [(value)]=\"style\" formControlName=\"style\">\n                <mat-option *ngFor=\"let style of styles\" [value]=\"style\">\n                    {{style}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div *ngFor=\"let dimension of dimensions\">\n            <div *ngIf=\"dimension.identifier==='time'\">\n                <mat-form-field class=\"wmts-layer-manager-field\">\n                    <input matInput autocomplete=\"off\" [matDatepicker]=\"picker\" placeholder=\"{{'Choose date'| translate}}\" formControlName={{dimension.identifier}}\n                        [max]=dimension.endDate [min]=dimension.startDate>\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n            </div>\n            <div *ngIf=\"dimension.identifier !=='time'\">\n                <mat-form-field class=\"wmts-layer-manager-field\">\n                    <mat-select formControlName={{dimension.identifier}} placeholder=\"{{'Choose' | translate}} {{dimension.identifier}}\">\n                        <mat-option *ngFor=\"let v of dimension.values\" [value]=\"v\">\n                            {{v}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n    <div *ngIf=\"launchPreview\" class=\"wmts-layer-manager-preview\" style=\"height: 256px;\">\n        <img class=\"wmts-layer-manager-image\" [src]=\"imageToShow\" alt=\"Preview of WMTS service\" *ngIf=\"imageToShow&&!isImageLoading&&!showError\">\n        <mat-progress-spinner class=\"wmts-layer-manager-spinner\" *ngIf=\"isImageLoading\" [diameter]=\"128\" [strokeWidth]=\"2\" mode=\"indeterminate\"></mat-progress-spinner>\n    </div>\n    <div class=\"wmts-layer-manager-error\" *ngIf=\"launchPreview && showError\">\n        <span>{{'Unable to preview this style for this layer'| translate}}</span>\n    </div>\n</mat-dialog-content>\n\n<div mat-dialog-actions>\n    <button mat-raised-button class=\"wmts-layer-manager-preview-button\" [disabled]=\"style==undefined||layer==undefined\" (click)=\"clickOnPreview()\">{{'Preview'| translate}}</button>\n    <button mat-raised-button class=\"wmts-layer-manager-view-button\" [disabled]=\"style==undefined||layer==undefined\" [mat-dialog-close]=\"formGroup.value\"\n        cdkFocusInitial>{{'View' | translate}}</button>\n</div>", styles: [".wmts-layer-manager-metadata-list{height:48px!important}.wmts-layer-manager-form{padding-top:16px!important;display:flex;flex-flow:wrap;max-width:440px}.wmts-layer-manager-preview,.wmts-layer-manager-image,.wmts-layer-manager-spinner{margin-left:auto!important;margin-right:auto!important;display:block!important}.wmts-layer-manager-content{max-height:80vh!important}.wmts-layer-manager-field{padding-right:5px;padding-left:5px}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "directive", type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i6.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i7.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: i8.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i8.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { kind: "component", type: i8.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { kind: "directive", type: i9.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i9.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i9.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i9.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i9.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i10.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "component", type: i11.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "component", type: i12.MatList, selector: "mat-list", exportAs: ["matList"] }, { kind: "component", type: i12.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["activated"], exportAs: ["matListItem"] }, { kind: "directive", type: i12.MatListSubheaderCssMatStyler, selector: "[mat-subheader], [matSubheader]" }, { kind: "pipe", type: i3.KeyValuePipe, name: "keyvalue" }, { kind: "pipe", type: i13.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WmtsLayerManagertDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-wmts-layer-manager-dialog', template: "<h2 mat-dialog-title class=\"wmts-layer-manager-title\">{{'Layers and style' | translate}}</h2>\n<mat-dialog-content class=\"wmts-layer-manager-content\">\n    <mat-card appearance=\"outlined\" class=\"wmts-layer-manager-metadata-card\" *ngIf=\"metadata\">\n        <div class=\"wmts-layer-manager-metadata\">\n            <mat-list>\n                <h3 mat-subheader>{{'Informations' | translate}}</h3>\n                <mat-list-item class=\"wmts-layer-manager-metadata-list\" *ngFor=\"let item of metadata | keyvalue\">\n                    <h4 mat-line class=\"wmts-layer-manager-metadata-title\">{{item.key}}</h4>\n                    <p mat-line class=\"wmts-layer-manager-metadata-value\"> {{item?.value}} </p>\n                </mat-list-item>\n            </mat-list>\n        </div>\n    </mat-card>\n    <form class=\"wmts-layer-manager-form\" [formGroup]=\"formGroup\">\n        <mat-form-field class=\"wmts-layer-manager-field\">\n            <mat-select [(value)]=\"layer\" placeholder=\"{{'Choose layer'| translate}}...\" (selectionChange)=\"selectionChange($event)\"\n                formControlName=\"layer\">\n                <mat-option *ngFor=\"let layer of layers\" [value]=\"layer\">\n                    {{layer}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"wmts-layer-manager-field\">\n            <mat-select placeholder=\"{{'Choose style'| translate}}...\" [(value)]=\"style\" formControlName=\"style\">\n                <mat-option *ngFor=\"let style of styles\" [value]=\"style\">\n                    {{style}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div *ngFor=\"let dimension of dimensions\">\n            <div *ngIf=\"dimension.identifier==='time'\">\n                <mat-form-field class=\"wmts-layer-manager-field\">\n                    <input matInput autocomplete=\"off\" [matDatepicker]=\"picker\" placeholder=\"{{'Choose date'| translate}}\" formControlName={{dimension.identifier}}\n                        [max]=dimension.endDate [min]=dimension.startDate>\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n            </div>\n            <div *ngIf=\"dimension.identifier !=='time'\">\n                <mat-form-field class=\"wmts-layer-manager-field\">\n                    <mat-select formControlName={{dimension.identifier}} placeholder=\"{{'Choose' | translate}} {{dimension.identifier}}\">\n                        <mat-option *ngFor=\"let v of dimension.values\" [value]=\"v\">\n                            {{v}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n    <div *ngIf=\"launchPreview\" class=\"wmts-layer-manager-preview\" style=\"height: 256px;\">\n        <img class=\"wmts-layer-manager-image\" [src]=\"imageToShow\" alt=\"Preview of WMTS service\" *ngIf=\"imageToShow&&!isImageLoading&&!showError\">\n        <mat-progress-spinner class=\"wmts-layer-manager-spinner\" *ngIf=\"isImageLoading\" [diameter]=\"128\" [strokeWidth]=\"2\" mode=\"indeterminate\"></mat-progress-spinner>\n    </div>\n    <div class=\"wmts-layer-manager-error\" *ngIf=\"launchPreview && showError\">\n        <span>{{'Unable to preview this style for this layer'| translate}}</span>\n    </div>\n</mat-dialog-content>\n\n<div mat-dialog-actions>\n    <button mat-raised-button class=\"wmts-layer-manager-preview-button\" [disabled]=\"style==undefined||layer==undefined\" (click)=\"clickOnPreview()\">{{'Preview'| translate}}</button>\n    <button mat-raised-button class=\"wmts-layer-manager-view-button\" [disabled]=\"style==undefined||layer==undefined\" [mat-dialog-close]=\"formGroup.value\"\n        cdkFocusInitial>{{'View' | translate}}</button>\n</div>", styles: [".wmts-layer-manager-metadata-list{height:48px!important}.wmts-layer-manager-form{padding-top:16px!important;display:flex;flex-flow:wrap;max-width:440px}.wmts-layer-manager-preview,.wmts-layer-manager-image,.wmts-layer-manager-spinner{margin-left:auto!important;margin-right:auto!important;display:block!important}.wmts-layer-manager-content{max-height:80vh!important}.wmts-layer-manager-field{padding-right:5px;padding-left:5px}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }, { type: i2.HttpClient }], propDecorators: { layers: [{
                type: Input
            }], styles: [{
                type: Input
            }], metadata: [{
                type: Input
            }], dimensions: [{
                type: Input
            }], data: [{
                type: Input
            }], isDimension: [{
                type: Input
            }], clickTopreview: [{
                type: Output
            }] } });
export class WmtsLayerManagerComponent {
    constructor(dialog, http) {
        this.dialog = dialog;
        this.http = http;
        /**
        * @Input : Angular
        * @description Supported CRS code of WMTS service
        */
        this.supportedCRSCode = new Array('3857', '900913');
        /**
      * @Input : Angular
      * @description String date Format for time input
      */
        this.dateFormat = 'YYYY-MM-DDT00:00:00';
        /**
         * @Output : Angular
         * @description Emit the information needed by a wmts client to view a product
         */
        this.getTilesInfoBus = new Subject();
        /**
         * @Output : Angular
         * @description Emit all errors of the component
         */
        this.onError = new Subject();
        this.errorInRun = false;
        this.isGetCapaLoading = false;
    }
    ngOnInit() {
    }
    ngOnChanges(changes) {
        if (changes['getCapaUrl'] !== undefined) {
            this.getCapaUrl = changes['getCapaUrl'].currentValue;
        }
    }
    run(header, md = {}, timeoutDuration = 100000, numberOfRetry = 0) {
        // Call the gatCapabilities services
        this.errorInRun = false;
        this.isGetCapaLoading = true;
        const httpCall = this.http.get(this.getCapaUrl, { headers: header, responseType: 'text' });
        httpCall
            .pipe(timeout(timeoutDuration), retry(numberOfRetry))
            .subscribe(response => {
            try {
                const parser = new DOMParser();
                const xmlDoc = parser.parseFromString(response, 'text/xml');
                const data = this.geLayerToData(xmlDoc);
                // if getCapa contains juste one layer and one style we just build the url and send it to the bus
                const mapSize = data.size;
                if (mapSize === 0) {
                    const nonDataError = new Error('NoStyle-NoLayer');
                    this.errorInRun = true;
                    this.onError.next(nonDataError);
                }
                if (mapSize === 1 && data.values().next().value.styles.length === 1) {
                    // update layer and style
                    this.getTilesInfoBus.next(this.buildGetTileInfo(xmlDoc, data.keys().next().value, data.values().next().value.styles[0], md));
                }
                else {
                    this.dialogRef = this.dialog.open(WmtsLayerManagertDialogComponent, { data: response });
                    this.isGetCapaLoading = false;
                    this.dialogRef.componentInstance.data = data;
                    this.dialogRef.componentInstance.metadata = this.metadata;
                    this.dialogRef.afterClosed().subscribe(formGroupValue => {
                        if (formGroupValue) {
                            const getTileInfo = this.buildGetTileInfo(xmlDoc, formGroupValue.layer, formGroupValue.style, md, this.getDimensionsFromGroupValues(formGroupValue));
                            if (!this.errorInRun) {
                                this.getTilesInfoBus.next(getTileInfo);
                            }
                        }
                    });
                    this.dialogRef.componentInstance.clickTopreview.subscribe(formGroupValue => {
                        const getTileInfo = this.buildGetTileInfo(xmlDoc, formGroupValue.layer, formGroupValue.style, md, this.getDimensionsFromGroupValues(formGroupValue));
                        if (!this.errorInRun) {
                            // bounds[[west,south][east,north]]
                            const bounds = getTileInfo.bbox;
                            const previewURL = getTileInfo.url
                                .replace('{x}', '0')
                                .replace('{y}', '0')
                                .replace('{z}', '0');
                            this.dialogRef.componentInstance.previewUrl(previewURL);
                        }
                    });
                }
            }
            catch (e) {
                this.onError.next(e);
                this.isGetCapaLoading = false;
            }
        }, error => {
            this.isGetCapaLoading = false;
            this.onError.next(error);
        });
    }
    geLayerToData(xmlDoc) {
        const layerToData = new Map();
        const layers = Array.from(xmlDoc.getElementsByTagName('Layer'));
        layers.forEach(l => {
            const identifier = l.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, '');
            const styles = Array.from(l.getElementsByTagName('Style'))
                .map(s => s.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, ''));
            const data = {
                styles: styles,
                dimensions: this.getDimension(l)
            };
            layerToData.set(identifier, data);
        });
        return layerToData;
    }
    getDimension(layerElement) {
        const dimensionElements = layerElement.getElementsByTagName('Dimension');
        const allDimension = Array.from(dimensionElements).map(e => {
            const abstracts = e.getElementsByTagName('ows:Abstract');
            let abstract;
            if (abstracts && abstracts.length > 0) {
                abstract = abstracts[0].textContent.replace(/\n/g, '');
            }
            return {
                identifier: e.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, ''),
                abstract: abstract,
                values: Array.from(e.getElementsByTagName('Value')).map(el => el.textContent.replace(/\n/g, ''))
            };
        });
        const timeDimension = allDimension.filter(r => r.identifier === 'time').map(r => {
            let startDate = null;
            let endDate = null;
            if (r.abstract && r.abstract.indexOf('/') > 0) {
                startDate = new Date(r.abstract.split('/')[0]);
                endDate = new Date(r.abstract.split('/')[1]);
                r.startDate = startDate;
                r.endDate = endDate;
            }
            return r;
        })[0];
        const result = allDimension.filter(r => r.identifier !== 'time').concat(timeDimension);
        return result.filter(data => data !== undefined);
    }
    getFormat(xmlDoc, layer) {
        const layerElement = Array.from(xmlDoc.getElementsByTagName('Layer'))
            .filter(l => l.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, '') === layer)[0];
        if (!this.format) {
            const format = Array.from(layerElement.getElementsByTagName('Format'))
                .map(e => e.textContent);
            return format[0];
        }
        else {
            const format = Array.from(layerElement.getElementsByTagName('Format'))
                .filter(f => f.textContent === this.format).map(e => e.textContent);
            if (new Set(format).has(this.format)) {
                return this.format;
            }
            else {
                const formatError = new Error(this.format.concat(' does not exist for layer ').concat(layer));
                this.errorInRun = true;
                this.onError.next(formatError);
            }
        }
    }
    getVersion(xmlDoc) {
        if (this.version === undefined) {
            try {
                return xmlDoc.getElementsByTagName('ows:ServiceTypeVersion')[0].textContent;
            }
            catch (e) {
                this.onError.next(new Error(e));
            }
        }
        else {
            return this.version;
        }
    }
    getKVPBaseUrl(xmlDoc) {
        if (this.getTilesBaseUrl === undefined) {
            try {
                const getCapaOperationNode = Array.from(xmlDoc
                    .getElementsByTagName('ows:OperationsMetadata')[0]
                    .getElementsByTagName('ows:Operation'))
                    .filter(element => element.getAttribute('name') === 'GetCapabilities')[0];
                const getKvpNode = Array.from(getCapaOperationNode.
                    getElementsByTagName('ows:Get'))
                    .filter(element => Array.from(element.getElementsByTagName('ows:Value'))
                    .filter(e => e.textContent === 'KVP').length > 0)[0];
                return getKvpNode.getAttribute('xlink:href');
            }
            catch (e) {
                this.onError.next(e);
            }
        }
        else {
            return this.getTilesBaseUrl;
        }
    }
    getTileMatrixSet(xmlDoc, layer) {
        if (this.tileMatrixSetIdenttifier === undefined) {
            const layerElement = Array.from(xmlDoc.getElementsByTagName('Layer'))
                .filter(l => l.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, '') === layer)[0];
            const tileMatrixSetForLayer = Array.from(layerElement
                .getElementsByTagName('TileMatrixSetLink'))
                .map(t => t.getElementsByTagName('TileMatrixSet'))
                .map(t => t[0].textContent);
            const tileMatrixSet = Array.from(xmlDoc.getElementsByTagName('TileMatrixSet'))
                .filter(l => l.children.length > 0)
                .filter(l => tileMatrixSetForLayer.indexOf(l.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, '')) >= 0)
                .filter(l => {
                const codeArray = [];
                this.supportedCRSCode.forEach(code => {
                    if (l.getElementsByTagName('ows:SupportedCRS')[0].textContent.replace(/\n/g, '').indexOf(code) >= 0) {
                        codeArray.push(code);
                    }
                });
                return codeArray.length > 0;
            }).map(l => l.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, ''));
            return tileMatrixSet[0];
        }
        else {
            return this.tileMatrixSetIdenttifier;
        }
    }
    getBbox(xmlDoc, layer) {
        const layerElement = Array.from(xmlDoc.getElementsByTagName('Layer'))
            .filter(l => l.getElementsByTagName('ows:Identifier')[0].textContent.replace(/\n/g, '') === layer)[0];
        const lowerCornerText = layerElement
            .getElementsByTagName('ows:WGS84BoundingBox')[0]
            .getElementsByTagName('ows:LowerCorner')[0]
            .textContent;
        const upperCornerText = layerElement
            .getElementsByTagName('ows:WGS84BoundingBox')[0]
            .getElementsByTagName('ows:UpperCorner')[0]
            .textContent;
        const bounds = new Array();
        // west
        bounds.push(parseFloat(lowerCornerText.split(' ')[0]));
        // south
        bounds.push(parseFloat(lowerCornerText.split(' ')[1]));
        // east
        bounds.push(parseFloat(upperCornerText.split(' ')[0]));
        // north
        bounds.push(parseFloat(upperCornerText.split(' ')[1]));
        return bounds;
    }
    getZoomMinMax(xmlDoc) {
        const numberOfTileMatrixSetTag = xmlDoc.getElementsByTagName('TileMatrixSet').length;
        const numberOfTileMatrixTag = xmlDoc
            .getElementsByTagName('TileMatrixSet')[numberOfTileMatrixSetTag - 1]
            .getElementsByTagName('TileMatrix').length;
        const maxZoom = xmlDoc
            .getElementsByTagName('TileMatrixSet')[numberOfTileMatrixSetTag - 1]
            .getElementsByTagName('TileMatrix')[numberOfTileMatrixTag - 1].children[0].textContent;
        const minZoom = parseInt(maxZoom, 10) - numberOfTileMatrixTag + 1;
        return [minZoom, parseInt(maxZoom, 10)];
    }
    buildGetTileUrl(xmlDoc, layer, style, dimensions) {
        let baseURL = this.getKVPBaseUrl(xmlDoc);
        if (baseURL[baseURL.length - 1] === '?') {
            baseURL = baseURL.substring(0, baseURL.length - 1);
        }
        const version = this.getVersion(xmlDoc);
        const tileMatrixSet = this.getTileMatrixSet(xmlDoc, layer);
        const format = this.getFormat(xmlDoc, layer);
        let url = '';
        url = url.concat(baseURL)
            .concat('?')
            .concat('SERVICE=WMTS&')
            .concat('REQUEST=GetTile&')
            .concat('VERSION=').concat(version).concat('&')
            .concat('LAYER=').concat(layer).concat('&')
            .concat('STYLE=').concat(style).concat('&')
            .concat('FORMAT=').concat(format).concat('&')
            .concat('TileMatrixSet=').concat(tileMatrixSet).concat('&')
            .concat('TileMatrix=').concat('{z}').concat('&')
            .concat('TileRow=').concat('{y}').concat('&')
            .concat('TileCol=').concat('{x}');
        if (dimensions) {
            Object
                .keys(dimensions)
                .forEach(e => url = url.concat('&').concat(e).concat('=').concat(dimensions[e]));
        }
        return url;
    }
    buildGetTileInfo(xmlDoc, layer, style, md, dimensions) {
        const getTilesInfo = {
            url: this.buildGetTileUrl(xmlDoc, layer, style, dimensions),
            zoomMax: this.getZoomMinMax(xmlDoc)[1],
            zoomMin: this.getZoomMinMax(xmlDoc)[0],
            bbox: this.getBbox(xmlDoc, layer),
            md: md
        };
        return getTilesInfo;
    }
    getDimensionsFromGroupValues(formGroup) {
        const dimensions = {};
        Object.keys(formGroup).filter(e => e !== 'style').filter(e => e !== 'layer')
            .forEach(e => dimensions[e] = formGroup[e]);
        if (dimensions['time']) {
            dimensions['time'] = moment(dimensions['time']).format(this.dateFormat);
        }
        return dimensions;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WmtsLayerManagerComponent, deps: [{ token: i1.MatDialog }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: WmtsLayerManagerComponent, selector: "arlas-wmts-layer-manager", inputs: { getCapaUrl: "getCapaUrl", metadata: "metadata", getTilesBaseUrl: "getTilesBaseUrl", version: "version", format: "format", supportedCRSCode: "supportedCRSCode", dateFormat: "dateFormat", tileMatrixSetIdenttifier: "tileMatrixSetIdenttifier" }, outputs: { getTilesInfoBus: "getTilesInfoBus", onError: "onError" }, usesOnChanges: true, ngImport: i0, template: "\n", styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WmtsLayerManagerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-wmts-layer-manager', template: "\n" }]
        }], ctorParameters: () => [{ type: i1.MatDialog }, { type: i2.HttpClient }], propDecorators: { getCapaUrl: [{
                type: Input
            }], metadata: [{
                type: Input
            }], getTilesBaseUrl: [{
                type: Input
            }], version: [{
                type: Input
            }], format: [{
                type: Input
            }], supportedCRSCode: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], tileMatrixSetIdenttifier: [{
                type: Input
            }], getTilesInfoBus: [{
                type: Output
            }], onError: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,