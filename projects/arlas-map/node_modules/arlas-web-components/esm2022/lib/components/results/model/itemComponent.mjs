/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
export class ItemComponent {
    setSelectedItem(isChecked, identifier, selectedItems) {
        isChecked = !isChecked;
        if (isChecked) {
            if (!selectedItems.has(identifier)) {
                selectedItems.add(identifier);
            }
        }
        else {
            if (selectedItems.has(identifier)) {
                selectedItems.delete(identifier);
            }
        }
    }
    retrieveAdditionalInfo(detailedDataRetriever, item) {
        if (detailedDataRetriever !== null && item.itemDetailedData.length === 0) {
            this.retrievedDataEvent = detailedDataRetriever.getData(((String)(item.identifier)));
            this.retrievedDataEvent.subscribe(additionalInfo => {
                item.actions = new Array();
                additionalInfo.actions.forEach(action => {
                    item.actions.push({
                        id: action.id,
                        label: action.label,
                        actionBus: action.actionBus,
                        cssClass: action.cssClass,
                        tooltip: action.tooltip,
                        reverseAction: action.reverseAction,
                        icon: action.icon,
                        fields: action.fields,
                        show: action.show
                    });
                });
                additionalInfo.details.forEach((v, k) => {
                    const details = new Array();
                    v.forEach((value, key) => details.push({ key: key, value: value }));
                    item.itemDetailedData.push({ group: k, details: details });
                });
                if (additionalInfo.attachments) {
                    item.attachments = new Array();
                    additionalInfo.attachments.forEach(attachment => {
                        item.attachments.push({
                            label: attachment.label,
                            url: attachment.url,
                            type: attachment.type,
                            description: attachment.description,
                            icon: attachment.icon
                        });
                    });
                }
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbUNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FybGFzLWNvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3Jlc3VsdHMvbW9kZWwvaXRlbUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFPSCxNQUFNLE9BQU8sYUFBYTtJQU9qQixlQUFlLENBQUMsU0FBa0IsRUFBRSxVQUFrQixFQUFFLGFBQTBCO1FBQ3ZGLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUN2QixJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztnQkFDbkMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0gsQ0FBQzthQUFNLENBQUM7WUFDTixJQUFJLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztnQkFDbEMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTSxzQkFBc0IsQ0FBQyxxQkFBNEMsRUFBRSxJQUFVO1FBQ3BGLElBQUkscUJBQXFCLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDekUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDaEIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO3dCQUNiLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSzt3QkFDbkIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO3dCQUMzQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7d0JBQ3pCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTzt3QkFDdkIsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhO3dCQUNuQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7d0JBQ2pCLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTt3QkFDckIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO3FCQUNsQixDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3RDLE1BQU0sT0FBTyxHQUEyQyxJQUFJLEtBQUssRUFBbUMsQ0FBQztvQkFDckcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUM3RCxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEtBQUssRUFBYyxDQUFDO29CQUMzQyxjQUFjLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTt3QkFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7NEJBQ3BCLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSzs0QkFDdkIsR0FBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHOzRCQUNuQixJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7NEJBQ3JCLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVzs0QkFDbkMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO3lCQUN0QixDQUFDLENBQUM7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBHaXNhw69hIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFLnR4dCBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEdpc2HDr2EgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vbW9kZWwvaXRlbSc7XG5pbXBvcnQgeyBEZXRhaWxlZERhdGFSZXRyaWV2ZXIgfSBmcm9tICcuLi91dGlscy9kZXRhaWxlZC1kYXRhLXJldHJpZXZlcic7XG5pbXBvcnQgeyBBY3Rpb24sIEFkZGl0aW9uYWxJbmZvLCBBdHRhY2htZW50IH0gZnJvbSAnLi4vdXRpbHMvcmVzdWx0cy51dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBJdGVtQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIEVtaXRzIHRoZSByZXRyaWV2ZWQgZGV0YWlsZWQgZGF0YS5cbiAgICovXG4gIHByb3RlY3RlZCByZXRyaWV2ZWREYXRhRXZlbnQ6IE9ic2VydmFibGU8QWRkaXRpb25hbEluZm8+O1xuXG4gIHB1YmxpYyBzZXRTZWxlY3RlZEl0ZW0oaXNDaGVja2VkOiBCb29sZWFuLCBpZGVudGlmaWVyOiBzdHJpbmcsIHNlbGVjdGVkSXRlbXM6IFNldDxzdHJpbmc+KSB7XG4gICAgaXNDaGVja2VkID0gIWlzQ2hlY2tlZDtcbiAgICBpZiAoaXNDaGVja2VkKSB7XG4gICAgICBpZiAoIXNlbGVjdGVkSXRlbXMuaGFzKGlkZW50aWZpZXIpKSB7XG4gICAgICAgIHNlbGVjdGVkSXRlbXMuYWRkKGlkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2VsZWN0ZWRJdGVtcy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgICAgc2VsZWN0ZWRJdGVtcy5kZWxldGUoaWRlbnRpZmllcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJldHJpZXZlQWRkaXRpb25hbEluZm8oZGV0YWlsZWREYXRhUmV0cmlldmVyOiBEZXRhaWxlZERhdGFSZXRyaWV2ZXIsIGl0ZW06IEl0ZW0pIHtcbiAgICBpZiAoZGV0YWlsZWREYXRhUmV0cmlldmVyICE9PSBudWxsICYmIGl0ZW0uaXRlbURldGFpbGVkRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMucmV0cmlldmVkRGF0YUV2ZW50ID0gZGV0YWlsZWREYXRhUmV0cmlldmVyLmdldERhdGEoKChTdHJpbmcpKGl0ZW0uaWRlbnRpZmllcikpKTtcbiAgICAgIHRoaXMucmV0cmlldmVkRGF0YUV2ZW50LnN1YnNjcmliZShhZGRpdGlvbmFsSW5mbyA9PiB7XG4gICAgICAgIGl0ZW0uYWN0aW9ucyA9IG5ldyBBcnJheTxBY3Rpb24+KCk7XG4gICAgICAgIGFkZGl0aW9uYWxJbmZvLmFjdGlvbnMuZm9yRWFjaChhY3Rpb24gPT4ge1xuICAgICAgICAgIGl0ZW0uYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBhY3Rpb24uaWQsXG4gICAgICAgICAgICBsYWJlbDogYWN0aW9uLmxhYmVsLFxuICAgICAgICAgICAgYWN0aW9uQnVzOiBhY3Rpb24uYWN0aW9uQnVzLFxuICAgICAgICAgICAgY3NzQ2xhc3M6IGFjdGlvbi5jc3NDbGFzcyxcbiAgICAgICAgICAgIHRvb2x0aXA6IGFjdGlvbi50b29sdGlwLFxuICAgICAgICAgICAgcmV2ZXJzZUFjdGlvbjogYWN0aW9uLnJldmVyc2VBY3Rpb24sXG4gICAgICAgICAgICBpY29uOiBhY3Rpb24uaWNvbixcbiAgICAgICAgICAgIGZpZWxkczogYWN0aW9uLmZpZWxkcyxcbiAgICAgICAgICAgIHNob3c6IGFjdGlvbi5zaG93XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRpdGlvbmFsSW5mby5kZXRhaWxzLmZvckVhY2goKHYsIGspID0+IHtcbiAgICAgICAgICBjb25zdCBkZXRhaWxzOiBBcnJheTx7IGtleTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nOyB9PiA9IG5ldyBBcnJheTx7IGtleTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nOyB9PigpO1xuICAgICAgICAgIHYuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gZGV0YWlscy5wdXNoKHsga2V5OiBrZXksIHZhbHVlOiB2YWx1ZSB9KSk7XG4gICAgICAgICAgaXRlbS5pdGVtRGV0YWlsZWREYXRhLnB1c2goeyBncm91cDogaywgZGV0YWlsczogZGV0YWlscyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhZGRpdGlvbmFsSW5mby5hdHRhY2htZW50cykge1xuICAgICAgICAgIGl0ZW0uYXR0YWNobWVudHMgPSBuZXcgQXJyYXk8QXR0YWNobWVudD4oKTtcbiAgICAgICAgICBhZGRpdGlvbmFsSW5mby5hdHRhY2htZW50cy5mb3JFYWNoKGF0dGFjaG1lbnQgPT4ge1xuICAgICAgICAgICAgaXRlbS5hdHRhY2htZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgbGFiZWw6IGF0dGFjaG1lbnQubGFiZWwsXG4gICAgICAgICAgICAgIHVybDogYXR0YWNobWVudC51cmwsXG4gICAgICAgICAgICAgIHR5cGU6IGF0dGFjaG1lbnQudHlwZSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGF0dGFjaG1lbnQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgIGljb246IGF0dGFjaG1lbnQuaWNvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19