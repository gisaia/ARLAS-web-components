/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, IterableDiffers, ViewEncapsulation } from '@angular/core';
import { Output } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { ngxLoadingAnimationTypes } from 'ngx-loading-reloaded';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { ArlasColorService } from '../../../services/color.generator.service';
import { Column } from '../model/column';
import { Item } from '../model/item';
import { CellBackgroundStyleEnum } from '../utils/enumerations/cellBackgroundStyleEnum';
import { ModeEnum } from '../utils/enumerations/modeEnum';
import { PageEnum } from '../utils/enumerations/pageEnum';
import { SortEnum } from '../utils/enumerations/sortEnum';
import { ThumbnailFitEnum } from '../utils/enumerations/thumbnailFitEnum';
import { ResultListOptions, matchAndReplace } from '../utils/results.utils';
import { marker } from '@colsen1991/ngx-translate-extract-marker';
import { ResultlistNotifierService } from '../../../services/resultlist.notifier.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/color.generator.service";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../../../services/resultlist.notifier.service";
import * as i4 from "@angular/common";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/material/button-toggle";
import * as i7 from "@angular/material/grid-list";
import * as i8 from "@angular/material/checkbox";
import * as i9 from "@angular/material/menu";
import * as i10 from "@angular/material/select";
import * as i11 from "@angular/material/core";
import * as i12 from "@angular/material/slide-toggle";
import * as i13 from "@angular/material/tooltip";
import * as i14 from "@angular/forms";
import * as i15 from "ngx-loading-reloaded";
import * as i16 from "../result-grid-tile/result-grid-tile.component";
import * as i17 from "../result-item/result-item.component";
import * as i18 from "../result-detailed-item/result-detailed-item.component";
import * as i19 from "../result-detailed-grid/result-detailed-grid.component";
import * as i20 from "../result-filter/result-filter.component";
import * as i21 from "../result-directive/result-scroll.directive";
/**
 * ResultList component allows to structure data in a filterable and sortable table.
 * Items can be represented as rows or grids and are multi-selectable.
 * For both list and grid modes, each item has detailed data that can be displayed in a togglable space.
 */
export class ResultListComponent {
    constructor(iterableRowsDiffer, iterableColumnsDiffer, el, colorService, translate, notifier, cdr) {
        this.el = el;
        this.colorService = colorService;
        this.translate = translate;
        this.notifier = notifier;
        this.cdr = cdr;
        /**
         * @constant
         */
        this.GEO_DISTANCE = 'geodistance';
        /**
         * @constant
         */
        this.FILTER_ON = marker('Filter on');
        /**
         * @constant
         */
        this.GLOBAL_ACTIONS = marker('Global actions');
        /**
         * @constant
         */
        this.GEOSORT_ACTION = marker('Geo sort action');
        /**
         * @constant
         */
        this.GRID_MODE = marker('Grid mode');
        /**
         * @constant
         */
        this.LIST_MODE = marker('List mode');
        /**
         * @constant
         */
        this.CONTAIN_FIT = marker('Fit the whole thumbnail to the tile');
        /**
         * @constant
         */
        this.WIDTH_FIT = marker('Fit the thumbnail\'s width to the tile');
        /**
         * @constant
         */
        this.HEIGHT_FIT = marker('Fit the thumbnail\'s height to the tile');
        /**
         * @constant
         */
        this.GEOSORT_BUTTON = marker('Geo-sort');
        /**
         * @constant
         */
        this.COLUMN_ACTIONS_HEIGHT = 52;
        /**
         * @constant
         */
        this.COLUMN_NAME_HEIGHT = 27;
        /**
         * @constant
         */
        this.FILTERS_HEIGHT = 50;
        /**
         * @constant
         */
        this.TAIL_HEIGHT = 30;
        this.loadAnimationConfig = {
            animationType: ngxLoadingAnimationTypes.threeBounce, backdropBackgroundColour: 'rgba(100,100,100,0.5)',
            backdropBorderRadius: '0', primaryColour: '#ffffff', secondaryColour: '#ffffff', tertiaryColour: '#ffffff'
        };
        this.scrollOptions = { maintainScrollUpPosition: true, maintainScrollDownPosition: true, nbLines: 0 };
        this.fetchState = { endListUp: true, endListDown: false };
        /**
         * @Input : Angular
         * @description The table width. If not specified, the tableWidth value is
         * equal to container width.
         */
        this.tableWidth = null;
        /**
         * @Input : Angular
         * @description The number of items left on the list/grid when scrolling up or down upon which loading new data is triggered.
         * When scrolling up or down, once there is `nbLinesBeforeFetch` items left at the top or bottom of the list, previous/next
         * data is loaded.
        */
        this.nbLinesBeforeFetch = 5;
        /**
         * @Input : Angular
         * @description Height of the detail grid div (Grid Mode).
         */
        this.detailedGridHeight = 300;
        /**
         * @Input : Angular
         * @description Number of grid columns (Grid Mode).
         */
        this.nbGridColumns = 4;
        /**
         * @Input : Angular
         * @description List of actions to apply on the selected items.
         */
        this.globalActionsList = new Array();
        /**
         * @Input : Angular
         * @description A detailed-data-retriever object that implements
         * DetailedDataRetriever interface.
         */
        this.detailedDataRetriever = null;
        /**
         * @Input : Angular
         * @description List of items ids that are in a indeterminated status.
         */
        this.indeterminatedItems = new Set();
        /**
         * @Input : Angular
         * @description List of items ids that are in a selected status.
        */
        this.selectedItems = new Set();
        /**
         * @Input : Angular
         * @description Map <itemId, Set<actionIds>> : for each item, gives the list of activated actions.
        */
        this.activatedActionsPerItem = new Map();
        /**
         * @Input : Angular
         * @description List of items ids to be highlighted.
         */
        this.highlightItems = new Set();
        /**
         * @Input : Angular
         * @description Whether filters on list are displayed.
         */
        this.displayFilters = true;
        /**
         * @Input : Angular
         * @description Whether the sort on the geometry is enabled.
         */
        this.isGeoSortEnabled = false;
        /**
         * @Input : Angular
         * @description Whether the sort on the geometry is activated
         */
        this.isGeoSortActivated = false;
        /**
         * @Input : Angular
         * @description A  boolean to show or hide thead of table
         */
        this.displayThead = true;
        /**
         * @Input : Angular
         * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
         * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
         * Therefore saturation of generated colors will be within this tightened scale..
         */
        this.colorsSaturationWeight = 1 / 2;
        /**
         * @Input : Angular
         * @description Whether to allow colorizing cells and the grid tile of the list.
         */
        this.useColorService = false;
        /**
         * @Input : Angular
          * @description The way the cell will be colorized: filled or outlined
         */
        this.cellBackgroundStyle = CellBackgroundStyleEnum.filled;
        /**
         * @Input
         * @description Whether display group with no detail.
         */
        this.showEmptyGroup = false;
        /**
         * @Input
         * @description Whether display the detailled part in grid mode.
         */
        this.isDetailledGridOpen = false;
        /**
         * @Input
         * @description How to fit the thumbnail to the tile:
         * - `height` fit the height of the thumbnail.
         * - `width` fit the width of the thumbnail.
         * - `contain` fit the wholethumbnail.
         */
        this.thumbnailFit = ThumbnailFitEnum.contain;
        /**
         * @Output : Angular
         * @description Emits the event of sorting data on the specified column.
         */
        this.sortColumnEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of geo-sorting data.
         */
        this.geoSortEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of geo-sorting data.
         */
        this.geoAutoSortEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the list of items identifiers whose checkboxes are selected.
         */
        this.selectedItemsEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits one item identifier that is hovered..
         */
        this.consultedItemEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the item that is clicked on.
         */
        this.clickOnItemEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the filtred fields map (fieldName-fieldValue map).
         */
        this.setFiltersEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the request of more data to load. The emitted number is the number of times this event has been emitted.
         * @deprecated moreDataEvent can be replaced by `paginationEvent`
         */
        this.moreDataEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the request of a new page to load.
         * The emitted PageQuery contains the reference item from which the new page is loaded
         * and whether it is the previous or the next page.
         */
        this.paginationEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of applying the specified action on the specified item.
         */
        this.actionOnItemEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of applying the specified globalb action on the selected items.
         */
        this.globalActionEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of applying the specified global action on the selected items.
         */
        this.columnFilterChanged = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of clicking on a grid tile.
         */
        this.clickOnTile = new Subject();
        /**
         * @Output : Angular
         * @description Emits the event of clicking on the switch mode button. Emits the new mode (grid or list).
         */
        this.changeResultMode = new Subject();
        /**
         * @Output : Angular
         * @description Emits the current visible items in the viewport.
         */
        this.visibleItems = new Subject();
        /**
        * @Output : Angular
        * @description Emits on changes rowItemList current value.
        */
        this.onChangeItems = new Subject();
        /**
         * @Output : Angular
         * @description Emits when changing how thumbnails fit in their div.
         */
        this.thumbnailFitEvent = new Subject();
        /**
         * @Output : Angular
         * @description Emits when result list is updated.
         */
        this.onResultListUpdate = new EventEmitter();
        /**
         * @Output : Angular
         * @description Emits when the list is ready.
         */
        this.onListLoaded = new EventEmitter();
        this.items = new Array();
        this.sortedColumn = { columnName: '', fieldName: '', sortDirection: SortEnum.asc };
        // Heights of table elements
        this.tbodyHeight = null;
        this.theadHeight = null;
        this.ModeEnum = ModeEnum;
        this.ThumbnailFitEnum = ThumbnailFitEnum;
        this.PageEnum = PageEnum;
        this.SortEnum = SortEnum;
        this.isNextPageRequested = false;
        this.isPreviousPageRequested = false;
        this.hasGridMode = false;
        this.allItemsChecked = false;
        this.borderStyle = 'solid';
        this.displayListGrid = 'inline';
        this.isShiftDown = false;
        this.debouncer = new Subject();
        this.scrollDebouncer = new Subject();
        this.emitVisibleItemsDebouncer = new Subject();
        this.iterableRowsDiffer = iterableRowsDiffer.find([]).create(null);
        this.iterableColumnsDiffer = iterableColumnsDiffer.find([]).create(null);
        // Resize the table height on window resize
        fromEvent(window, 'resize')
            .pipe(debounceTime(500))
            .subscribe((event) => {
            this.setTableHeight();
        });
        // Add debounce on hover item list
        this.debouncer.pipe(debounceTime(500)).subscribe(elementidentifier => this.consultedItemEvent.next(elementidentifier));
        this.scrollDebouncer.pipe(debounceTime(1000)).subscribe(page => this.paginationEvent.next(page));
        this.emitVisibleItemsDebouncer.pipe(debounceTime(1000)).subscribe(event => this.visibleItems.next(event));
    }
    shiftDown(_) {
        this.isShiftDown = true;
    }
    shiftUp(event) {
        this.isShiftDown = false;
    }
    ngOnInit() {
        this.resultMode = (this.defautMode && (this.defautMode.toString() === 'grid' ||
            this.defautMode.toString() === ModeEnum.grid.toString())) ? ModeEnum.grid : ModeEnum.list;
        this.options = Object.assign(new ResultListOptions(), this.options);
        if (!!this.fieldsConfiguration) {
            if (this.fieldsConfiguration.urlThumbnailTemplate !== undefined) {
                this.hasGridMode = true;
            }
        }
    }
    ngAfterViewInit() {
        this.onListLoaded.next(true);
        this.setTableWidth();
        this.setTableHeight();
    }
    emitThumbnailsFitStatus(fitChange) {
        this.thumbnailFit = ThumbnailFitEnum[fitChange.value];
        this.thumbnailFitEvent.next(this.thumbnailFit);
    }
    ngOnChanges(changes) {
        if (changes['defautMode'] !== undefined) {
            if (this.defautMode.toString() === 'grid' || this.defautMode.toString() === ModeEnum.grid.toString()) {
                this.resultMode = ModeEnum.grid;
                this.displayListGrid = 'block';
            }
            else {
                this.resultMode = ModeEnum.list;
                this.displayListGrid = 'inline';
            }
            this.setTableHeight();
        }
        if (changes['rowItemList'] !== undefined) {
            this.items = [];
            // Reset selected items when data change (ie a filter is applied/removed or pagination occur)
            this.selectedItems = new Set();
            this.isPreviousPageRequested = false;
            // If the selected item is not in the current list of items, close the detail
            const selectedItemInData = !!this.selectedGridItem && this.rowItemList
                .map(item => item.get(this.fieldsConfiguration.idFieldName))
                .includes(this.selectedGridItem.identifier);
            if (!(!!changes['rowItemList'].currentValue && selectedItemInData)) {
                this.closeDetail(true);
            }
            this.onChangeItems.next(changes['rowItemList'].currentValue);
        }
        if (changes['isDetailledGridOpen'] !== undefined) {
            this.isDetailledGridOpen = changes['isDetailledGridOpen'].currentValue;
        }
        if (changes['indeterminatedItems'] !== undefined) {
            this.items.forEach(item => {
                item.isindeterminated = false;
                this.indeterminatedItems.forEach(id => {
                    if (item.identifier === id && !this.selectedItems.has(id)) {
                        item.isindeterminated = true;
                    }
                });
            });
        }
        if (changes['selectedItems'] !== undefined) {
            this.items.forEach(item => {
                item.isChecked = false;
                this.selectedItems.forEach(id => {
                    if (item.identifier === id) {
                        item.isChecked = true;
                    }
                });
            });
            this.setSelectedItems(this.selectedItems);
        }
        if (changes['highlightItems'] !== undefined) {
            if (this.highlightItems.size > 0) {
                this.items.forEach(item => {
                    if (this.highlightItems.has(item.identifier)) {
                        item.ishighLight = true;
                    }
                    else {
                        item.ishighLight = false;
                    }
                });
            }
            else {
                this.items.forEach(item => {
                    item.ishighLight = undefined;
                });
            }
        }
        if (changes['fetchState'] !== undefined) {
            if (this.fetchState && this.fetchState.endListUp) {
                this.isPreviousPageRequested = false;
            }
            if (this.fetchState && this.fetchState.endListDown) {
                this.isNextPageRequested = false;
            }
        }
        if (changes['currentSortedColumn'] !== undefined && changes['currentSortedColumn'].currentValue) {
            this.sortedColumn = {
                columnName: changes['currentSortedColumn'].currentValue.columnName,
                fieldName: changes['currentSortedColumn'].currentValue.fieldName,
                sortDirection: changes['currentSortedColumn'].currentValue.sortDirection
            };
        }
    }
    ngDoCheck() {
        const columnChanges = this.iterableColumnsDiffer.diff(this.fieldsList);
        const itemChanges = this.iterableRowsDiffer.diff(this.rowItemList);
        if (columnChanges) {
            this.setColumns();
        }
        if (itemChanges) {
            let itemIndex = 0;
            itemChanges.forEachAddedItem(i => {
                this.onAddItems(i.item, this.isPreviousPageRequested, itemIndex);
                itemIndex++;
            });
            itemChanges.forEachRemovedItem(i => {
                if (this.isNextPageRequested) {
                    this.items.splice(0, 1);
                }
                else if (this.isPreviousPageRequested) {
                    this.items.splice(this.items.length - 1, 1);
                }
            });
            /**
             * This variable notifies the ResultScrollDirective whether the end of list is reached at top or bottom
             */
            if (this.isPreviousPageRequested) {
                /**
                 * This variable is set and given as an input to the `ResultScrollDirective`.
                 * The objective of this input is to inform `ResultScrollDirective` that it should
                 * maintain the Scroll Position when Adding Content to the top of the list
                 */
                this.scrollOptions = { maintainScrollUpPosition: true, maintainScrollDownPosition: false, nbLines: itemIndex };
            }
            if (this.isNextPageRequested) {
                /**
                 * This variable is set and given as an input to the `ResultScrollDirective`.
                 * The objective of this input is to inform `ResultScrollDirective` that it should
                 * maintain the Scroll Position when Adding Content to the bottom of the list
                 */
                this.scrollOptions = { maintainScrollUpPosition: false, maintainScrollDownPosition: true, nbLines: itemIndex };
            }
            this.setSelectedItems(this.selectedItems);
            this.isNextPageRequested = false;
            this.isPreviousPageRequested = false;
            this.onResultListUpdate.emit(true);
        }
    }
    emitVisibleItems(items) {
        this.emitVisibleItemsDebouncer.next(items);
    }
    /**
     * @description Emits the event of asking for next or previous page of items
     * @param referenceIdentifier : item identifier used as reference to fetch the next/previous page
     * @param whichPage : Whether to fetch the `next` or `previous` page
     */
    paginate(itemData, whichPage) {
        this.isNextPageRequested = whichPage === PageEnum.next;
        this.isPreviousPageRequested = whichPage === PageEnum.previous;
        this.scrollDebouncer.next({ reference: itemData, whichPage: whichPage });
    }
    /**
     * @description Emits which action to apply on which item/product
     */
    triggerActionOnItem(actionOnItem) {
        this.actionOnItemEvent.next(actionOnItem);
    }
    /**
     * @description Sets and emits the action to apply to all selected items
     */
    setGlobalAction(action) {
        this.globalActionEvent.next(action);
    }
    setGeoSortAction() {
        if (!this.isGeoSortActivated) {
            this.geoSort();
        }
        this.isGeoSortActivated = !this.isGeoSortActivated;
        this.geoAutoSortEvent.next(this.isGeoSortActivated);
    }
    /**
     * @description Sets and emits the [fieldName, filterValue] map of filtered fields
     */
    // Emits a map of only filtered fields
    setFilters(filtersMap) {
        this.filtersMap = filtersMap;
        this.setFiltersEvent.next(this.filtersMap);
    }
    /**
     * @description Sets and emits the identifiers list of selected items
     */
    setSelectedItems(selectedItems, stopPropagation) {
        // remove all text selection on current document
        // SB : Sometime blinking append, need to be deepened
        document.getSelection().removeAllRanges();
        this.selectedItems = selectedItems;
        if (selectedItems.size < this.items.length) {
            this.allItemsChecked = false;
        }
        else if (this.items.length !== 0) {
            this.allItemsChecked = this.items.filter(i => i.isChecked).length === this.items.length;
        }
        this.selectedItemsEvent.next(Array.from(this.selectedItems));
        if (this.isShiftDown && this.selectedItems.size > 1 && !stopPropagation) {
            this.selectInBetween();
        }
    }
    /**
     * @description Emits the column to sort on and the sort direction
     */
    sort(paramSortedColumn) {
        this.isGeoSortActivated = false;
        paramSortedColumn.sortDirection = this.sortedColumn.sortDirection;
        this.columns.forEach(column => {
            if (column.fieldName !== paramSortedColumn.fieldName) {
                column.sortDirection = SortEnum.none;
            }
        });
        this.sortColumnEvent.next(paramSortedColumn);
        // Reset direction to ASC after a clean
        if (this.sortedColumn.sortDirection === SortEnum.none) {
            this.sortedColumn.sortDirection = SortEnum.asc;
        }
    }
    setDirection(event) {
        event.stopPropagation();
        if (this.sortedColumn.sortDirection === SortEnum.asc) {
            this.sortedColumn.sortDirection = SortEnum.desc;
        }
        else {
            this.sortedColumn.sortDirection = SortEnum.asc;
        }
        this.sort(this.sortedColumn);
    }
    setSortedColumn(event) {
        if (event.value) {
            this.sortedColumn = {
                columnName: event.value.columnName,
                fieldName: event.value.fieldName,
                sortDirection: this.sortedColumn?.sortDirection ?? SortEnum.none
            };
        }
        else {
            this.sortedColumn = {
                columnName: '',
                fieldName: '',
                sortDirection: SortEnum.none
            };
        }
        this.sort(this.sortedColumn);
    }
    /**
     * @description Emits the request event of geo-sorting
     */
    geoSort() {
        this.columns.forEach(column => {
            if (!column.isIdField) {
                column.sortDirection = SortEnum.none;
            }
        });
        // Reset column filter when geo sort request
        this.sortedColumn = null;
        this.currentSortedColumn = null;
        this.geoSortEvent.next(this.GEO_DISTANCE);
    }
    /**
     * @description Sets and emits the hovered item's identifier
     */
    setConsultedItem(identifier) {
        const elementidentifier = {
            idFieldName: this.fieldsConfiguration.idFieldName,
            idValue: identifier
        };
        this.debouncer.next(elementidentifier);
    }
    /**
     * @description called on hovering an item : its sets the items actions + emits the item's identifier
     * @param item hovered item
     */
    onEnterItem(item) {
        this.setConsultedItem(item.identifier);
        this.notifier.notifyItemHover(item);
    }
    /**
     * @description called on leaving an item : emits the item's identifier
     * @param item item previously hovered
     */
    onLeaveItem(item) {
        this.setConsultedItem('leave-' + item.identifier);
    }
    /**
     * @description Called when item is clicked. It is instant compared to other events
     * @param item Item clicked on
     */
    onClickItem(item) {
        const elementidentifier = {
            idFieldName: this.fieldsConfiguration.idFieldName,
            idValue: item.identifier
        };
        this.clickOnItemEvent.next(elementidentifier);
    }
    /**
     * @description Sets the border style of rows
     */
    setBorderStyle(borderStyle) {
        this.borderStyle = borderStyle;
    }
    /**
     * @description Sets the selected grid item
     */
    setSelectedGridItem(item) {
        this.selectedGridItem = item;
        this.isDetailledGridOpen = true;
        this.setTableHeight();
        this.clickOnTile.next(item);
    }
    closeDetail(isClosed) {
        if (isClosed) {
            this.isDetailledGridOpen = false;
            this.setTableHeight();
        }
    }
    /**
     * @description Sets the display style according to the mode
     */
    whichMode(toggleChangeEvent) {
        if (toggleChangeEvent.value === ModeEnum.grid.toString()) {
            this.resultMode = ModeEnum.grid;
            this.displayListGrid = 'block';
        }
        else {
            this.resultMode = ModeEnum.list;
            this.displayListGrid = 'inline';
        }
        this.changeResultMode.next(this.resultMode);
        this.setTableHeight();
    }
    /**
     * @description Selects all the items
     */
    selectAllItems() {
        this.allItemsChecked = !this.allItemsChecked;
        this.selectedItems = new Set();
        this.items.forEach(item => {
            item.isChecked = this.allItemsChecked;
            item.isindeterminated = false;
            if (this.allItemsChecked) {
                this.selectedItems.add(item.identifier);
            }
        });
        this.setSelectedItems(this.selectedItems);
    }
    /**
     * @description Selects all the items between the farest and nearest selected items
     */
    selectInBetween() {
        const selectedItemsList = new Array();
        this.items.forEach(i => {
            if (this.selectedItems.has(i.identifier)) {
                selectedItemsList.push(i);
            }
        });
        if (selectedItemsList.length > 0) {
            const firstItem = selectedItemsList[0];
            const lastItem = selectedItemsList[selectedItemsList.length - 1];
            let inBetween = false;
            this.items.forEach(item => {
                if (item === firstItem) {
                    inBetween = true;
                }
                if (item === lastItem) {
                    inBetween = false;
                }
                if (inBetween) {
                    item.isChecked = true;
                    item.isindeterminated = false;
                    this.selectedItems.add(item.identifier);
                }
            });
            this.setSelectedItems(this.selectedItems, true);
        }
    }
    /**
     * @description Emits the column when a filter is addedd
     */
    columnChanged(colum) {
        this.columnFilterChanged.next(colum);
    }
    /**
     * @description Clear set of selection
     */
    clearSelection() {
        this.setSelectedItems(new Set());
        this.items.forEach(item => {
            item.isChecked = false;
            item.isindeterminated = false;
        });
    }
    byFieldName(item1, item2) {
        return item1 && item2 ? item1.fieldName === item2.fieldName : item1 === item2;
    }
    // Build the table's columns
    setColumns() {
        this.columns = new Array();
        const checkboxColumnWidth = 25;
        const toggleColumnWidth = 35;
        // id column is the first one and has a pre fixed width
        // It is the column where checkboxes are put
        const idColumn = new Column('', this.fieldsConfiguration.idFieldName, '');
        idColumn.isIdField = true;
        idColumn.width = checkboxColumnWidth;
        this.columns.unshift(idColumn);
        this.fieldsList.forEach(field => {
            const column = new Column(field.columnName, field.fieldName, field.dataType);
            column.width = (this.tableWidth - checkboxColumnWidth - toggleColumnWidth) / this.fieldsList.length;
            column.useColorService = field.useColorService ? field.useColorService : false;
            this.columns.push(column);
        });
        // add a column for toggle icon
        const toggleColumn = new Column('', 'toggle', '');
        toggleColumn.isToggleField = true;
        toggleColumn.width = toggleColumnWidth;
        this.columns.push(toggleColumn);
    }
    onAddItems(itemData, addOnTop, index) {
        const item = new Item(this.columns, itemData);
        item.identifier = itemData.get(this.fieldsConfiguration.idFieldName);
        if (this.fieldsConfiguration.titleFieldNames) {
            item.title = this.fieldsConfiguration.titleFieldNames
                .map(field => itemData.get(field.fieldPath + '_title'))
                .join(' ');
            if (item.title) {
                item.title = item.title.trim();
            }
        }
        if (this.useColorService && this.fieldsConfiguration.iconColorFieldName) {
            const colorFieldValue = itemData.get(this.fieldsConfiguration.iconColorFieldName + '_title');
            if (colorFieldValue) {
                item.color = this.colorService.getColor(colorFieldValue, this.keysToColors, this.colorsSaturationWeight);
            }
        }
        if (this.fieldsConfiguration.tooltipFieldNames) {
            item.tooltip = this.fieldsConfiguration.tooltipFieldNames
                .map(field => itemData.get(field.fieldPath + '_tooltip'))
                .join(' ');
            if (item.tooltip) {
                item.tooltip = item.tooltip.trim();
            }
        }
        if (this.fieldsConfiguration.icon) {
            item.icon = this.fieldsConfiguration.icon;
        }
        if (this.fieldsConfiguration.iconCssClass) {
            item.iconCssClass = itemData.get(this.fieldsConfiguration.iconCssClass);
            if (item.iconCssClass) {
                item.iconCssClass = item.iconCssClass.trim();
            }
        }
        item.imageEnabled = itemData.get('imageEnabled') === 'true';
        item.thumbnailEnabled = itemData.get('thumbnailEnabled') === 'true';
        item.detailsTitleEnabled = itemData.get('detailsTitleEnabled') === 'true';
        /** Retro-compatibility code */
        if (item.imageEnabled && this.fieldsConfiguration.urlImageTemplate) {
            item.urlImages = new Array();
            item.urlImages.push(matchAndReplace(itemData, this.fieldsConfiguration.urlImageTemplate));
        }
        /** End of retro-compatibility code */
        if (item.imageEnabled && this.fieldsConfiguration.urlImageTemplates && this.fieldsConfiguration.urlImageTemplates.length > 0) {
            item.urlImages = new Array();
            item.descriptions = new Array();
            this.fieldsConfiguration.urlImageTemplates.forEach(descUrl => {
                let condition = !descUrl.filter;
                if (descUrl.filter) {
                    const data = itemData.get(descUrl.filter.field);
                    if (Array.isArray(data)) {
                        condition = data.some(v => descUrl.filter.values.includes(v));
                    }
                    else if (data) {
                        condition = descUrl.filter.values.includes(data.toString());
                    }
                    else {
                        condition = false;
                    }
                }
                if (condition) {
                    item.urlImages.push(matchAndReplace(itemData, descUrl.url));
                    item.descriptions.push(matchAndReplace(itemData, descUrl.description));
                }
            });
        }
        if (item.thumbnailEnabled && this.fieldsConfiguration.urlThumbnailTemplate) {
            item.urlThumbnail = matchAndReplace(itemData, this.fieldsConfiguration.urlThumbnailTemplate);
        }
        if (item.detailsTitleEnabled && this.fieldsConfiguration.detailsTitleTemplate) {
            item.detailsTitle = matchAndReplace(itemData, this.fieldsConfiguration.detailsTitleTemplate);
        }
        item.position = this.items.length + 1;
        item.ishighLight = undefined;
        // When new data is loaded, check the one that were already checked +
        // remove the no longuer existing data from selectedItems (thanks to actualSelectedItems)
        if (this.allItemsChecked && (this.isNextPageRequested || this.isPreviousPageRequested)) {
            item.isChecked = true;
            this.selectedItems.add(item.identifier);
        }
        else {
            if (this.selectedItems.has(item.identifier)) {
                item.isChecked = true;
            }
            if (this.indeterminatedItems.has(item.identifier)) {
                item.isindeterminated = true;
            }
            else {
                item.isindeterminated = false;
            }
        }
        if (addOnTop) {
            this.items.splice(index, 0, item);
        }
        else {
            this.items.push(item);
        }
    }
    setTableWidth() {
        if (this.tableWidth === null) {
            const nativeElement = this.el.nativeElement;
            if (nativeElement.childNodes && nativeElement.childNodes.length > 0 && nativeElement.childNodes[0]) {
                this.tableWidth = this.el.nativeElement.childNodes[0].offsetWidth;
            }
        }
    }
    /**
     * @description Sets the table head and body height
     */
    setTableHeight(nbTrials = 0) {
        const tableElement = this.el.nativeElement.parentElement;
        if (!!tableElement && tableElement.getBoundingClientRect().height !== 0) {
            this.theadHeight = this.COLUMN_ACTIONS_HEIGHT +
                // Only in list mode
                this.COLUMN_NAME_HEIGHT * (this.resultMode === ModeEnum.list ? 1 : 0) +
                // Only if filters are present
                this.FILTERS_HEIGHT * (this.displayFilters ? 1 : 0);
            this.tbodyHeight = tableElement.getBoundingClientRect().height - this.theadHeight -
                // Only if the list is in grid mode
                this.TAIL_HEIGHT * (this.resultMode === ModeEnum.grid ? 1 : 0) -
                // Only if the list is in grid mode and has an element selected
                this.detailedGridHeight * (this.resultMode === ModeEnum.grid ? 1 : 0) * (this.isDetailledGridOpen ? 1 : 0);
            this.cdr.detectChanges();
        }
        else {
            // If the container has no height then try again for up to 10 times
            // Because of an issue with the DOM not loading properly the parent container, its height can be detected to be 0,
            // even with a preset height. Multiple tiemout values were tested, but they don't have an impact on this behavior.
            if (nbTrials < 10) {
                setTimeout(() => this.setTableHeight(nbTrials + 1), 0);
            }
            else {
                console.error('Failed to load the result list\'s height in less than 10 trials.' +
                    'Try to limit the element visibility to when it is really on screen to avoid this issue.');
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultListComponent, deps: [{ token: i0.IterableDiffers }, { token: i0.IterableDiffers }, { token: i0.ElementRef }, { token: i1.ArlasColorService }, { token: i2.TranslateService }, { token: i3.ResultlistNotifierService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: ResultListComponent, selector: "arlas-result-list", inputs: { options: "options", fetchState: "fetchState", fieldsList: "fieldsList", rowItemList: "rowItemList", fieldsConfiguration: "fieldsConfiguration", tableWidth: "tableWidth", nLastLines: "nLastLines", nbLinesBeforeFetch: "nbLinesBeforeFetch", detailedGridHeight: "detailedGridHeight", nbGridColumns: "nbGridColumns", globalActionsList: "globalActionsList", detailedDataRetriever: "detailedDataRetriever", indeterminatedItems: "indeterminatedItems", selectedItems: "selectedItems", activatedActionsPerItem: "activatedActionsPerItem", highlightItems: "highlightItems", defautMode: "defautMode", isBodyHidden: "isBodyHidden", displayFilters: "displayFilters", isGeoSortEnabled: "isGeoSortEnabled", isGeoSortActivated: "isGeoSortActivated", currentSortedColumn: "currentSortedColumn", filtersMap: "filtersMap", dropDownMapValues: "dropDownMapValues", displayThead: "displayThead", keysToColors: "keysToColors", colorsSaturationWeight: "colorsSaturationWeight", useColorService: "useColorService", cellBackgroundStyle: "cellBackgroundStyle", selectedGridItem: "selectedGridItem", showEmptyGroup: "showEmptyGroup", isDetailledGridOpen: "isDetailledGridOpen", thumbnailFit: "thumbnailFit" }, outputs: { sortColumnEvent: "sortColumnEvent", geoSortEvent: "geoSortEvent", geoAutoSortEvent: "geoAutoSortEvent", selectedItemsEvent: "selectedItemsEvent", consultedItemEvent: "consultedItemEvent", clickOnItemEvent: "clickOnItemEvent", setFiltersEvent: "setFiltersEvent", moreDataEvent: "moreDataEvent", paginationEvent: "paginationEvent", actionOnItemEvent: "actionOnItemEvent", globalActionEvent: "globalActionEvent", columnFilterChanged: "columnFilterChanged", clickOnTile: "clickOnTile", changeResultMode: "changeResultMode", visibleItems: "visibleItems", onChangeItems: "onChangeItems", thumbnailFitEvent: "thumbnailFitEvent", onResultListUpdate: "onResultListUpdate", onListLoaded: "onListLoaded" }, host: { listeners: { "document:keydown.shift": "shiftDown($event)", "document:keyup.shift": "shiftUp($event)" } }, usesOnChanges: true, ngImport: i0, template: "<table [style.width.px]=\"tableWidth\" class=\"resultlist\">\n  <thead *ngIf=\"displayThead\">\n    <tr class=\"resultlist__filter resultlist__thead__tr\" *ngIf=\"this.displayFilters\">\n      <ng-container *ngFor=\"let column of columns\">\n        <td [style.width.px]=\"column.width\" *ngIf=\"column.isIdField\">\n          <span class=\"resultlist__header--columns--hidden\"></span>\n        </td>\n        <td arlas-result-filter class=\"resultlist__filter__{{column.columnName}}\"\n          *ngIf=\"!column.isIdField && !column.isToggleField\"\n          matTooltip=\"{{FILTER_ON | translate}} {{column.columnName  | translate}}\" [style.width.px]=\"column.width\"\n          [column]=\"column\" [dropdownValues]=\"dropDownMapValues?.get(column.fieldName)|async\" [filtersMap]=\"filtersMap\"\n          (columnChanged)=\"columnChanged($event)\" (setFiltersEvent)=\"setFilters($event)\">\n        </td>\n        <td *ngIf=\"column.isToggleField\" [style.width.px]=\"column.width\">\n          <span class=\"resultlist__header--columns--hidden\"></span>\n        </td>\n      </ng-container>\n    </tr>\n    <tr class=\"resultlist__tools resultlist__thead__tr\">\n      <td [style.width.px]=\"tableWidth\" class=\"resultlist__tools__td\">\n        <div class=\"resultlist__tools--select\">\n          <div class=\"resultgrid--checkbox\">\n            <mat-checkbox (change)=\"selectAllItems()\" [checked]=\"allItemsChecked\"\n              [indeterminate]=\"!allItemsChecked && selectedItems.size > 0\"></mat-checkbox>\n            <div class=\"resultgrid--checkbox__count\">\n              {{selectedItems.size}}\n            </div>\n          </div>\n          <div class=\"resultlist__tools--menu\">\n              <mat-icon id=\"global_actions_btn\" matTooltip=\"{{GLOBAL_ACTIONS | translate}}\" mat-icon-button [matMenuTriggerFor]=\"menu\" *ngIf=\"globalActionsList.length > 0\">more_vert</mat-icon>\n              <mat-menu #menu=\"matMenu\">\n                <button id=\"{{action.label + '_btn'}}'\" *ngFor=\"let action of globalActionsList\"  [disabled]=\"!action.alwaysEnabled && selectedItems.size===0\" mat-menu-item (click)=\"setGlobalAction(action)\">\n                  {{action.label | translate}}\n                </button>\n              </mat-menu>\n          </div>\n        </div>\n        <div class=\"resultlist__tools--separator\">|</div>\n        <div class=\"resultlist__tools--sort-container\" id=\"resultlist_sort\">\n          <mat-slide-toggle *ngIf=\"isGeoSortEnabled\" class=\"resultlist__tools--geosort\"\n            [disableRipple]=\"true\" [checked]=\"isGeoSortActivated\" [labelPosition]=\"'before'\"\n            matTooltip=\"{{GEOSORT_ACTION | translate}}\" (change)=\"setGeoSortAction()\" [hideIcon]=\"true\">\n            {{GEOSORT_BUTTON | translate}}</mat-slide-toggle>\n          <mat-select class=\"resultlist__tools--sort\" [panelClass]=\"'resultlist__tools--sort'\"\n            [compareWith]=\"byFieldName\" (selectionChange)=\"setSortedColumn($event)\"\n            [ngModel]=\"sortedColumn\" placeholder=\"{{'Sort on' | translate}}\">\n              <mat-select-trigger>\n                @if (sortedColumn?.fieldName) {\n                  <span>\n                    {{sortedColumn.columnName | translate}}\n                  </span>\n                }\n              </mat-select-trigger>\n              <mat-option [value]=\"\" class=\"resultlist__tools--sort-option\"> - - </mat-option>\n              @for (column of columns; track column.fieldName) {\n                @if (!column.isIdField && !column.isToggleField) {\n                  <mat-option [value]=\"column\" class=\"resultlist__tools--sort-option\">\n                    {{column.columnName | translate}}\n                  </mat-option>\n                }\n              }\n          </mat-select>\n          @if (sortedColumn?.fieldName) {\n            <mat-button mat-icon-button class=\"resultlist__tools--sort-direction\" (click)=\"setDirection($event)\"\n                (keydown)=\"setDirection($event)\" [matTooltip]=\"'Change sort direction' | translate\">\n              <mat-icon [class.reversed]=\"sortedColumn.sortDirection === SortEnum.asc\">trending_flat</mat-icon>\n            </mat-button>\n          }\n        </div>\n        <ng-container *ngIf=\"hasGridMode\">\n          <div class=\"resultlist__tools--separator\">|</div>\n          <div class=\"resultlist__tools--mode\" id=\"resultlist_mode\">\n            <mat-button-toggle-group [name]=\"'modeGroup'\" (change)=\"whichMode($event)\" [hideSingleSelectionIndicator]=\"true\">\n              <mat-button-toggle id=\"list_mode_btn\" matTooltip=\"{{LIST_MODE | translate}}\" value=\"{{ModeEnum.list}}\"\n                [checked]=\"resultMode==ModeEnum.list\">\n                <mat-icon>list</mat-icon>\n              </mat-button-toggle>\n              <mat-button-toggle id=\"grid_mode_btn\" matTooltip=\"{{GRID_MODE | translate}}\" value=\"{{ModeEnum.grid}}\"\n                [checked]=\"resultMode==ModeEnum.grid\">\n                <mat-icon>grid_view</mat-icon>\n              </mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </ng-container>\n      </td>\n    </tr>\n    <tr class=\"resultlist__header resultlist__thead__tr\" *ngIf=\"resultMode !== ModeEnum.grid\">\n      <ng-container *ngFor=\"let column of columns\">\n        <th *ngIf=\"column.isIdField\" [style.max-width.px]=\"column.width\" [style.min-width.px]=\"column.width\"\n          class=\"resultlist__header--columns\">\n          <span class=\"resultlist__header--columns--hidden\"></span>\n        </th>\n        <th *ngIf=\"!column.isIdField && !column.isToggleField\" [style.max-width.px]=\"column.width\"\n          [style.min-width.px]=\"column.width\" class=\"resultlist__header--columns\"\n          [matTooltip]=\"(column.columnName | translate) + (!!column.dataType ? '(' + column.dataType + ')' : '')\">\n          <span>\n            {{column.columnName | translate}}{{column.dataType ? ' (' + column.dataType + ')': ''}}\n          </span>\n        </th>\n        <th *ngIf=\"column.isToggleField\" class=\"resultlist__header--columns\" [style.max-width.px]=\"column.width\"\n          [style.min-width.px]=\"column.width\">\n          <span class=\"resultlist__header--columns--hidden\">\n          </span>\n        </th>\n      </ng-container>\n    </tr>\n    <tr class=\"resultlist__grid-detail resultlist__thead__tr\"\n      *ngIf=\"selectedGridItem !== null && resultMode === ModeEnum.grid && isDetailledGridOpen\">\n      <td class=\"resultlist__grid-detail--td\" [colSpan]=\"columns?.length\">\n        <arlas-result-detailed-grid [gridTile]=\"selectedGridItem\" [detailWidth]=\"tableWidth\"\n          [activatedActionsPerItem]=\"activatedActionsPerItem\"\n          [detailHeight]=\"detailedGridHeight\" [idFieldName]=\"fieldsConfiguration.idFieldName\"\n          [isDetailShowed]=\"isDetailledGridOpen\" (actionOnItemEvent)=\"triggerActionOnItem($event)\"\n          [showEmptyGroup]=\"showEmptyGroup\" [useHttp]=\"fieldsConfiguration.useHttpQuicklooks\"\n          (closeDetail)=\"closeDetail($event)\">\n        </arlas-result-detailed-grid>\n      </td>\n    </tr>\n  </thead>\n  <div *ngIf=\"isPreviousPageRequested\" class=\"resultlist__loading resultlist__top_loading\"\n    [style.width.px]=\"tableWidth\">\n    <ngx-loading [show]=\"isPreviousPageRequested\" [config]=\"loadAnimationConfig\"></ngx-loading>\n  </div>\n  <tbody class=\"resultlist__tbody\" arlasResultScroll *ngIf=\"!isBodyHidden\" [style.overflow-anchor]=\"'none'\"\n    [style.height.px]=\"tbodyHeight\" [scrollOptions]=\"scrollOptions\" [items]=\"items\" [style.position]=\"'relative'\"\n    [nbGridColumns]=\"nbGridColumns\"\n    [nbLinesBeforeFetch]=\"(nbLinesBeforeFetch !== undefined) ? nbLinesBeforeFetch:nLastLines\" [fetchState]=\"fetchState\"\n    [resultMode]=\"resultMode\" (visibleItems)=\"emitVisibleItems($event)\"\n    (nextDataEvent)=\"paginate($event, PageEnum.next)\" (previousDataEvent)=\"paginate($event, PageEnum.previous)\">\n    <mat-grid-list cols=\"{{nbGridColumns}}\" rowHeight=\"1:1\" [style.display]=\"displayListGrid\">\n      <ng-container *ngFor=\"let rowItem of items; index as i\">\n        <ng-container *ngIf=\"resultMode === ModeEnum.list; else grid_mode\">\n          <tr arlas-result-item [activatedActionsPerItem]=\"activatedActionsPerItem\" id=\"{{rowItem.identifier}}\" class=\"resultlist__body--item-hover-{{rowItem.ishighLight}}\"\n            [options]=\"options\" (mouseenter)=\"onEnterItem(rowItem)\" (mouseleave)=\"onLeaveItem(rowItem)\"\n            (click)=\"onClickItem(rowItem)\" [idFieldName]=\"fieldsConfiguration.idFieldName\" [tableWidth]=\"tableWidth\"\n            [rowItem]=\"rowItem\" [useColorService]=\"useColorService\" [cellBackgroundStyle]=\"cellBackgroundStyle\"\n            [keysToColors]=\"keysToColors\" [colorsSaturationWeight]=\"colorsSaturationWeight\"\n            [detailedDataRetriever]=\"detailedDataRetriever\" [selectedItems]=\"selectedItems\"\n            (selectedItemsEvent)=\"setSelectedItems($event)\" (borderStyleEvent)=\"setBorderStyle($event)\"\n            [style.border-bottom-style]=\"borderStyle\" (actionOnItemEvent)=\"triggerActionOnItem($event)\"\n           >\n          </tr>\n          <tr arlas-result-detailed-item *ngIf=\"rowItem.isDetailToggled\" class=\"resultlist__body--detailed-item\"\n            (mouseenter)=\"onEnterItem(rowItem)\" (mouseleave)=\"onLeaveItem(rowItem)\"\n            [detailedDataRetriever]=\"detailedDataRetriever\"\n            [activatedActionsPerItem]=\"activatedActionsPerItem\"\n            [detailColspan]=\"rowItem.columns.length\" [rowItem]=\"rowItem\" [showEmptyGroup]=showEmptyGroup\n            [idFieldName]=\"fieldsConfiguration.idFieldName\" (actionOnItemEvent)=\"triggerActionOnItem($event)\">\n          </tr>\n\n        </ng-container>\n        <ng-template #grid_mode>\n          <div class=\"div-grid-tile\" (mouseenter)=\"onEnterItem(rowItem)\" (mouseleave)=\"onLeaveItem(rowItem)\" >\n            <mat-grid-tile *ngIf=\"resultMode === ModeEnum.grid\" class=\"resultlist__md-grid-tile\">\n              <arlas-result-grid-tile\n                [activatedActionsPerItem]=\"activatedActionsPerItem\"\n                [displayInfoIcon]=\"rowItem.identifier === selectedGridItem?.identifier && isDetailledGridOpen\"\n                [thumbnailFit]=\"thumbnailFit\"\n                id=\"{{rowItem.identifier}}\" class=\"resultlist__grid-tile\" [options]=\"options\" [gridTile]=\"rowItem\"\n                [selectedItems]=\"selectedItems\" [detailedDataRetriever]=\"detailedDataRetriever\"\n                (selectedItemsEvent)=\"setSelectedItems($event)\" (clickedOnItemEvent)=\"setSelectedGridItem($event)\"\n                [idFieldName]=\"fieldsConfiguration.idFieldName\" (actionOnItemEvent)=\"triggerActionOnItem($event)\">\n              </arlas-result-grid-tile>\n            </mat-grid-tile>\n          </div>\n        </ng-template>\n      </ng-container>\n    </mat-grid-list>\n  </tbody>\n  <div *ngIf=\"resultMode === ModeEnum.grid\" class=\"resultlist-thumbnails-fit\">\n    <mat-button-toggle-group [name]=\"'thumbnailFitGroup'\" (change)=\"emitThumbnailsFitStatus($event)\"\n        class=\"fit-group\" [hideSingleSelectionIndicator]=\"true\">\n      <mat-button-toggle matTooltip=\"{{WIDTH_FIT | translate}}\" value=\"{{ThumbnailFitEnum.width}}\"\n        [checked]=\"thumbnailFit==ThumbnailFitEnum.width\">\n        <mat-icon style=\"transform: rotate(-90deg)\" class=\"fit-icon\">expand</mat-icon>\n      </mat-button-toggle>\n      <mat-button-toggle matTooltip=\"{{CONTAIN_FIT | translate}}\" value=\"{{ThumbnailFitEnum.contain}}\"\n        [checked]=\"thumbnailFit==ThumbnailFitEnum.contain\" class=\"contain-icon-wrapper\">\n        <mat-icon class=\"contain-icon fit-icon\">expand</mat-icon>\n        <mat-icon class=\"fit-icon\">expand</mat-icon>\n      </mat-button-toggle>\n      <mat-button-toggle matTooltip=\"{{HEIGHT_FIT | translate}}\" value=\"{{ThumbnailFitEnum.height}}\"\n        [checked]=\"thumbnailFit==ThumbnailFitEnum.height\">\n        <mat-icon class=\"fit-icon\">expand</mat-icon>\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n  <div *ngIf=\"isNextPageRequested\" class=\"resultlist__loading resultlist__bottom_loading\" [style.width.px]=\"tableWidth\">\n    <ngx-loading [show]=\"isNextPageRequested\" [config]=\"loadAnimationConfig\"></ngx-loading>\n  </div>\n</table>\n", styles: ["@charset \"UTF-8\";.resultlist__header{text-align:center;height:25px}.resultlist__header--columns{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.9em;text-align:left;vertical-align:middle;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;box-sizing:border-box}.resultlist__header--columns__sort{float:right}.resultlist__header--columns__sort--icon{font-size:18px}.resultlist{width:100%;overflow:hidden;display:table;table-layout:fixed;margin-bottom:0;border-collapse:collapse}.resultlist__tools__td{padding:5px;display:flex;flex-direction:row;align-items:center}.resultlist__loading{width:100%;height:100px;position:absolute;z-index:1000;background-color:#fff;opacity:.7}.resultlist__bottom_loading{bottom:0}.resultlist__body--item{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef}.resultlist__body--item-hover-true{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef;background-color:#fff;position:relative;font-weight:500}.resultlist__body--item-hover-{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef;position:relative;background-color:#fff}.resultlist__body--item-hover-false{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef;position:relative;background-color:#eee;color:#aaa}tr:hover .toggle .actions arlas-result-actions .list_actions .not_activated{display:block}.resultlist__lastline{border-top:1px dashed #e9ecef;border-bottom:0px solid #e9ecef}.resultlist__body--detailed-item{border-top:1px dashed #e9ecef;border-bottom:1px solid #e9ecef;background-color:#fff}.resultlist__header,.resultlist__filter,.resultlist__tools,.resultlist__grid-detail{border-top:1px solid #e9ecef;border-bottom:1px solid #e9ecef}.resultlist-thumbnails-fit{display:flex;align-items:center;justify-content:center;height:30px}.resultlist-thumbnails-fit .mat-button-toggle-label-content{line-height:36px!important;height:36px;width:36px;padding:0!important}.resultlist__tools{height:50px;overflow:hidden}.resultlist__tools .resultlist__tools--geosort{font-size:14px;padding-right:10px;white-space:nowrap;overflow:hidden;--mdc-switch-track-height: 10px;--mdc-switch-handle-width: 15px;--mdc-switch-track-width: 30px;--mdc-switch-state-layer-size: 0}.resultlist__tools .resultlist__tools--geosort .mdc-switch__handle{--mat-switch-unselected-handle-size: 15px;--mat-switch-selected-handle-size: 15px;--mat-switch-pressed-handle-size: 15px}.resultlist__tools .resultlist__tools--geosort .mdc-form-field--align-end>label{padding-right:10px}.resultlist__grid-detail{display:block;margin-bottom:3px}.resultlist__grid-detail--td{padding:0!important}.resultlist__tools--select{flex:1;display:flex;align-items:center;justify-content:space-between}.resultgrid--checkbox{float:left;display:flex;align-items:center;--mdc-checkbox-state-layer-size: 18px}.resultgrid--checkbox__count{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.7em;font-weight:700;padding:2px 0 0 8px;min-width:21px}.resultlist__tools--menu{cursor:pointer;float:left;padding-top:6px}.resultlist__tools--mode{text-align:right}.resultlist__tools--mode .mat-button-toggle-label-content{line-height:36px!important;height:36px;width:36px;padding:0!important}.resultlist__grid-tile{display:block;height:100%;width:100%}.resultlist__thead__tr{display:block;position:relative;width:100%}.resultlist__tbody{display:block;overflow-y:auto;overflow-x:hidden;width:100%;background-color:#ddd}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}.select_between__icon,.select_all__icon_check{cursor:pointer}.resultgrid__clear{font-size:14px;width:14px;height:14px;cursor:pointer}.resultlist__tools--sort-container{flex:1;font-size:14px;display:flex;align-items:center}.resultlist__tools--sort-container .resultlist__tools--sort{flex:1;padding-right:5px;--mdc-typography-body1-font-size: 14px}.resultlist__tools--sort-container .resultlist__tools--sort .mat-mdc-select-trigger{gap:5px}.resultlist__tools--sort-container .resultlist__tools--sort-direction mat-icon{transform:rotate(90deg);font-size:18px;height:18px;width:18px;cursor:pointer}.resultlist__tools--sort-container .resultlist__tools--sort-direction .reversed{transform:rotate(-90deg)}.resultlist__tools--separator{padding:0 5px;color:#d3d3d3;font-size:24px;font-weight:100}.fit-images{color:#9b9b9b}.cover-images{color:#444}.fit-group{height:25px;align-items:center}.contain-icon{position:absolute;top:10px;transform:rotate(90deg)}.fit-icon{height:18px!important;width:18px!important;font-size:18px}.contain-icon-wrapper{position:relative}.cdk-overlay-pane:has(.mat-mdc-select-panel.resultlist__tools--sort){width:auto!important;--mat-select-trigger-text-tracking: 0;--mat-option-label-text-tracking: 0;--mat-option-label-text-size: 14px;--mdc-radio-state-layer-size: 20px}.cdk-overlay-pane:has(.mat-mdc-select-panel.resultlist__tools--sort) .mat-mdc-option{min-height:30px}.cdk-overlay-pane:has(.mat-mdc-select-panel.resultlist__tools--sort) .mat-mdc-option.mdc-list-item--disabled{opacity:unset}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i6.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled", "disabledInteractive", "hideSingleSelectionIndicator", "hideMultipleSelectionIndicator"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { kind: "component", type: i6.MatButtonToggle, selector: "mat-button-toggle", inputs: ["aria-label", "aria-labelledby", "id", "name", "value", "tabIndex", "disableRipple", "appearance", "checked", "disabled", "disabledInteractive"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { kind: "component", type: i7.MatGridList, selector: "mat-grid-list", inputs: ["cols", "gutterSize", "rowHeight"], exportAs: ["matGridList"] }, { kind: "component", type: i7.MatGridTile, selector: "mat-grid-tile", inputs: ["rowspan", "colspan"], exportAs: ["matGridTile"] }, { kind: "component", type: i8.MatCheckbox, selector: "mat-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "disableRipple", "tabIndex", "color", "disabledInteractive", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { kind: "component", type: i9.MatMenu, selector: "mat-menu", inputs: ["backdropClass", "aria-label", "aria-labelledby", "aria-describedby", "xPosition", "yPosition", "overlapTrigger", "hasBackdrop", "class", "classList"], outputs: ["closed", "close"], exportAs: ["matMenu"] }, { kind: "component", type: i9.MatMenuItem, selector: "[mat-menu-item]", inputs: ["role", "disabled", "disableRipple"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i9.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", inputs: ["mat-menu-trigger-for", "matMenuTriggerFor", "matMenuTriggerData", "matMenuTriggerRestoreFocus"], outputs: ["menuOpened", "onMenuOpen", "menuClosed", "onMenuClose"], exportAs: ["matMenuTrigger"] }, { kind: "component", type: i10.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "directive", type: i10.MatSelectTrigger, selector: "mat-select-trigger" }, { kind: "component", type: i11.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: i12.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon", "disabledInteractive"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { kind: "directive", type: i13.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "directive", type: i14.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i14.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i15.NgxLoadingComponent, selector: "ngx-loading", inputs: ["show", "config", "template"] }, { kind: "component", type: i16.ResultGridTileComponent, selector: "arlas-result-grid-tile", inputs: ["gridTile", "thumbnailFit", "selectedItems", "detailedDataRetriever", "options", "idFieldName", "activatedActionsPerItem", "displayInfoIcon"], outputs: ["actionOnItemEvent", "selectedItemsEvent", "selectedItemPositionEvent", "clickedOnItemEvent"] }, { kind: "component", type: i17.ResultItemComponent, selector: "[arlas-result-item]", inputs: ["options", "rowItem", "idFieldName", "detailedDataRetriever", "selectedItems", "keysToColors", "colorsSaturationWeight", "useColorService", "cellBackgroundStyle", "activatedActionsPerItem", "tableWidth"], outputs: ["selectedItemsEvent", "actionOnItemEvent", "selectedItemPositionEvent", "borderStyleEvent"] }, { kind: "component", type: i18.ResultDetailedItemComponent, selector: "[arlas-result-detailed-item]", inputs: ["detailColspan", "idFieldName", "containerType", "rowItem", "showEmptyGroup", "detailedDataRetriever", "activatedActionsPerItem"], outputs: ["actionOnItemEvent"] }, { kind: "component", type: i19.ResultDetailedGridComponent, selector: "arlas-result-detailed-grid", inputs: ["gridTile", "detailWidth", "detailHeight", "idFieldName", "isDetailShowed", "showEmptyGroup", "useHttp", "activatedActionsPerItem", "detailedDataRetriever"], outputs: ["actionOnItemEvent", "closeDetail"] }, { kind: "component", type: i20.ResultFilterComponent, selector: "[arlas-result-filter]", inputs: ["column", "filtersMap", "inputValue", "dropdownValues"], outputs: ["setFiltersEvent", "columnChanged"] }, { kind: "directive", type: i21.ResultScrollDirective, selector: "[arlasResultScroll]", inputs: ["items", "nbLinesBeforeFetch", "nbGridColumns", "resultMode", "fetchState", "scrollOptions"], outputs: ["nextDataEvent", "previousDataEvent", "visibleItems"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "translate" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ResultListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-result-list', encapsulation: ViewEncapsulation.None, template: "<table [style.width.px]=\"tableWidth\" class=\"resultlist\">\n  <thead *ngIf=\"displayThead\">\n    <tr class=\"resultlist__filter resultlist__thead__tr\" *ngIf=\"this.displayFilters\">\n      <ng-container *ngFor=\"let column of columns\">\n        <td [style.width.px]=\"column.width\" *ngIf=\"column.isIdField\">\n          <span class=\"resultlist__header--columns--hidden\"></span>\n        </td>\n        <td arlas-result-filter class=\"resultlist__filter__{{column.columnName}}\"\n          *ngIf=\"!column.isIdField && !column.isToggleField\"\n          matTooltip=\"{{FILTER_ON | translate}} {{column.columnName  | translate}}\" [style.width.px]=\"column.width\"\n          [column]=\"column\" [dropdownValues]=\"dropDownMapValues?.get(column.fieldName)|async\" [filtersMap]=\"filtersMap\"\n          (columnChanged)=\"columnChanged($event)\" (setFiltersEvent)=\"setFilters($event)\">\n        </td>\n        <td *ngIf=\"column.isToggleField\" [style.width.px]=\"column.width\">\n          <span class=\"resultlist__header--columns--hidden\"></span>\n        </td>\n      </ng-container>\n    </tr>\n    <tr class=\"resultlist__tools resultlist__thead__tr\">\n      <td [style.width.px]=\"tableWidth\" class=\"resultlist__tools__td\">\n        <div class=\"resultlist__tools--select\">\n          <div class=\"resultgrid--checkbox\">\n            <mat-checkbox (change)=\"selectAllItems()\" [checked]=\"allItemsChecked\"\n              [indeterminate]=\"!allItemsChecked && selectedItems.size > 0\"></mat-checkbox>\n            <div class=\"resultgrid--checkbox__count\">\n              {{selectedItems.size}}\n            </div>\n          </div>\n          <div class=\"resultlist__tools--menu\">\n              <mat-icon id=\"global_actions_btn\" matTooltip=\"{{GLOBAL_ACTIONS | translate}}\" mat-icon-button [matMenuTriggerFor]=\"menu\" *ngIf=\"globalActionsList.length > 0\">more_vert</mat-icon>\n              <mat-menu #menu=\"matMenu\">\n                <button id=\"{{action.label + '_btn'}}'\" *ngFor=\"let action of globalActionsList\"  [disabled]=\"!action.alwaysEnabled && selectedItems.size===0\" mat-menu-item (click)=\"setGlobalAction(action)\">\n                  {{action.label | translate}}\n                </button>\n              </mat-menu>\n          </div>\n        </div>\n        <div class=\"resultlist__tools--separator\">|</div>\n        <div class=\"resultlist__tools--sort-container\" id=\"resultlist_sort\">\n          <mat-slide-toggle *ngIf=\"isGeoSortEnabled\" class=\"resultlist__tools--geosort\"\n            [disableRipple]=\"true\" [checked]=\"isGeoSortActivated\" [labelPosition]=\"'before'\"\n            matTooltip=\"{{GEOSORT_ACTION | translate}}\" (change)=\"setGeoSortAction()\" [hideIcon]=\"true\">\n            {{GEOSORT_BUTTON | translate}}</mat-slide-toggle>\n          <mat-select class=\"resultlist__tools--sort\" [panelClass]=\"'resultlist__tools--sort'\"\n            [compareWith]=\"byFieldName\" (selectionChange)=\"setSortedColumn($event)\"\n            [ngModel]=\"sortedColumn\" placeholder=\"{{'Sort on' | translate}}\">\n              <mat-select-trigger>\n                @if (sortedColumn?.fieldName) {\n                  <span>\n                    {{sortedColumn.columnName | translate}}\n                  </span>\n                }\n              </mat-select-trigger>\n              <mat-option [value]=\"\" class=\"resultlist__tools--sort-option\"> - - </mat-option>\n              @for (column of columns; track column.fieldName) {\n                @if (!column.isIdField && !column.isToggleField) {\n                  <mat-option [value]=\"column\" class=\"resultlist__tools--sort-option\">\n                    {{column.columnName | translate}}\n                  </mat-option>\n                }\n              }\n          </mat-select>\n          @if (sortedColumn?.fieldName) {\n            <mat-button mat-icon-button class=\"resultlist__tools--sort-direction\" (click)=\"setDirection($event)\"\n                (keydown)=\"setDirection($event)\" [matTooltip]=\"'Change sort direction' | translate\">\n              <mat-icon [class.reversed]=\"sortedColumn.sortDirection === SortEnum.asc\">trending_flat</mat-icon>\n            </mat-button>\n          }\n        </div>\n        <ng-container *ngIf=\"hasGridMode\">\n          <div class=\"resultlist__tools--separator\">|</div>\n          <div class=\"resultlist__tools--mode\" id=\"resultlist_mode\">\n            <mat-button-toggle-group [name]=\"'modeGroup'\" (change)=\"whichMode($event)\" [hideSingleSelectionIndicator]=\"true\">\n              <mat-button-toggle id=\"list_mode_btn\" matTooltip=\"{{LIST_MODE | translate}}\" value=\"{{ModeEnum.list}}\"\n                [checked]=\"resultMode==ModeEnum.list\">\n                <mat-icon>list</mat-icon>\n              </mat-button-toggle>\n              <mat-button-toggle id=\"grid_mode_btn\" matTooltip=\"{{GRID_MODE | translate}}\" value=\"{{ModeEnum.grid}}\"\n                [checked]=\"resultMode==ModeEnum.grid\">\n                <mat-icon>grid_view</mat-icon>\n              </mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </ng-container>\n      </td>\n    </tr>\n    <tr class=\"resultlist__header resultlist__thead__tr\" *ngIf=\"resultMode !== ModeEnum.grid\">\n      <ng-container *ngFor=\"let column of columns\">\n        <th *ngIf=\"column.isIdField\" [style.max-width.px]=\"column.width\" [style.min-width.px]=\"column.width\"\n          class=\"resultlist__header--columns\">\n          <span class=\"resultlist__header--columns--hidden\"></span>\n        </th>\n        <th *ngIf=\"!column.isIdField && !column.isToggleField\" [style.max-width.px]=\"column.width\"\n          [style.min-width.px]=\"column.width\" class=\"resultlist__header--columns\"\n          [matTooltip]=\"(column.columnName | translate) + (!!column.dataType ? '(' + column.dataType + ')' : '')\">\n          <span>\n            {{column.columnName | translate}}{{column.dataType ? ' (' + column.dataType + ')': ''}}\n          </span>\n        </th>\n        <th *ngIf=\"column.isToggleField\" class=\"resultlist__header--columns\" [style.max-width.px]=\"column.width\"\n          [style.min-width.px]=\"column.width\">\n          <span class=\"resultlist__header--columns--hidden\">\n          </span>\n        </th>\n      </ng-container>\n    </tr>\n    <tr class=\"resultlist__grid-detail resultlist__thead__tr\"\n      *ngIf=\"selectedGridItem !== null && resultMode === ModeEnum.grid && isDetailledGridOpen\">\n      <td class=\"resultlist__grid-detail--td\" [colSpan]=\"columns?.length\">\n        <arlas-result-detailed-grid [gridTile]=\"selectedGridItem\" [detailWidth]=\"tableWidth\"\n          [activatedActionsPerItem]=\"activatedActionsPerItem\"\n          [detailHeight]=\"detailedGridHeight\" [idFieldName]=\"fieldsConfiguration.idFieldName\"\n          [isDetailShowed]=\"isDetailledGridOpen\" (actionOnItemEvent)=\"triggerActionOnItem($event)\"\n          [showEmptyGroup]=\"showEmptyGroup\" [useHttp]=\"fieldsConfiguration.useHttpQuicklooks\"\n          (closeDetail)=\"closeDetail($event)\">\n        </arlas-result-detailed-grid>\n      </td>\n    </tr>\n  </thead>\n  <div *ngIf=\"isPreviousPageRequested\" class=\"resultlist__loading resultlist__top_loading\"\n    [style.width.px]=\"tableWidth\">\n    <ngx-loading [show]=\"isPreviousPageRequested\" [config]=\"loadAnimationConfig\"></ngx-loading>\n  </div>\n  <tbody class=\"resultlist__tbody\" arlasResultScroll *ngIf=\"!isBodyHidden\" [style.overflow-anchor]=\"'none'\"\n    [style.height.px]=\"tbodyHeight\" [scrollOptions]=\"scrollOptions\" [items]=\"items\" [style.position]=\"'relative'\"\n    [nbGridColumns]=\"nbGridColumns\"\n    [nbLinesBeforeFetch]=\"(nbLinesBeforeFetch !== undefined) ? nbLinesBeforeFetch:nLastLines\" [fetchState]=\"fetchState\"\n    [resultMode]=\"resultMode\" (visibleItems)=\"emitVisibleItems($event)\"\n    (nextDataEvent)=\"paginate($event, PageEnum.next)\" (previousDataEvent)=\"paginate($event, PageEnum.previous)\">\n    <mat-grid-list cols=\"{{nbGridColumns}}\" rowHeight=\"1:1\" [style.display]=\"displayListGrid\">\n      <ng-container *ngFor=\"let rowItem of items; index as i\">\n        <ng-container *ngIf=\"resultMode === ModeEnum.list; else grid_mode\">\n          <tr arlas-result-item [activatedActionsPerItem]=\"activatedActionsPerItem\" id=\"{{rowItem.identifier}}\" class=\"resultlist__body--item-hover-{{rowItem.ishighLight}}\"\n            [options]=\"options\" (mouseenter)=\"onEnterItem(rowItem)\" (mouseleave)=\"onLeaveItem(rowItem)\"\n            (click)=\"onClickItem(rowItem)\" [idFieldName]=\"fieldsConfiguration.idFieldName\" [tableWidth]=\"tableWidth\"\n            [rowItem]=\"rowItem\" [useColorService]=\"useColorService\" [cellBackgroundStyle]=\"cellBackgroundStyle\"\n            [keysToColors]=\"keysToColors\" [colorsSaturationWeight]=\"colorsSaturationWeight\"\n            [detailedDataRetriever]=\"detailedDataRetriever\" [selectedItems]=\"selectedItems\"\n            (selectedItemsEvent)=\"setSelectedItems($event)\" (borderStyleEvent)=\"setBorderStyle($event)\"\n            [style.border-bottom-style]=\"borderStyle\" (actionOnItemEvent)=\"triggerActionOnItem($event)\"\n           >\n          </tr>\n          <tr arlas-result-detailed-item *ngIf=\"rowItem.isDetailToggled\" class=\"resultlist__body--detailed-item\"\n            (mouseenter)=\"onEnterItem(rowItem)\" (mouseleave)=\"onLeaveItem(rowItem)\"\n            [detailedDataRetriever]=\"detailedDataRetriever\"\n            [activatedActionsPerItem]=\"activatedActionsPerItem\"\n            [detailColspan]=\"rowItem.columns.length\" [rowItem]=\"rowItem\" [showEmptyGroup]=showEmptyGroup\n            [idFieldName]=\"fieldsConfiguration.idFieldName\" (actionOnItemEvent)=\"triggerActionOnItem($event)\">\n          </tr>\n\n        </ng-container>\n        <ng-template #grid_mode>\n          <div class=\"div-grid-tile\" (mouseenter)=\"onEnterItem(rowItem)\" (mouseleave)=\"onLeaveItem(rowItem)\" >\n            <mat-grid-tile *ngIf=\"resultMode === ModeEnum.grid\" class=\"resultlist__md-grid-tile\">\n              <arlas-result-grid-tile\n                [activatedActionsPerItem]=\"activatedActionsPerItem\"\n                [displayInfoIcon]=\"rowItem.identifier === selectedGridItem?.identifier && isDetailledGridOpen\"\n                [thumbnailFit]=\"thumbnailFit\"\n                id=\"{{rowItem.identifier}}\" class=\"resultlist__grid-tile\" [options]=\"options\" [gridTile]=\"rowItem\"\n                [selectedItems]=\"selectedItems\" [detailedDataRetriever]=\"detailedDataRetriever\"\n                (selectedItemsEvent)=\"setSelectedItems($event)\" (clickedOnItemEvent)=\"setSelectedGridItem($event)\"\n                [idFieldName]=\"fieldsConfiguration.idFieldName\" (actionOnItemEvent)=\"triggerActionOnItem($event)\">\n              </arlas-result-grid-tile>\n            </mat-grid-tile>\n          </div>\n        </ng-template>\n      </ng-container>\n    </mat-grid-list>\n  </tbody>\n  <div *ngIf=\"resultMode === ModeEnum.grid\" class=\"resultlist-thumbnails-fit\">\n    <mat-button-toggle-group [name]=\"'thumbnailFitGroup'\" (change)=\"emitThumbnailsFitStatus($event)\"\n        class=\"fit-group\" [hideSingleSelectionIndicator]=\"true\">\n      <mat-button-toggle matTooltip=\"{{WIDTH_FIT | translate}}\" value=\"{{ThumbnailFitEnum.width}}\"\n        [checked]=\"thumbnailFit==ThumbnailFitEnum.width\">\n        <mat-icon style=\"transform: rotate(-90deg)\" class=\"fit-icon\">expand</mat-icon>\n      </mat-button-toggle>\n      <mat-button-toggle matTooltip=\"{{CONTAIN_FIT | translate}}\" value=\"{{ThumbnailFitEnum.contain}}\"\n        [checked]=\"thumbnailFit==ThumbnailFitEnum.contain\" class=\"contain-icon-wrapper\">\n        <mat-icon class=\"contain-icon fit-icon\">expand</mat-icon>\n        <mat-icon class=\"fit-icon\">expand</mat-icon>\n      </mat-button-toggle>\n      <mat-button-toggle matTooltip=\"{{HEIGHT_FIT | translate}}\" value=\"{{ThumbnailFitEnum.height}}\"\n        [checked]=\"thumbnailFit==ThumbnailFitEnum.height\">\n        <mat-icon class=\"fit-icon\">expand</mat-icon>\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n  <div *ngIf=\"isNextPageRequested\" class=\"resultlist__loading resultlist__bottom_loading\" [style.width.px]=\"tableWidth\">\n    <ngx-loading [show]=\"isNextPageRequested\" [config]=\"loadAnimationConfig\"></ngx-loading>\n  </div>\n</table>\n", styles: ["@charset \"UTF-8\";.resultlist__header{text-align:center;height:25px}.resultlist__header--columns{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.9em;text-align:left;vertical-align:middle;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;box-sizing:border-box}.resultlist__header--columns__sort{float:right}.resultlist__header--columns__sort--icon{font-size:18px}.resultlist{width:100%;overflow:hidden;display:table;table-layout:fixed;margin-bottom:0;border-collapse:collapse}.resultlist__tools__td{padding:5px;display:flex;flex-direction:row;align-items:center}.resultlist__loading{width:100%;height:100px;position:absolute;z-index:1000;background-color:#fff;opacity:.7}.resultlist__bottom_loading{bottom:0}.resultlist__body--item{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef}.resultlist__body--item-hover-true{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef;background-color:#fff;position:relative;font-weight:500}.resultlist__body--item-hover-{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef;position:relative;background-color:#fff}.resultlist__body--item-hover-false{border-top:1px solid #e9ecef;border-bottom:1px dashed #e9ecef;position:relative;background-color:#eee;color:#aaa}tr:hover .toggle .actions arlas-result-actions .list_actions .not_activated{display:block}.resultlist__lastline{border-top:1px dashed #e9ecef;border-bottom:0px solid #e9ecef}.resultlist__body--detailed-item{border-top:1px dashed #e9ecef;border-bottom:1px solid #e9ecef;background-color:#fff}.resultlist__header,.resultlist__filter,.resultlist__tools,.resultlist__grid-detail{border-top:1px solid #e9ecef;border-bottom:1px solid #e9ecef}.resultlist-thumbnails-fit{display:flex;align-items:center;justify-content:center;height:30px}.resultlist-thumbnails-fit .mat-button-toggle-label-content{line-height:36px!important;height:36px;width:36px;padding:0!important}.resultlist__tools{height:50px;overflow:hidden}.resultlist__tools .resultlist__tools--geosort{font-size:14px;padding-right:10px;white-space:nowrap;overflow:hidden;--mdc-switch-track-height: 10px;--mdc-switch-handle-width: 15px;--mdc-switch-track-width: 30px;--mdc-switch-state-layer-size: 0}.resultlist__tools .resultlist__tools--geosort .mdc-switch__handle{--mat-switch-unselected-handle-size: 15px;--mat-switch-selected-handle-size: 15px;--mat-switch-pressed-handle-size: 15px}.resultlist__tools .resultlist__tools--geosort .mdc-form-field--align-end>label{padding-right:10px}.resultlist__grid-detail{display:block;margin-bottom:3px}.resultlist__grid-detail--td{padding:0!important}.resultlist__tools--select{flex:1;display:flex;align-items:center;justify-content:space-between}.resultgrid--checkbox{float:left;display:flex;align-items:center;--mdc-checkbox-state-layer-size: 18px}.resultgrid--checkbox__count{font-family:Roboto,Helvetica Neue,sans-serif;font-size:.7em;font-weight:700;padding:2px 0 0 8px;min-width:21px}.resultlist__tools--menu{cursor:pointer;float:left;padding-top:6px}.resultlist__tools--mode{text-align:right}.resultlist__tools--mode .mat-button-toggle-label-content{line-height:36px!important;height:36px;width:36px;padding:0!important}.resultlist__grid-tile{display:block;height:100%;width:100%}.resultlist__thead__tr{display:block;position:relative;width:100%}.resultlist__tbody{display:block;overflow-y:auto;overflow-x:hidden;width:100%;background-color:#ddd}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-track{box-shadow:inset 0 0 6px #0000004d;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}::-webkit-scrollbar-thumb{background-color:#555}.select_between__icon,.select_all__icon_check{cursor:pointer}.resultgrid__clear{font-size:14px;width:14px;height:14px;cursor:pointer}.resultlist__tools--sort-container{flex:1;font-size:14px;display:flex;align-items:center}.resultlist__tools--sort-container .resultlist__tools--sort{flex:1;padding-right:5px;--mdc-typography-body1-font-size: 14px}.resultlist__tools--sort-container .resultlist__tools--sort .mat-mdc-select-trigger{gap:5px}.resultlist__tools--sort-container .resultlist__tools--sort-direction mat-icon{transform:rotate(90deg);font-size:18px;height:18px;width:18px;cursor:pointer}.resultlist__tools--sort-container .resultlist__tools--sort-direction .reversed{transform:rotate(-90deg)}.resultlist__tools--separator{padding:0 5px;color:#d3d3d3;font-size:24px;font-weight:100}.fit-images{color:#9b9b9b}.cover-images{color:#444}.fit-group{height:25px;align-items:center}.contain-icon{position:absolute;top:10px;transform:rotate(90deg)}.fit-icon{height:18px!important;width:18px!important;font-size:18px}.contain-icon-wrapper{position:relative}.cdk-overlay-pane:has(.mat-mdc-select-panel.resultlist__tools--sort){width:auto!important;--mat-select-trigger-text-tracking: 0;--mat-option-label-text-tracking: 0;--mat-option-label-text-size: 14px;--mdc-radio-state-layer-size: 20px}.cdk-overlay-pane:has(.mat-mdc-select-panel.resultlist__tools--sort) .mat-mdc-option{min-height:30px}.cdk-overlay-pane:has(.mat-mdc-select-panel.resultlist__tools--sort) .mat-mdc-option.mdc-list-item--disabled{opacity:unset}\n"] }]
        }], ctorParameters: () => [{ type: i0.IterableDiffers }, { type: i0.IterableDiffers }, { type: i0.ElementRef }, { type: i1.ArlasColorService }, { type: i2.TranslateService }, { type: i3.ResultlistNotifierService }, { type: i0.ChangeDetectorRef }], propDecorators: { options: [{
                type: Input
            }], fetchState: [{
                type: Input
            }], fieldsList: [{
                type: Input
            }], rowItemList: [{
                type: Input
            }], fieldsConfiguration: [{
                type: Input
            }], tableWidth: [{
                type: Input
            }], nLastLines: [{
                type: Input
            }], nbLinesBeforeFetch: [{
                type: Input
            }], detailedGridHeight: [{
                type: Input
            }], nbGridColumns: [{
                type: Input
            }], globalActionsList: [{
                type: Input
            }], detailedDataRetriever: [{
                type: Input
            }], indeterminatedItems: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], activatedActionsPerItem: [{
                type: Input
            }], highlightItems: [{
                type: Input
            }], defautMode: [{
                type: Input
            }], isBodyHidden: [{
                type: Input
            }], displayFilters: [{
                type: Input
            }], isGeoSortEnabled: [{
                type: Input
            }], isGeoSortActivated: [{
                type: Input
            }], currentSortedColumn: [{
                type: Input
            }], filtersMap: [{
                type: Input
            }], dropDownMapValues: [{
                type: Input
            }], displayThead: [{
                type: Input
            }], keysToColors: [{
                type: Input
            }], colorsSaturationWeight: [{
                type: Input
            }], useColorService: [{
                type: Input
            }], cellBackgroundStyle: [{
                type: Input
            }], selectedGridItem: [{
                type: Input
            }], showEmptyGroup: [{
                type: Input
            }], isDetailledGridOpen: [{
                type: Input
            }], thumbnailFit: [{
                type: Input
            }], sortColumnEvent: [{
                type: Output
            }], geoSortEvent: [{
                type: Output
            }], geoAutoSortEvent: [{
                type: Output
            }], selectedItemsEvent: [{
                type: Output
            }], consultedItemEvent: [{
                type: Output
            }], clickOnItemEvent: [{
                type: Output
            }], setFiltersEvent: [{
                type: Output
            }], moreDataEvent: [{
                type: Output
            }], paginationEvent: [{
                type: Output
            }], actionOnItemEvent: [{
                type: Output
            }], globalActionEvent: [{
                type: Output
            }], columnFilterChanged: [{
                type: Output
            }], clickOnTile: [{
                type: Output
            }], changeResultMode: [{
                type: Output
            }], visibleItems: [{
                type: Output
            }], onChangeItems: [{
                type: Output
            }], thumbnailFitEvent: [{
                type: Output
            }], onResultListUpdate: [{
                type: Output
            }], onListLoaded: [{
                type: Output
            }], shiftDown: [{
                type: HostListener,
                args: ['document:keydown.shift', ['$event']]
            }], shiftUp: [{
                type: HostListener,
                args: ['document:keyup.shift', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,