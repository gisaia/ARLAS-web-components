/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Enables customize the resultlist options/behaviours
 */
export class ResultListOptions {
    constructor() {
        this.showActionsOnhover = false;
        this.showDetailIconName = 'add_circle_outline';
        this.hideDetailIconName = 'remove_circle_outline';
        this.defautlImgUrl = './assets/no-view.png';
    }
}
/** A utility class to handle the action's states  */
export class ActionHandler {
    /** An action is reversible simply when a reverse action is declared. */
    static isReversible(a) {
        return !!a && !!a.reverseAction;
    }
    static activate(a) {
        a.activated = true;
    }
    static reverse(a) {
        a.activated = false;
    }
}
export const PROTECTED_IMAGE_HEADER = 'Protected-Image-Header';
/**
 * @param data A dictionnary of data to retrieve information
 * @param template The template of the desired string. Contains variable keys between brackets
 * @returns A string with the regex replaced by the data
 */
export function matchAndReplace(data, template) {
    let replaced = template;
    template.match(/{(.+?)}/g)?.forEach(t => {
        const key = t.replace('{', '').replace('}', '');
        if (!!data.get(key)) {
            replaced = replaced.replace(t, data.get(key).toString());
        }
    });
    return replaced;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0cy51dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FybGFzLWNvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3Jlc3VsdHMvdXRpbHMvcmVzdWx0cy51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFLSDs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFPNUI7UUFOTyx1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDM0IsdUJBQWtCLEdBQUcsb0JBQW9CLENBQUM7UUFDMUMsdUJBQWtCLEdBQUcsdUJBQXVCLENBQUM7UUFDN0Msa0JBQWEsR0FBRyxzQkFBc0IsQ0FBQztJQUd4QixDQUFDO0NBQ3hCO0FBd0JELHFEQUFxRDtBQUNyRCxNQUFNLE9BQU8sYUFBYTtJQUN4Qix3RUFBd0U7SUFDakUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFTO1FBQ2xDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUNsQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFTO1FBQzlCLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQVM7UUFDN0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztDQUNGO0FBaUVELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLHdCQUF3QixDQUFDO0FBRS9EOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFDLElBQStCLEVBQUUsUUFBZ0I7SUFDL0UsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ3hCLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3BCLFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0QsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byBHaXNhw69hIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFLnR4dCBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEdpc2HDr2EgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQYWdlRW51bSB9IGZyb20gJy4vZW51bWVyYXRpb25zL3BhZ2VFbnVtJztcblxuLyoqXG4gKiBFbmFibGVzIGN1c3RvbWl6ZSB0aGUgcmVzdWx0bGlzdCBvcHRpb25zL2JlaGF2aW91cnNcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3VsdExpc3RPcHRpb25zIHtcbiAgcHVibGljIHNob3dBY3Rpb25zT25ob3ZlciA9IGZhbHNlO1xuICBwdWJsaWMgc2hvd0RldGFpbEljb25OYW1lID0gJ2FkZF9jaXJjbGVfb3V0bGluZSc7XG4gIHB1YmxpYyBoaWRlRGV0YWlsSWNvbk5hbWUgPSAncmVtb3ZlX2NpcmNsZV9vdXRsaW5lJztcbiAgcHVibGljIGRlZmF1dGxJbWdVcmwgPSAnLi9hc3NldHMvbm8tdmlldy5wbmcnO1xuXG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuICBpZDogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICBhY3Rpb25CdXM/OiBTdWJqZWN0PHsgaWRGaWVsZE5hbWU6IHN0cmluZzsgaWRWYWx1ZTogc3RyaW5nOyB9PjtcbiAgY3NzQ2xhc3M/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgdG9vbHRpcD86IHN0cmluZztcbiAgLyoqIEFuIGFjdGlvbiBtaWdodCBuZWVkIGEgcmV2ZXJzZSBhY3Rpb24gdG8gZ28gYmFjayB0byBhbiBvcmlnaW5hbCBzdGF0ZS5cbiAgICogRm9yIGluc3RhbmNlOiBhZGQgbGF5ZXIgdG8gbWFwID0+IHJldmVyc2UgPT4gcmVtb3ZlIGxheWVyIGZyb20gbWFwLiovXG4gIHJldmVyc2VBY3Rpb24/OiBBY3Rpb247XG4gIC8qKiBpZiBhY3RpdmF0ZWQsIHRoZSBhY3Rpb24gaXMgYWx3YXlzIGRpc3BsYXllZCAobm90IG9ubHkgb24gaG92ZXIpLiAqL1xuICBhY3RpdmF0ZWQ/OiBib29sZWFuO1xuICAvKiogQW4gQW5ndWxhciBpY29uIG5hbWUgdG8gYmUgdXNlZCB0byBkaXNwbGF5IHRoZSBpY29uIGJ1dHRvbiBvZiB0aGUgYWN0aW9uLiAqL1xuICBpY29uPzogc3RyaW5nO1xuICAvKiogSWYgdGhpcyBhdHRyaWJ1dGUgaXMgc2V0LCBpdCBtZWFucyB0aGF0IHRoaXMgYWN0aW9uIG5lZWRzIHRoZXNlIGZpZWxkcyB2YWx1ZXMgaW4gb3JkZXIgdG8gYmUgYWNjb21wbGlzaGVkLlxuICAgKiBJZiB0aG9zZSBmaWVsZHMgdmFsdWVzIGRvbid0IGV4aXN0IGZvciBhbiBpdGVtLCB0aGVuIHRoZSBhY3Rpb24gY291bGQgbm90IGJlIGNvbXBsZXRlZCBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBoaWRkZW4uICovXG4gIGZpZWxkcz86IHN0cmluZyBbXTtcbiAgLyoqIENhbGN1bGF0ZWQgYXR0cmlidXRlIHRoYXQgdGVsbHMgaWYgdGhlIGFjdGlvbiBzaG91bGQgYmUgc2hvd24gb3Igbm90LiAqL1xuICBzaG93PzogYm9vbGVhbjtcbiAgLyoqIEZvciBnbG9iYWwgYWN0aW9ucywgZXZlbiBpZiBubyBpdGVtIGlzIHNlbGVjdGVkLCB0aGUgYWN0aW9uIHdpbGwgYmUgZW5hYmxlZCAqL1xuICBhbHdheXNFbmFibGVkPzogYm9vbGVhbjtcbn1cblxuLyoqIEEgdXRpbGl0eSBjbGFzcyB0byBoYW5kbGUgdGhlIGFjdGlvbidzIHN0YXRlcyAgKi9cbmV4cG9ydCBjbGFzcyBBY3Rpb25IYW5kbGVyIHtcbiAgLyoqIEFuIGFjdGlvbiBpcyByZXZlcnNpYmxlIHNpbXBseSB3aGVuIGEgcmV2ZXJzZSBhY3Rpb24gaXMgZGVjbGFyZWQuICovXG4gIHB1YmxpYyBzdGF0aWMgaXNSZXZlcnNpYmxlKGE6IEFjdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIWEgJiYgISFhLnJldmVyc2VBY3Rpb247XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFjdGl2YXRlKGE6IEFjdGlvbik6IHZvaWQge1xuICAgIGEuYWN0aXZhdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmV2ZXJzZShhOiBBY3Rpb24pOiB2b2lkIHtcbiAgICBhLmFjdGl2YXRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudElkZW50aWZpZXIge1xuICBpZEZpZWxkTmFtZTogc3RyaW5nO1xuICBpZFZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRzQ29uZmlndXJhdGlvbiB7XG4gIGlkRmllbGROYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgdXJsSW1hZ2VUZW1wbGF0ZT86IHN0cmluZztcbiAgdXJsSW1hZ2VUZW1wbGF0ZXM/OiBBcnJheTxEZXNjcmliZWRVcmw+O1xuICB1cmxUaHVtYm5haWxUZW1wbGF0ZT86IHN0cmluZztcbiAgdGl0bGVGaWVsZE5hbWVzPzogQXJyYXk8RmllbGQ+O1xuICB0b29sdGlwRmllbGROYW1lcz86IEFycmF5PEZpZWxkPjtcbiAgdXNlSHR0cFF1aWNrbG9va3M/OiBib29sZWFuO1xuICB1c2VIdHRwVGh1bWJuYWlscz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgaWNvbj86IHN0cmluZztcbiAgaWNvbkNzc0NsYXNzPzogc3RyaW5nO1xuICBpY29uQ29sb3JGaWVsZE5hbWU/OiBzdHJpbmc7XG4gIGRldGFpbHNUaXRsZVRlbXBsYXRlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlc2NyaWJlZFVybCB7XG4gIHVybDogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBmaWx0ZXI/OiBGaWVsZEZpbHRlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEZpbHRlciB7XG4gIGZpZWxkOiBzdHJpbmc7XG4gIHZhbHVlczogQXJyYXk8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZCB7XG4gIGZpZWxkUGF0aDogc3RyaW5nO1xuICBwcm9jZXNzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2VRdWVyeSB7XG4gIHJlZmVyZW5jZTogTWFwPHN0cmluZywgSXRlbURhdGFUeXBlPjtcbiAgd2hpY2hQYWdlOiBQYWdlRW51bTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50IHtcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgaWNvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZGRpdGlvbmFsSW5mbyB7XG4gIGRldGFpbHM/OiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBzdHJpbmc+PjtcbiAgYWN0aW9ucz86IEFycmF5PEFjdGlvbj47XG4gIGF0dGFjaG1lbnRzPzogQXJyYXk8QXR0YWNobWVudD47XG59XG5cbmV4cG9ydCB0eXBlIEl0ZW1EYXRhVHlwZSA9IHN0cmluZyB8IG51bWJlciB8IERhdGUgfCBBcnJheTxzdHJpbmc+O1xuXG5leHBvcnQgY29uc3QgUFJPVEVDVEVEX0lNQUdFX0hFQURFUiA9ICdQcm90ZWN0ZWQtSW1hZ2UtSGVhZGVyJztcblxuLyoqXG4gKiBAcGFyYW0gZGF0YSBBIGRpY3Rpb25uYXJ5IG9mIGRhdGEgdG8gcmV0cmlldmUgaW5mb3JtYXRpb25cbiAqIEBwYXJhbSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgb2YgdGhlIGRlc2lyZWQgc3RyaW5nLiBDb250YWlucyB2YXJpYWJsZSBrZXlzIGJldHdlZW4gYnJhY2tldHNcbiAqIEByZXR1cm5zIEEgc3RyaW5nIHdpdGggdGhlIHJlZ2V4IHJlcGxhY2VkIGJ5IHRoZSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaEFuZFJlcGxhY2UoZGF0YTogTWFwPHN0cmluZywgSXRlbURhdGFUeXBlPiwgdGVtcGxhdGU6IHN0cmluZykge1xuICBsZXQgcmVwbGFjZWQgPSB0ZW1wbGF0ZTtcbiAgdGVtcGxhdGUubWF0Y2goL3soLis/KX0vZyk/LmZvckVhY2godCA9PiB7XG4gICAgY29uc3Qga2V5OiBzdHJpbmcgPSB0LnJlcGxhY2UoJ3snLCAnJykucmVwbGFjZSgnfScsICcnKTtcbiAgICBpZiAoISFkYXRhLmdldChrZXkpKSB7XG4gICAgICByZXBsYWNlZCA9IHJlcGxhY2VkLnJlcGxhY2UodCwgZGF0YS5nZXQoa2V5KS50b1N0cmluZygpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVwbGFjZWQ7XG59XG4iXX0=