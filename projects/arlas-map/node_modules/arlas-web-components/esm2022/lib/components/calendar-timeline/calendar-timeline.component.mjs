/*
 * Licensed to Gisaïa under one or more contributor
 * license agreements. See the NOTICE.txt file distributed with
 * this work for additional information regarding copyright
 * ownership. Gisaïa licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { Component, Input, ElementRef, ViewChild, Output } from '@angular/core';
import { Dimensions, Granularity, Margins, Timeline } from 'arlas-d3';
import { debounceTime, fromEvent, Subject, takeUntil } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/icon";
export var TranslationDirection;
(function (TranslationDirection) {
    TranslationDirection["past"] = "past";
    TranslationDirection["future"] = "future";
})(TranslationDirection || (TranslationDirection = {}));
/**
 * todo : documentation of the component
 */
export class CalendarTimelineComponent {
    constructor() {
        this.boundDates = [];
        this.data = [];
        this.selectedData = new Subject();
        this.hoveredData = new Subject();
        this.translate = new Subject();
        this._onDestroy$ = new Subject();
        fromEvent(window, 'resize')
            .pipe(debounceTime(500), takeUntil(this._onDestroy$))
            .subscribe((event) => {
            const element = this.timelineContainer.nativeElement;
            const margins = (new Margins()).setBottom(5).setTop(5).setRight(5).setLeft(5);
            this.width = element.offsetWidth;
            this.height = 90;
            const dimensions = (new Dimensions(this.width, this.height)).setMargins(margins);
            if (this.timeline) {
                this.timeline.setDimensions(dimensions);
                this.timeline.plot();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.data && this.timeline) {
            this.timeline.setData(this.data);
            if (this.timeline.boundDates && this.timeline.boundDates.length === 2) {
                this.timeline.plot(true);
            }
        }
        if (changes.boundDates && this.timeline) {
            this.timeline.setBoundDates(this.boundDates);
            this.timeline.plot();
        }
        if (changes.granularity && this.timeline) {
            this.timeline.setGranularity(this.granularity);
        }
        if (changes.climatological && this.timeline) {
            this.timeline.setClimatological(this.climatological);
        }
        if (changes.cursorPosition && this.timeline) {
            this.timeline.moveCursor(this.cursorPosition);
        }
    }
    ngAfterViewInit() {
        const element = this.timelineContainer.nativeElement;
        const svg = element.querySelector('svg');
        const margins = (new Margins()).setBottom(5).setTop(5).setRight(5).setLeft(5);
        this.width = element.offsetWidth;
        this.height = 90;
        const dimensions = (new Dimensions(this.width, this.height)).setMargins(margins);
        this.timeline = (new Timeline(svg));
        this.timeline.setDimensions(dimensions);
        this.timeline.setBoundDates(this.boundDates);
        this.timeline.hoveredData
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(r => {
            this.hoveredData.next(r);
        });
        this.timeline.selectedData
            .pipe(takeUntil(this._onDestroy$))
            .subscribe(r => {
            this.selectedData.next(r);
        });
    }
    ngOnDestroy() {
        this._onDestroy$.next(true);
        this._onDestroy$.complete();
    }
    plot() {
        if (this.timeline) {
            this.timeline.plot();
        }
    }
    translateFuture() {
        this.translate.next(TranslationDirection.future);
    }
    translatePast() {
        this.translate.next(TranslationDirection.past);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CalendarTimelineComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.13", type: CalendarTimelineComponent, selector: "arlas-calendar-timeline", inputs: { id: "id", granularity: "granularity", climatological: "climatological", boundDates: "boundDates", data: "data", cursorPosition: "cursorPosition", hideLeftButton: "hideLeftButton", hideRightButton: "hideRightButton" }, outputs: { selectedData: "selectedData", hoveredData: "hoveredData", translate: "translate" }, viewQueries: [{ propertyName: "timelineContainer", first: true, predicate: ["timeline_container"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div id=\"{{id}}\" #calendar_timeline class=\"calendar-timeline\">\n    <div class=\"container\">\n        <div class=\"move_button past\" [class.hide_left_button]=\"hideLeftButton\" (click)=\"translatePast()\" *ngIf=\"!climatological\">\n            <mat-icon class=\"chevron\">chevron_left</mat-icon>\n        </div>\n        <div class=\"svg_container\" \n            [class.svg_container_buttons_hidden]=\"hideLeftButton && hideRightButton\"\n            [class.svg_container_one_button_hidden]=\"(hideLeftButton && !hideRightButton) || (!hideLeftButton && hideRightButton)\"\n\n             #timeline_container>\n            <svg id=\"calendar-svg\" [style.width.px]=\"width\" [style.height.px]=\"height\" ></svg>\n        </div>\n        <div class=\"move_button future\" [class.hide_right_button]=\"hideRightButton\" (click)=\"translateFuture()\" *ngIf=\"!climatological\">\n            <mat-icon class=\"chevron\">chevron_right</mat-icon>\n        </div>\n    </div>\n\n</div>", styles: ["@charset \"UTF-8\";.calendar-timeline{width:100%}.calendar-timeline .container{display:flex;width:100%;border:1px solid #b7b7b7;border-radius:4px}.calendar-timeline .container .move_button{width:15px;background-color:#b7b7b7;display:flex;flex-direction:column;align-items:center;cursor:pointer;justify-content:center}.calendar-timeline .container .move_button .past{border-top-left-radius:2px;border-bottom-left-radius:2px}.calendar-timeline .container .move_button .past .hide_left_button{display:none}.calendar-timeline .container .move_button .future{border-top-right-radius:2px;border-bottom-right-radius:2px}.calendar-timeline .container .move_button .future .hide_right_button{display:none}.calendar-timeline .container .move_button .past .chevron,.calendar-timeline .container .move_button .future .chevron{font-size:20px;width:20px;height:20px}.calendar-timeline .container .svg_container{width:calc(100% - 30px)}.calendar-timeline .container .svg_container_one_button_hidden{width:calc(100% - 15px)}.calendar-timeline .container .svg_container_buttons_hidden{width:100%}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CalendarTimelineComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arlas-calendar-timeline', template: "<div id=\"{{id}}\" #calendar_timeline class=\"calendar-timeline\">\n    <div class=\"container\">\n        <div class=\"move_button past\" [class.hide_left_button]=\"hideLeftButton\" (click)=\"translatePast()\" *ngIf=\"!climatological\">\n            <mat-icon class=\"chevron\">chevron_left</mat-icon>\n        </div>\n        <div class=\"svg_container\" \n            [class.svg_container_buttons_hidden]=\"hideLeftButton && hideRightButton\"\n            [class.svg_container_one_button_hidden]=\"(hideLeftButton && !hideRightButton) || (!hideLeftButton && hideRightButton)\"\n\n             #timeline_container>\n            <svg id=\"calendar-svg\" [style.width.px]=\"width\" [style.height.px]=\"height\" ></svg>\n        </div>\n        <div class=\"move_button future\" [class.hide_right_button]=\"hideRightButton\" (click)=\"translateFuture()\" *ngIf=\"!climatological\">\n            <mat-icon class=\"chevron\">chevron_right</mat-icon>\n        </div>\n    </div>\n\n</div>", styles: ["@charset \"UTF-8\";.calendar-timeline{width:100%}.calendar-timeline .container{display:flex;width:100%;border:1px solid #b7b7b7;border-radius:4px}.calendar-timeline .container .move_button{width:15px;background-color:#b7b7b7;display:flex;flex-direction:column;align-items:center;cursor:pointer;justify-content:center}.calendar-timeline .container .move_button .past{border-top-left-radius:2px;border-bottom-left-radius:2px}.calendar-timeline .container .move_button .past .hide_left_button{display:none}.calendar-timeline .container .move_button .future{border-top-right-radius:2px;border-bottom-right-radius:2px}.calendar-timeline .container .move_button .future .hide_right_button{display:none}.calendar-timeline .container .move_button .past .chevron,.calendar-timeline .container .move_button .future .chevron{font-size:20px;width:20px;height:20px}.calendar-timeline .container .svg_container{width:calc(100% - 30px)}.calendar-timeline .container .svg_container_one_button_hidden{width:calc(100% - 15px)}.calendar-timeline .container .svg_container_buttons_hidden{width:100%}\n"] }]
        }], ctorParameters: () => [], propDecorators: { id: [{
                type: Input
            }], granularity: [{
                type: Input
            }], climatological: [{
                type: Input
            }], boundDates: [{
                type: Input
            }], data: [{
                type: Input
            }], cursorPosition: [{
                type: Input
            }], hideLeftButton: [{
                type: Input
            }], hideRightButton: [{
                type: Input
            }], selectedData: [{
                type: Output
            }], hoveredData: [{
                type: Output
            }], translate: [{
                type: Output
            }], timelineContainer: [{
                type: ViewChild,
                args: ['timeline_container', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,