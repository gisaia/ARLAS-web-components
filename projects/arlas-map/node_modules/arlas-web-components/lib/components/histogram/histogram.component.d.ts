import { AfterViewChecked, ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { AbstractChart, AbstractHistogram, ChartType, DataType, Position, SelectedInputValues, SelectedOutputValues, SelectionType, SwimlaneMode } from 'arlas-d3';
import { HistogramData, HistogramTooltip, SwimlaneData, SwimlaneOptions, SwimlaneRepresentation } from 'arlas-d3/histograms/utils/HistogramUtils';
import { Subject } from 'rxjs';
import { ArlasColorService } from '../../services/color.generator.service';
import * as i0 from "@angular/core";
/**
 * The Histogram web component allows you to display your numeric and temporal data in charts or swimlanes.
 * Charts can be represented as bars or areas.
 * Swimlanes can be represented as bars or circles.
 * For both modes, data can be multi-selected using a selection brush.
 */
export declare class HistogramComponent implements OnInit, OnChanges, AfterViewChecked, OnDestroy {
    private colorService;
    private el;
    private translate;
    lt: ElementRef;
    rt: ElementRef;
    /**
     * @Input : Angular
     * @description Data to plot in the chart.
     */
    data: Array<HistogramData> | SwimlaneData;
    /**
     * @Input : Angular
     * @description HistogramData is a bucket of a given chart Id. Many charts ids can be represented in histogram. This
     * input sets the main chart id. So that the main one can be represented differently from the others
     */
    mainChartId: string;
    /**
     * @Input
     * @description To be set to `time` when x axis represents dates and to `numeric` otherwise.
     */
    dataType: DataType;
    /**
     * @description Unit of data to add in the end of tooltip values.
     * @deprecated If xUnit is specified, dataUnit is not taken into account.
     */
    dataUnit: string;
    /**
     * @description Unit of x axis values.
     */
    xUnit: string;
    /**
     * @description Unit of y axis values.
     */
    yUnit: string;
    /**
     * @Input : Angular
     * @description The date format of the start/end values.
     *  Please refer to this [list of specifiers](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format).
     */
    valuesDateFormat: string;
    /**
     * @Input : Angular
     * @description Whether the chart is selectable.
     */
    isHistogramSelectable: boolean;
    /**
     * @Input : Angular
     * @description Whether the selection is multiple.
     */
    multiselectable: boolean;
    /**
     * @Input : Angular
     * @description A single interval that selects data.
     */
    intervalSelection: SelectedInputValues;
    /**
     * @Input : Angular
     * @description A list of intervals that select data.
     */
    intervalListSelection: SelectedInputValues[];
    /**
     * @Input : Angular
     * @description Top position of the remove-selection-button.
     */
    topOffsetRemoveInterval: number;
    /**
     * @Input : Angular
     * @description leftOffsetRemoveInterval.
     */
    leftOffsetRemoveInterval: number;
    /**
     * @Input : Angular
     * @description A 0 to 1 weight of the brush handles height.
     * This input will be taken into account when selectionType is 'rectangle'.
     * (This input will be renamed handlesHeightWeight in the v25.0.0 release.)
     */
    brushHandlesHeightWeight: number;
    /**
     * @Input : Angular
     * @description Radius of handles in pixels. This input will be taken into account when selectionType is 'slider'.
     */
    handlesRadius: number;
    /**
     * @Input : Angular
     * @description Radius of handles in pixels. This input will be taken into account when selectionType is 'slider'.
     */
    selectionType: SelectionType;
    /**
     * @Input : Angular
     * @description Chart's representation type.
     */
    chartType: ChartType;
    /**
     * @Input : Angular
     * @description Chart's title.
     */
    chartTitle: string;
    /**
     * @Input : Angular
     * @description Chart's label for the x axis (Visible when there is one bucket on the histogram).
     */
    chartXLabel: string;
    /**
     * @Input : Angular
     * @description Chart's label for the y axis (Visible when there is one bucket on the histogram).
     */
    chartYLabel: string;
    /**
     * @Input : Angular
     * @description Chart's width. If not specified, the chart takes the component's container width.
     */
    chartWidth: number;
    /**
     * @Input : Angular
     * @description Chart's height. If not specified, the chart takes the component's container height.
     */
    chartHeight: number;
    /**
     * @Input : Angular
     * @description Css class name to use to customize a specific `arlas-histogram` component.
     */
    customizedCssClass: string;
    /**
     * @Input : Angular
     * @description Whether the histogram values start from zero or from the minimum of data
     */
    yAxisStartsFromZero: boolean;
    /**
     * @Input : Angular
     * @description Whether to add stripes in the histograms when yAxis starts from minimum of data
     */
    showStripes: boolean;
    /**
     * @Input : Angular
     * @description The xAxis positon : above or below the chart.
     */
    xAxisPosition: Position;
    /**
     * @Input : Angular
     * @description The start/end values positon : above or below the chart.
     */
    descriptionPosition: Position;
    /**
     * @Input : Angular
     * @description Number of ticks in the X axis.
     */
    xTicks: number;
    /**
     * @Input : Angular
     * @description Number of ticks in the Y axis.
     */
    yTicks: number;
    /**
     * @Input : Angular
     * @description Number of labels in the X axis.
     */
    xLabels: number;
    /**
     * @Input : Angular
     * @description Number of labels in the Y axis.
     */
    yLabels: number;
    /**
     * @Input : Angular
     * @description Display short labels on y axis.
     */
    shortYLabels: boolean;
    /**
     * @Input : Angular
     * @description Whether showing the X axis ticks.
     */
    showXTicks: boolean;
    /**
     * @Input : Angular
     * @description Whether showing the Y axis ticks.
     */
    showYTicks: boolean;
    /**
     * @Input : Angular
     * @description Whether showing the X axis labels.
     */
    showXLabels: boolean;
    /**
     * @Input : Angular
     * @description Whether showing the Y axis labels.
     */
    showYLabels: boolean;
    /**
     * @Input : Angular
     * @description Whether showing the horizontal dashed lines.
     */
    showHorizontalLines: boolean;
    /**
     * @Input : Angular
     * @description The date format of ticks.
     * Please refer to this [list of specifiers](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format).
     */
    ticksDateFormat: string;
    /**
     * @Input : Angular
     * @description Whether the curve of an `area` chart is smoothed.
     */
    isSmoothedCurve: boolean;
    /**
     * @Input : Angular
     * @description Weight applied to bars width. ]0,1].
     */
    barWeight: number;
    /**
     * @Input : Angular
     * @description Either a hex string color or a color name (in English) or a saturation interval.
     */
    paletteColors: [number, number] | string;
    /**
    * @Input : Angular
    * @description Allows to include only selections that contain data in the histogram/swimlane
    */
    displayOnlyIntervalsWithData: boolean;
    /**
     * @Input : Angular
     * @description Translates area chart by half data interval
     */
    applyOffsetOnAreaChart: boolean;
    /**
     * @Input : Angular
     * @description The swimlane mode.
     * - `variableHeight` buckets height varies with the bucket's value
     * - `fixedHeight` all the buckets have the same height. A level tick is plotted on the bucket to indicate
     * the value level compared to other values.
     * - `circles` buckets are represented with circles whose radius varies the bucket's value.
     */
    swimlaneMode: SwimlaneMode;
    /**
     * @Input : Angular
     * @description The swimlane representation.
     * - `column` representation focuses on terms of the same column; each term is compared to the sum of all terms values in the column.
     * - `global` representation compares all the buckets values to the maximum value in the swimlane.
     */
    swimlaneRepresentation: SwimlaneRepresentation;
    /**
     * @Input : Angular
     * @description Graphical options to configure for the swimlane.
    */
    swimlaneOptions: SwimlaneOptions;
    /**
     * @Input : Angular
     * @description The width of swimlane labels space.
     */
    swimLaneLabelsWidth: any;
    /**
     * @Input : Angular
     * @description The radius of swimlane bars borders.
     */
    swimlaneBorderRadius: number;
    /**
     * @Input : Angular
     * @description The height of a single lane. If not specified, a lane height is the chartHeight devided by the number of lanes.
     */
    swimlaneHeight: number;
    id: string;
    /**
     * @Input : Angular
     * @description Term's list of powerbars to select
     */
    selectedSwimlanes: Set<string>;
    /**
   * @Input : Angular
   * @description Wether use UTC to display date on the app
   */
    useUtc: boolean;
    /**
     * @Output : Angular
     * @description Emits the list of selected powerbars terms
     */
    selectedSwimlanesEvent: Subject<Set<string>>;
    /**
     * @Output : Angular
     * @description Emits the list of selected intervals.
     */
    valuesListChangedEvent: Subject<SelectedOutputValues[]>;
    /**
     * @Output : Angular
     * @description Emits the hovered bucket key (key as in HistogramData).
     */
    hoveredBucketEvent: Subject<Date | number>;
    /**
     * @Output : Angular
     * @description Emits an event informing that the chart finished plotting.
     */
    dataPlottedEvent: Subject<string>;
    /**
     * @Output : Angular
     * @description Emits the hovered bucket information that can be exploited to display a tooltip
     */
    tooltipEvent: Subject<HistogramTooltip>;
    histogram: AbstractHistogram;
    chart: AbstractChart;
    ChartType: typeof ChartType;
    Position: typeof Position;
    private _onDestroy$;
    constructor(colorService: ArlasColorService, el: ElementRef, translate: TranslateService);
    ngOnDestroy(): void;
    static getHistogramJsonSchema(): Object;
    static getSwimlaneJsonSchema(): Object;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    /**
     * @description Plots the histogram
     */
    plotHistogram(inputData: Array<HistogramData> | SwimlaneData): void;
    /**
     * @description Resizes the histogram on windows resize event
     */
    resizeHistogram(): void;
    /**
     * @description Removes the selected interval
     */
    removeSelectInterval(id: string): void;
    private setHistogramParameters;
    static ɵfac: i0.ɵɵFactoryDeclaration<HistogramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<HistogramComponent, "arlas-histogram", never, { "data": { "alias": "data"; "required": false; }; "mainChartId": { "alias": "mainChartId"; "required": false; }; "dataType": { "alias": "dataType"; "required": false; }; "dataUnit": { "alias": "dataUnit"; "required": false; }; "xUnit": { "alias": "xUnit"; "required": false; }; "yUnit": { "alias": "yUnit"; "required": false; }; "valuesDateFormat": { "alias": "valuesDateFormat"; "required": false; }; "isHistogramSelectable": { "alias": "isHistogramSelectable"; "required": false; }; "multiselectable": { "alias": "multiselectable"; "required": false; }; "intervalSelection": { "alias": "intervalSelection"; "required": false; }; "intervalListSelection": { "alias": "intervalListSelection"; "required": false; }; "topOffsetRemoveInterval": { "alias": "topOffsetRemoveInterval"; "required": false; }; "leftOffsetRemoveInterval": { "alias": "leftOffsetRemoveInterval"; "required": false; }; "brushHandlesHeightWeight": { "alias": "brushHandlesHeightWeight"; "required": false; }; "handlesRadius": { "alias": "handlesRadius"; "required": false; }; "selectionType": { "alias": "selectionType"; "required": false; }; "chartType": { "alias": "chartType"; "required": false; }; "chartTitle": { "alias": "chartTitle"; "required": false; }; "chartXLabel": { "alias": "chartXLabel"; "required": false; }; "chartYLabel": { "alias": "chartYLabel"; "required": false; }; "chartWidth": { "alias": "chartWidth"; "required": false; }; "chartHeight": { "alias": "chartHeight"; "required": false; }; "customizedCssClass": { "alias": "customizedCssClass"; "required": false; }; "yAxisStartsFromZero": { "alias": "yAxisStartsFromZero"; "required": false; }; "showStripes": { "alias": "showStripes"; "required": false; }; "xAxisPosition": { "alias": "xAxisPosition"; "required": false; }; "descriptionPosition": { "alias": "descriptionPosition"; "required": false; }; "xTicks": { "alias": "xTicks"; "required": false; }; "yTicks": { "alias": "yTicks"; "required": false; }; "xLabels": { "alias": "xLabels"; "required": false; }; "yLabels": { "alias": "yLabels"; "required": false; }; "shortYLabels": { "alias": "shortYLabels"; "required": false; }; "showXTicks": { "alias": "showXTicks"; "required": false; }; "showYTicks": { "alias": "showYTicks"; "required": false; }; "showXLabels": { "alias": "showXLabels"; "required": false; }; "showYLabels": { "alias": "showYLabels"; "required": false; }; "showHorizontalLines": { "alias": "showHorizontalLines"; "required": false; }; "ticksDateFormat": { "alias": "ticksDateFormat"; "required": false; }; "isSmoothedCurve": { "alias": "isSmoothedCurve"; "required": false; }; "barWeight": { "alias": "barWeight"; "required": false; }; "paletteColors": { "alias": "paletteColors"; "required": false; }; "displayOnlyIntervalsWithData": { "alias": "displayOnlyIntervalsWithData"; "required": false; }; "applyOffsetOnAreaChart": { "alias": "applyOffsetOnAreaChart"; "required": false; }; "swimlaneMode": { "alias": "swimlaneMode"; "required": false; }; "swimlaneRepresentation": { "alias": "swimlaneRepresentation"; "required": false; }; "swimlaneOptions": { "alias": "swimlaneOptions"; "required": false; }; "swimLaneLabelsWidth": { "alias": "swimLaneLabelsWidth"; "required": false; }; "swimlaneBorderRadius": { "alias": "swimlaneBorderRadius"; "required": false; }; "swimlaneHeight": { "alias": "swimlaneHeight"; "required": false; }; "id": { "alias": "id"; "required": false; }; "selectedSwimlanes": { "alias": "selectedSwimlanes"; "required": false; }; "useUtc": { "alias": "useUtc"; "required": false; }; }, { "selectedSwimlanesEvent": "selectedSwimlanesEvent"; "valuesListChangedEvent": "valuesListChangedEvent"; "hoveredBucketEvent": "hoveredBucketEvent"; "dataPlottedEvent": "dataPlottedEvent"; "tooltipEvent": "tooltipEvent"; }, never, never, false, never>;
}
