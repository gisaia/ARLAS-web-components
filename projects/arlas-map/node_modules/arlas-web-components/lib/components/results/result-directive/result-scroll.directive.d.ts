import { ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { Item } from '../model/item';
import { ModeEnum } from '../utils/enumerations/modeEnum';
import { ItemDataType } from '../utils/results.utils';
import * as i0 from "@angular/core";
export declare class ResultScrollDirective implements OnChanges {
    private el;
    items: Array<Item>;
    nbLinesBeforeFetch: number;
    nbGridColumns: number;
    resultMode: ModeEnum;
    fetchState: {
        endListUp: true;
        endListDown: false;
    };
    scrollOptions: {
        maintainScrollUpPosition: boolean;
        maintainScrollDownPosition: boolean;
        nbLines: number;
    };
    nextDataEvent: Subject<Map<string, ItemDataType>>;
    previousDataEvent: Subject<Map<string, ItemDataType>>;
    visibleItems: Subject<Array<Item>>;
    private lastScrollTop;
    private previousFirstId;
    private previousLastId;
    private tbodyHeight;
    private scrolledProgramatically;
    private nbScrolledLines;
    private top;
    private height;
    constructor(el: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    /** This method allows to stay around the same items when switching the mode grid/list */
    adjustScrollToMode(): void;
    onScroll(event: any): void;
    private isElementInViewport;
    private isScrollingDown;
    private isScrollingUp;
    private triggerScrollEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResultScrollDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ResultScrollDirective, "[arlasResultScroll]", never, { "items": { "alias": "items"; "required": false; }; "nbLinesBeforeFetch": { "alias": "nbLinesBeforeFetch"; "required": false; }; "nbGridColumns": { "alias": "nbGridColumns"; "required": false; }; "resultMode": { "alias": "resultMode"; "required": false; }; "fetchState": { "alias": "fetchState"; "required": false; }; "scrollOptions": { "alias": "scrollOptions"; "required": false; }; }, { "nextDataEvent": "nextDataEvent"; "previousDataEvent": "previousDataEvent"; "visibleItems": "visibleItems"; }, never, never, false, never>;
}
