import { Subject } from 'rxjs';
import { PageEnum } from './enumerations/pageEnum';
/**
 * Enables customize the resultlist options/behaviours
 */
export declare class ResultListOptions {
    showActionsOnhover: boolean;
    showDetailIconName: string;
    hideDetailIconName: string;
    defautlImgUrl: string;
    constructor();
}
export interface Action {
    id: string;
    label: string;
    actionBus?: Subject<{
        idFieldName: string;
        idValue: string;
    }>;
    cssClass?: string | string[];
    tooltip?: string;
    /** An action might need a reverse action to go back to an original state.
     * For instance: add layer to map => reverse => remove layer from map.*/
    reverseAction?: Action;
    /** if activated, the action is always displayed (not only on hover). */
    activated?: boolean;
    /** An Angular icon name to be used to display the icon button of the action. */
    icon?: string;
    /** If this attribute is set, it means that this action needs these fields values in order to be accomplished.
     * If those fields values don't exist for an item, then the action could not be completed and therefore should be hidden. */
    fields?: string[];
    /** Calculated attribute that tells if the action should be shown or not. */
    show?: boolean;
    /** For global actions, even if no item is selected, the action will be enabled */
    alwaysEnabled?: boolean;
}
/** A utility class to handle the action's states  */
export declare class ActionHandler {
    /** An action is reversible simply when a reverse action is declared. */
    static isReversible(a: Action): boolean;
    static activate(a: Action): void;
    static reverse(a: Action): void;
}
export interface ElementIdentifier {
    idFieldName: string;
    idValue: string;
}
export interface FieldsConfiguration {
    idFieldName: string;
    /**
     * @deprecated
     */
    urlImageTemplate?: string;
    urlImageTemplates?: Array<DescribedUrl>;
    urlThumbnailTemplate?: string;
    titleFieldNames?: Array<Field>;
    tooltipFieldNames?: Array<Field>;
    useHttpQuicklooks?: boolean;
    useHttpThumbnails?: boolean;
    /**
     * @deprecated
     */
    icon?: string;
    iconCssClass?: string;
    iconColorFieldName?: string;
    detailsTitleTemplate?: string;
}
export interface DescribedUrl {
    url: string;
    description: string;
    filter?: FieldFilter;
}
export interface FieldFilter {
    field: string;
    values: Array<string>;
}
export interface Field {
    fieldPath: string;
    process?: string;
}
export interface PageQuery {
    reference: Map<string, ItemDataType>;
    whichPage: PageEnum;
}
export interface Attachment {
    label?: string;
    url: string;
    type?: string;
    description?: string;
    icon?: string;
}
export interface AdditionalInfo {
    details?: Map<string, Map<string, string>>;
    actions?: Array<Action>;
    attachments?: Array<Attachment>;
}
export type ItemDataType = string | number | Date | Array<string>;
export declare const PROTECTED_IMAGE_HEADER = "Protected-Image-Header";
/**
 * @param data A dictionnary of data to retrieve information
 * @param template The template of the desired string. Contains variable keys between brackets
 * @returns A string with the regex replaced by the data
 */
export declare function matchAndReplace(data: Map<string, ItemDataType>, template: string): string;
