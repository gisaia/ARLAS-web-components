import { OnChanges, SimpleChanges, ElementRef, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { AbstractDonut, TreeNode, SimpleNode, ARLASDonutTooltip } from 'arlas-d3';
import { ArlasColorService } from '../../services/color.generator.service';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class DonutComponent implements OnChanges, OnDestroy {
    private el;
    private colorService;
    private translate;
    /**
     * @Input : Angular
     * @description Data tree to plot in the donut.
     */
    donutData: TreeNode;
    /**
     * @Input : Angular
     * @description Sets the opacity of non-hovered or non-selected nodes.
     */
    opacity: number;
    /**
     * @Input : Angular
     * @description Css class name to use to customize a specific powerbar's style.
     */
    customizedCssClass: any;
    /**
     * @Input : Angular
     * @description List of selected nodes.
     */
    selectedArcsList: Array<Array<SimpleNode>>;
    /**
     * @Input : Angular
     * @description Whether the donut is multi-selectable.
     */
    multiselectable: boolean;
    /**
     * @Input : Angular
     * @description id of the donut
     */
    id: string;
    /**
     * @Input : Angular
     * @description List of [key, color] couples that associates a hex color to each key
     */
    keysToColors: Array<[string, string]>;
    /**
     * @Input : Angular
     * @description Knowing that saturation scale is [0, 1], `colorsSaturationWeight` is a
     * factor (between 0 and 1) that tightens this scale to [(1-colorsSaturationWeight), 1].
     * Therefore colors saturation of donuts arcs will be within this tightened scale..
     */
    colorsSaturationWeight: number;
    /**
     * @Input : Angular
     * @description Diameter of the donut. If it's not set, the donut take the Max(width,height) of the div containing the svg.
     */
    diameter: number;
    /**
     * @Input : Angular
     * @description Width of the svg containing the donut. If it's not set, the container width takes the donut's diameter.
     */
    containerWidth: number;
    /**
     * @Input : Angular
     * @description Unit that a node of the donut represents
     */
    unit: string;
    /**
     * @Output : Angular
     * @description Emits the list of selected nodes and the paths to their ultimate parent
     */
    selectedNodesEvent: Subject<Array<Array<SimpleNode>>>;
    /**
     * @Output : Angular
     * @description Emits the hovered node and the path to it's parents.
     * The key of the map is the node's name and the value is its color on the donut
     */
    hoveredNodesEvent: Subject<Map<string, string>>;
    /**
     * @Output : Angular
     * @description Emits the information about the hovered node and its parents.
     */
    hoveredNodeTooltipEvent: Subject<ARLASDonutTooltip>;
    donut: AbstractDonut;
    private _onDestroy$;
    constructor(el: ElementRef, colorService: ArlasColorService, translate: TranslateService);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @returns Json schema of the donut component for configuration
     */
    static getDonutJsonSchema(): Object;
    private setDonutParameters;
    static ɵfac: i0.ɵɵFactoryDeclaration<DonutComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DonutComponent, "arlas-donut", never, { "donutData": { "alias": "donutData"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "customizedCssClass": { "alias": "customizedCssClass"; "required": false; }; "selectedArcsList": { "alias": "selectedArcsList"; "required": false; }; "multiselectable": { "alias": "multiselectable"; "required": false; }; "id": { "alias": "id"; "required": false; }; "keysToColors": { "alias": "keysToColors"; "required": false; }; "colorsSaturationWeight": { "alias": "colorsSaturationWeight"; "required": false; }; "diameter": { "alias": "diameter"; "required": false; }; "containerWidth": { "alias": "containerWidth"; "required": false; }; "unit": { "alias": "unit"; "required": false; }; }, { "selectedNodesEvent": "selectedNodesEvent"; "hoveredNodesEvent": "hoveredNodesEvent"; "hoveredNodeTooltipEvent": "hoveredNodeTooltipEvent"; }, never, never, false, never>;
}
