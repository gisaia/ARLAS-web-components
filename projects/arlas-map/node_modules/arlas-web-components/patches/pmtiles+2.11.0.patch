diff --git a/node_modules/pmtiles/.DS_Store b/node_modules/pmtiles/.DS_Store
new file mode 100644
index 0000000..e1ef2cb
Binary files /dev/null and b/node_modules/pmtiles/.DS_Store differ
diff --git a/node_modules/pmtiles/dist/index.cjs b/node_modules/pmtiles/dist/index.cjs
index e4649d8..f2dc602 100644
--- a/node_modules/pmtiles/dist/index.cjs
+++ b/node_modules/pmtiles/dist/index.cjs
@@ -745,14 +745,32 @@ var leafletRasterLayer = (source, options) => {
   });
   return new cls(options);
 };
+var isDeepEqual = (object1, object2) => {
+  const objKeys1 = Object.keys(object1);
+  const objKeys2 = Object.keys(object2);
+  if (objKeys1.length !== objKeys2.length)
+    return false;
+  for (var key of objKeys1) {
+    const value1 = object1[key];
+    const value2 = object2[key];
+    const isObjects = isObject(value1) && isObject(value2);
+    if (isObjects && !isDeepEqual(value1, value2) || !isObjects && value1 !== value2) {
+      return false;
+    }
+  }
+  return true;
+};
+var isObject = (object) => {
+  return object != null && typeof object === "object";
+};
 var Protocol = class {
   constructor() {
     this.tile = (params, callback) => {
       if (params.type == "json") {
         const pmtiles_url = params.url.substr(10);
         let instance = this.tiles.get(pmtiles_url);
-        if (!instance) {
-          instance = new PMTiles(pmtiles_url);
+        if (!instance || !isDeepEqual(instance.source.customHeaders, params.headers)) {
+          instance = new PMTiles(pmtiles_url, params.headers);
           this.tiles.set(pmtiles_url, instance);
         }
         instance.getHeader().then((h) => {
@@ -782,8 +800,8 @@ var Protocol = class {
         }
         const pmtiles_url = result[1];
         let instance = this.tiles.get(pmtiles_url);
-        if (!instance) {
-          instance = new PMTiles(pmtiles_url);
+        if (!instance || !isDeepEqual(instance.source.customHeaders, params.headers)) {
+          instance = new PMTiles(pmtiles_url, params.headers);
           this.tiles.set(pmtiles_url, instance);
         }
         const z = result[2];
@@ -1452,9 +1470,9 @@ var SharedPromiseCache = class {
   }
 };
 var PMTiles = class {
-  constructor(source, cache, decompress) {
+  constructor(source, customHeaders, cache, decompress) {
     if (typeof source === "string") {
-      this.source = new FetchSource(source);
+      this.source = new FetchSource(source, customHeaders);
     } else {
       this.source = source;
     }
diff --git a/node_modules/pmtiles/dist/index.d.ts b/node_modules/pmtiles/dist/index.d.ts
index 8aa15e4..d728a35 100644
--- a/node_modules/pmtiles/dist/index.d.ts
+++ b/node_modules/pmtiles/dist/index.d.ts
@@ -129,7 +129,7 @@ export declare class PMTiles {
     source: Source;
     cache: Cache;
     decompress: DecompressFunc;
-    constructor(source: Source | string, cache?: Cache, decompress?: DecompressFunc);
+    constructor(source: Source | string, customHeaders?: any, cache?: Cache, decompress?: DecompressFunc);
     getHeader(): Promise<Header>;
     getZxyAttempt(z: number, x: number, y: number, signal?: AbortSignal): Promise<RangeResponse | undefined>;
     getZxy(z: number, x: number, y: number, signal?: AbortSignal): Promise<RangeResponse | undefined>;
diff --git a/node_modules/pmtiles/dist/index.js b/node_modules/pmtiles/dist/index.js
index 41ee11a..7b37190 100644
--- a/node_modules/pmtiles/dist/index.js
+++ b/node_modules/pmtiles/dist/index.js
@@ -745,14 +745,32 @@ var pmtiles = (() => {
     });
     return new cls(options);
   };
+  var isDeepEqual = (object1, object2) => {
+    const objKeys1 = Object.keys(object1);
+    const objKeys2 = Object.keys(object2);
+    if (objKeys1.length !== objKeys2.length)
+      return false;
+    for (var key of objKeys1) {
+      const value1 = object1[key];
+      const value2 = object2[key];
+      const isObjects = isObject(value1) && isObject(value2);
+      if (isObjects && !isDeepEqual(value1, value2) || !isObjects && value1 !== value2) {
+        return false;
+      }
+    }
+    return true;
+  };
+  var isObject = (object) => {
+    return object != null && typeof object === "object";
+  };
   var Protocol = class {
     constructor() {
       this.tile = (params, callback) => {
         if (params.type == "json") {
           const pmtiles_url = params.url.substr(10);
           let instance = this.tiles.get(pmtiles_url);
-          if (!instance) {
-            instance = new PMTiles(pmtiles_url);
+          if (!instance || !isDeepEqual(instance.source.customHeaders, params.headers)) {
+            instance = new PMTiles(pmtiles_url, params.headers);
             this.tiles.set(pmtiles_url, instance);
           }
           instance.getHeader().then((h) => {
@@ -782,8 +800,8 @@ var pmtiles = (() => {
           }
           const pmtiles_url = result[1];
           let instance = this.tiles.get(pmtiles_url);
-          if (!instance) {
-            instance = new PMTiles(pmtiles_url);
+          if (!instance || !isDeepEqual(instance.source.customHeaders, params.headers)) {
+            instance = new PMTiles(pmtiles_url, params.headers);
             this.tiles.set(pmtiles_url, instance);
           }
           const z = result[2];
@@ -1452,9 +1470,9 @@ var pmtiles = (() => {
     }
   };
   var PMTiles = class {
-    constructor(source, cache, decompress) {
+    constructor(source, customHeaders, cache, decompress) {
       if (typeof source === "string") {
-        this.source = new FetchSource(source);
+        this.source = new FetchSource(source, customHeaders);
       } else {
         this.source = source;
       }
diff --git a/node_modules/pmtiles/dist/index.mjs b/node_modules/pmtiles/dist/index.mjs
index 1fe8fe5..add1f35 100644
--- a/node_modules/pmtiles/dist/index.mjs
+++ b/node_modules/pmtiles/dist/index.mjs
@@ -705,14 +705,32 @@ var leafletRasterLayer = (source, options) => {
   });
   return new cls(options);
 };
+var isDeepEqual = (object1, object2) => {
+  const objKeys1 = Object.keys(object1);
+  const objKeys2 = Object.keys(object2);
+  if (objKeys1.length !== objKeys2.length)
+    return false;
+  for (var key of objKeys1) {
+    const value1 = object1[key];
+    const value2 = object2[key];
+    const isObjects = isObject(value1) && isObject(value2);
+    if (isObjects && !isDeepEqual(value1, value2) || !isObjects && value1 !== value2) {
+      return false;
+    }
+  }
+  return true;
+};
+var isObject = (object) => {
+  return object != null && typeof object === "object";
+};
 var Protocol = class {
   constructor() {
     this.tile = (params, callback) => {
       if (params.type == "json") {
         const pmtiles_url = params.url.substr(10);
         let instance = this.tiles.get(pmtiles_url);
-        if (!instance) {
-          instance = new PMTiles(pmtiles_url);
+        if (!instance || !isDeepEqual(instance.source.customHeaders, params.headers)) {
+          instance = new PMTiles(pmtiles_url, params.headers);
           this.tiles.set(pmtiles_url, instance);
         }
         instance.getHeader().then((h) => {
@@ -742,8 +760,8 @@ var Protocol = class {
         }
         const pmtiles_url = result[1];
         let instance = this.tiles.get(pmtiles_url);
-        if (!instance) {
-          instance = new PMTiles(pmtiles_url);
+        if (!instance || !isDeepEqual(instance.source.customHeaders, params.headers)) {
+          instance = new PMTiles(pmtiles_url, params.headers);
           this.tiles.set(pmtiles_url, instance);
         }
         const z = result[2];
@@ -1412,9 +1430,9 @@ var SharedPromiseCache = class {
   }
 };
 var PMTiles = class {
-  constructor(source, cache, decompress) {
+  constructor(source, customHeaders, cache, decompress) {
     if (typeof source === "string") {
-      this.source = new FetchSource(source);
+      this.source = new FetchSource(source, customHeaders);
     } else {
       this.source = source;
     }
